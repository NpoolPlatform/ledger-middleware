// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/detail"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/general"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/miningdetail"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/mininggeneral"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/miningunsold"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/profit"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/withdraw"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 7)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   detail.Table,
			Columns: detail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: detail.FieldID,
			},
		},
		Type: "Detail",
		Fields: map[string]*sqlgraph.FieldSpec{
			detail.FieldCreatedAt:       {Type: field.TypeUint32, Column: detail.FieldCreatedAt},
			detail.FieldUpdatedAt:       {Type: field.TypeUint32, Column: detail.FieldUpdatedAt},
			detail.FieldDeletedAt:       {Type: field.TypeUint32, Column: detail.FieldDeletedAt},
			detail.FieldAppID:           {Type: field.TypeUUID, Column: detail.FieldAppID},
			detail.FieldUserID:          {Type: field.TypeUUID, Column: detail.FieldUserID},
			detail.FieldCoinTypeID:      {Type: field.TypeUUID, Column: detail.FieldCoinTypeID},
			detail.FieldIoType:          {Type: field.TypeString, Column: detail.FieldIoType},
			detail.FieldIoSubType:       {Type: field.TypeString, Column: detail.FieldIoSubType},
			detail.FieldAmount:          {Type: field.TypeFloat64, Column: detail.FieldAmount},
			detail.FieldFromCoinTypeID:  {Type: field.TypeUUID, Column: detail.FieldFromCoinTypeID},
			detail.FieldCoinUsdCurrency: {Type: field.TypeFloat64, Column: detail.FieldCoinUsdCurrency},
			detail.FieldIoExtra:         {Type: field.TypeString, Column: detail.FieldIoExtra},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   general.Table,
			Columns: general.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: general.FieldID,
			},
		},
		Type: "General",
		Fields: map[string]*sqlgraph.FieldSpec{
			general.FieldCreatedAt:  {Type: field.TypeUint32, Column: general.FieldCreatedAt},
			general.FieldUpdatedAt:  {Type: field.TypeUint32, Column: general.FieldUpdatedAt},
			general.FieldDeletedAt:  {Type: field.TypeUint32, Column: general.FieldDeletedAt},
			general.FieldAppID:      {Type: field.TypeUUID, Column: general.FieldAppID},
			general.FieldUserID:     {Type: field.TypeUUID, Column: general.FieldUserID},
			general.FieldCoinTypeID: {Type: field.TypeUUID, Column: general.FieldCoinTypeID},
			general.FieldIncoming:   {Type: field.TypeFloat64, Column: general.FieldIncoming},
			general.FieldLocked:     {Type: field.TypeFloat64, Column: general.FieldLocked},
			general.FieldOutcoming:  {Type: field.TypeFloat64, Column: general.FieldOutcoming},
			general.FieldSpendable:  {Type: field.TypeFloat64, Column: general.FieldSpendable},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   miningdetail.Table,
			Columns: miningdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningdetail.FieldID,
			},
		},
		Type: "MiningDetail",
		Fields: map[string]*sqlgraph.FieldSpec{
			miningdetail.FieldCreatedAt:   {Type: field.TypeUint32, Column: miningdetail.FieldCreatedAt},
			miningdetail.FieldUpdatedAt:   {Type: field.TypeUint32, Column: miningdetail.FieldUpdatedAt},
			miningdetail.FieldDeletedAt:   {Type: field.TypeUint32, Column: miningdetail.FieldDeletedAt},
			miningdetail.FieldGoodID:      {Type: field.TypeUUID, Column: miningdetail.FieldGoodID},
			miningdetail.FieldCoinTypeID:  {Type: field.TypeUUID, Column: miningdetail.FieldCoinTypeID},
			miningdetail.FieldAmount:      {Type: field.TypeFloat64, Column: miningdetail.FieldAmount},
			miningdetail.FieldBenefitDate: {Type: field.TypeUint32, Column: miningdetail.FieldBenefitDate},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mininggeneral.Table,
			Columns: mininggeneral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mininggeneral.FieldID,
			},
		},
		Type: "MiningGeneral",
		Fields: map[string]*sqlgraph.FieldSpec{
			mininggeneral.FieldCreatedAt:  {Type: field.TypeUint32, Column: mininggeneral.FieldCreatedAt},
			mininggeneral.FieldUpdatedAt:  {Type: field.TypeUint32, Column: mininggeneral.FieldUpdatedAt},
			mininggeneral.FieldDeletedAt:  {Type: field.TypeUint32, Column: mininggeneral.FieldDeletedAt},
			mininggeneral.FieldGoodID:     {Type: field.TypeUUID, Column: mininggeneral.FieldGoodID},
			mininggeneral.FieldCoinTypeID: {Type: field.TypeUUID, Column: mininggeneral.FieldCoinTypeID},
			mininggeneral.FieldAmount:     {Type: field.TypeFloat64, Column: mininggeneral.FieldAmount},
			mininggeneral.FieldToPlatform: {Type: field.TypeFloat64, Column: mininggeneral.FieldToPlatform},
			mininggeneral.FieldToUser:     {Type: field.TypeFloat64, Column: mininggeneral.FieldToUser},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   miningunsold.Table,
			Columns: miningunsold.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningunsold.FieldID,
			},
		},
		Type: "MiningUnsold",
		Fields: map[string]*sqlgraph.FieldSpec{
			miningunsold.FieldCreatedAt:   {Type: field.TypeUint32, Column: miningunsold.FieldCreatedAt},
			miningunsold.FieldUpdatedAt:   {Type: field.TypeUint32, Column: miningunsold.FieldUpdatedAt},
			miningunsold.FieldDeletedAt:   {Type: field.TypeUint32, Column: miningunsold.FieldDeletedAt},
			miningunsold.FieldGoodID:      {Type: field.TypeUUID, Column: miningunsold.FieldGoodID},
			miningunsold.FieldCoinTypeID:  {Type: field.TypeUUID, Column: miningunsold.FieldCoinTypeID},
			miningunsold.FieldAmount:      {Type: field.TypeFloat64, Column: miningunsold.FieldAmount},
			miningunsold.FieldBenefitDate: {Type: field.TypeUint32, Column: miningunsold.FieldBenefitDate},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   profit.Table,
			Columns: profit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profit.FieldID,
			},
		},
		Type: "Profit",
		Fields: map[string]*sqlgraph.FieldSpec{
			profit.FieldCreatedAt:  {Type: field.TypeUint32, Column: profit.FieldCreatedAt},
			profit.FieldUpdatedAt:  {Type: field.TypeUint32, Column: profit.FieldUpdatedAt},
			profit.FieldDeletedAt:  {Type: field.TypeUint32, Column: profit.FieldDeletedAt},
			profit.FieldAppID:      {Type: field.TypeUUID, Column: profit.FieldAppID},
			profit.FieldUserID:     {Type: field.TypeUUID, Column: profit.FieldUserID},
			profit.FieldCoinTypeID: {Type: field.TypeUUID, Column: profit.FieldCoinTypeID},
			profit.FieldIncoming:   {Type: field.TypeFloat64, Column: profit.FieldIncoming},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   withdraw.Table,
			Columns: withdraw.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: withdraw.FieldID,
			},
		},
		Type: "Withdraw",
		Fields: map[string]*sqlgraph.FieldSpec{
			withdraw.FieldCreatedAt:             {Type: field.TypeUint32, Column: withdraw.FieldCreatedAt},
			withdraw.FieldUpdatedAt:             {Type: field.TypeUint32, Column: withdraw.FieldUpdatedAt},
			withdraw.FieldDeletedAt:             {Type: field.TypeUint32, Column: withdraw.FieldDeletedAt},
			withdraw.FieldAppID:                 {Type: field.TypeUUID, Column: withdraw.FieldAppID},
			withdraw.FieldUserID:                {Type: field.TypeUUID, Column: withdraw.FieldUserID},
			withdraw.FieldCoinTypeID:            {Type: field.TypeUUID, Column: withdraw.FieldCoinTypeID},
			withdraw.FieldAccountID:             {Type: field.TypeUUID, Column: withdraw.FieldAccountID},
			withdraw.FieldAddress:               {Type: field.TypeString, Column: withdraw.FieldAddress},
			withdraw.FieldPlatformTransactionID: {Type: field.TypeUUID, Column: withdraw.FieldPlatformTransactionID},
			withdraw.FieldChainTransactionID:    {Type: field.TypeString, Column: withdraw.FieldChainTransactionID},
			withdraw.FieldState:                 {Type: field.TypeString, Column: withdraw.FieldState},
			withdraw.FieldAmount:                {Type: field.TypeFloat64, Column: withdraw.FieldAmount},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (dq *DetailQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DetailQuery builder.
func (dq *DetailQuery) Filter() *DetailFilter {
	return &DetailFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DetailMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DetailMutation builder.
func (m *DetailMutation) Filter() *DetailFilter {
	return &DetailFilter{config: m.config, predicateAdder: m}
}

// DetailFilter provides a generic filtering capability at runtime for DetailQuery.
type DetailFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DetailFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DetailFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *DetailFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(detail.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *DetailFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(detail.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *DetailFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(detail.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *DetailFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *DetailFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldUserID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *DetailFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldCoinTypeID))
}

// WhereIoType applies the entql string predicate on the io_type field.
func (f *DetailFilter) WhereIoType(p entql.StringP) {
	f.Where(p.Field(detail.FieldIoType))
}

// WhereIoSubType applies the entql string predicate on the io_sub_type field.
func (f *DetailFilter) WhereIoSubType(p entql.StringP) {
	f.Where(p.Field(detail.FieldIoSubType))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *DetailFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(detail.FieldAmount))
}

// WhereFromCoinTypeID applies the entql [16]byte predicate on the from_coin_type_id field.
func (f *DetailFilter) WhereFromCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldFromCoinTypeID))
}

// WhereCoinUsdCurrency applies the entql float64 predicate on the coin_usd_currency field.
func (f *DetailFilter) WhereCoinUsdCurrency(p entql.Float64P) {
	f.Where(p.Field(detail.FieldCoinUsdCurrency))
}

// WhereIoExtra applies the entql string predicate on the io_extra field.
func (f *DetailFilter) WhereIoExtra(p entql.StringP) {
	f.Where(p.Field(detail.FieldIoExtra))
}

// addPredicate implements the predicateAdder interface.
func (gq *GeneralQuery) addPredicate(pred func(s *sql.Selector)) {
	gq.predicates = append(gq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GeneralQuery builder.
func (gq *GeneralQuery) Filter() *GeneralFilter {
	return &GeneralFilter{config: gq.config, predicateAdder: gq}
}

// addPredicate implements the predicateAdder interface.
func (m *GeneralMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GeneralMutation builder.
func (m *GeneralMutation) Filter() *GeneralFilter {
	return &GeneralFilter{config: m.config, predicateAdder: m}
}

// GeneralFilter provides a generic filtering capability at runtime for GeneralQuery.
type GeneralFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GeneralFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GeneralFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(general.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GeneralFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(general.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GeneralFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(general.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GeneralFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(general.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *GeneralFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(general.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *GeneralFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(general.FieldUserID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *GeneralFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(general.FieldCoinTypeID))
}

// WhereIncoming applies the entql float64 predicate on the incoming field.
func (f *GeneralFilter) WhereIncoming(p entql.Float64P) {
	f.Where(p.Field(general.FieldIncoming))
}

// WhereLocked applies the entql float64 predicate on the locked field.
func (f *GeneralFilter) WhereLocked(p entql.Float64P) {
	f.Where(p.Field(general.FieldLocked))
}

// WhereOutcoming applies the entql float64 predicate on the outcoming field.
func (f *GeneralFilter) WhereOutcoming(p entql.Float64P) {
	f.Where(p.Field(general.FieldOutcoming))
}

// WhereSpendable applies the entql float64 predicate on the spendable field.
func (f *GeneralFilter) WhereSpendable(p entql.Float64P) {
	f.Where(p.Field(general.FieldSpendable))
}

// addPredicate implements the predicateAdder interface.
func (mdq *MiningDetailQuery) addPredicate(pred func(s *sql.Selector)) {
	mdq.predicates = append(mdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MiningDetailQuery builder.
func (mdq *MiningDetailQuery) Filter() *MiningDetailFilter {
	return &MiningDetailFilter{config: mdq.config, predicateAdder: mdq}
}

// addPredicate implements the predicateAdder interface.
func (m *MiningDetailMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MiningDetailMutation builder.
func (m *MiningDetailMutation) Filter() *MiningDetailFilter {
	return &MiningDetailFilter{config: m.config, predicateAdder: m}
}

// MiningDetailFilter provides a generic filtering capability at runtime for MiningDetailQuery.
type MiningDetailFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MiningDetailFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MiningDetailFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(miningdetail.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *MiningDetailFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(miningdetail.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *MiningDetailFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(miningdetail.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *MiningDetailFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(miningdetail.FieldDeletedAt))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *MiningDetailFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(miningdetail.FieldGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *MiningDetailFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(miningdetail.FieldCoinTypeID))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *MiningDetailFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(miningdetail.FieldAmount))
}

// WhereBenefitDate applies the entql uint32 predicate on the benefit_date field.
func (f *MiningDetailFilter) WhereBenefitDate(p entql.Uint32P) {
	f.Where(p.Field(miningdetail.FieldBenefitDate))
}

// addPredicate implements the predicateAdder interface.
func (mgq *MiningGeneralQuery) addPredicate(pred func(s *sql.Selector)) {
	mgq.predicates = append(mgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MiningGeneralQuery builder.
func (mgq *MiningGeneralQuery) Filter() *MiningGeneralFilter {
	return &MiningGeneralFilter{config: mgq.config, predicateAdder: mgq}
}

// addPredicate implements the predicateAdder interface.
func (m *MiningGeneralMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MiningGeneralMutation builder.
func (m *MiningGeneralMutation) Filter() *MiningGeneralFilter {
	return &MiningGeneralFilter{config: m.config, predicateAdder: m}
}

// MiningGeneralFilter provides a generic filtering capability at runtime for MiningGeneralQuery.
type MiningGeneralFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MiningGeneralFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MiningGeneralFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(mininggeneral.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *MiningGeneralFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(mininggeneral.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *MiningGeneralFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(mininggeneral.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *MiningGeneralFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(mininggeneral.FieldDeletedAt))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *MiningGeneralFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(mininggeneral.FieldGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *MiningGeneralFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(mininggeneral.FieldCoinTypeID))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *MiningGeneralFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(mininggeneral.FieldAmount))
}

// WhereToPlatform applies the entql float64 predicate on the to_platform field.
func (f *MiningGeneralFilter) WhereToPlatform(p entql.Float64P) {
	f.Where(p.Field(mininggeneral.FieldToPlatform))
}

// WhereToUser applies the entql float64 predicate on the to_user field.
func (f *MiningGeneralFilter) WhereToUser(p entql.Float64P) {
	f.Where(p.Field(mininggeneral.FieldToUser))
}

// addPredicate implements the predicateAdder interface.
func (muq *MiningUnsoldQuery) addPredicate(pred func(s *sql.Selector)) {
	muq.predicates = append(muq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MiningUnsoldQuery builder.
func (muq *MiningUnsoldQuery) Filter() *MiningUnsoldFilter {
	return &MiningUnsoldFilter{config: muq.config, predicateAdder: muq}
}

// addPredicate implements the predicateAdder interface.
func (m *MiningUnsoldMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MiningUnsoldMutation builder.
func (m *MiningUnsoldMutation) Filter() *MiningUnsoldFilter {
	return &MiningUnsoldFilter{config: m.config, predicateAdder: m}
}

// MiningUnsoldFilter provides a generic filtering capability at runtime for MiningUnsoldQuery.
type MiningUnsoldFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MiningUnsoldFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MiningUnsoldFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(miningunsold.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *MiningUnsoldFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(miningunsold.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *MiningUnsoldFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(miningunsold.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *MiningUnsoldFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(miningunsold.FieldDeletedAt))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *MiningUnsoldFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(miningunsold.FieldGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *MiningUnsoldFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(miningunsold.FieldCoinTypeID))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *MiningUnsoldFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(miningunsold.FieldAmount))
}

// WhereBenefitDate applies the entql uint32 predicate on the benefit_date field.
func (f *MiningUnsoldFilter) WhereBenefitDate(p entql.Uint32P) {
	f.Where(p.Field(miningunsold.FieldBenefitDate))
}

// addPredicate implements the predicateAdder interface.
func (pq *ProfitQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProfitQuery builder.
func (pq *ProfitQuery) Filter() *ProfitFilter {
	return &ProfitFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProfitMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProfitMutation builder.
func (m *ProfitMutation) Filter() *ProfitFilter {
	return &ProfitFilter{config: m.config, predicateAdder: m}
}

// ProfitFilter provides a generic filtering capability at runtime for ProfitQuery.
type ProfitFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProfitFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ProfitFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(profit.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *ProfitFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(profit.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *ProfitFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(profit.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *ProfitFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(profit.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *ProfitFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(profit.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *ProfitFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(profit.FieldUserID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *ProfitFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(profit.FieldCoinTypeID))
}

// WhereIncoming applies the entql float64 predicate on the incoming field.
func (f *ProfitFilter) WhereIncoming(p entql.Float64P) {
	f.Where(p.Field(profit.FieldIncoming))
}

// addPredicate implements the predicateAdder interface.
func (wq *WithdrawQuery) addPredicate(pred func(s *sql.Selector)) {
	wq.predicates = append(wq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WithdrawQuery builder.
func (wq *WithdrawQuery) Filter() *WithdrawFilter {
	return &WithdrawFilter{config: wq.config, predicateAdder: wq}
}

// addPredicate implements the predicateAdder interface.
func (m *WithdrawMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WithdrawMutation builder.
func (m *WithdrawMutation) Filter() *WithdrawFilter {
	return &WithdrawFilter{config: m.config, predicateAdder: m}
}

// WithdrawFilter provides a generic filtering capability at runtime for WithdrawQuery.
type WithdrawFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WithdrawFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *WithdrawFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(withdraw.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *WithdrawFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(withdraw.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *WithdrawFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(withdraw.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *WithdrawFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(withdraw.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *WithdrawFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(withdraw.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *WithdrawFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(withdraw.FieldUserID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *WithdrawFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(withdraw.FieldCoinTypeID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *WithdrawFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(withdraw.FieldAccountID))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *WithdrawFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(withdraw.FieldAddress))
}

// WherePlatformTransactionID applies the entql [16]byte predicate on the platform_transaction_id field.
func (f *WithdrawFilter) WherePlatformTransactionID(p entql.ValueP) {
	f.Where(p.Field(withdraw.FieldPlatformTransactionID))
}

// WhereChainTransactionID applies the entql string predicate on the chain_transaction_id field.
func (f *WithdrawFilter) WhereChainTransactionID(p entql.StringP) {
	f.Where(p.Field(withdraw.FieldChainTransactionID))
}

// WhereState applies the entql string predicate on the state field.
func (f *WithdrawFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(withdraw.FieldState))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *WithdrawFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(withdraw.FieldAmount))
}
