// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/statement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StatementCreate is the builder for creating a Statement entity.
type StatementCreate struct {
	config
	mutation *StatementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *StatementCreate) SetCreatedAt(u uint32) *StatementCreate {
	sc.mutation.SetCreatedAt(u)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableCreatedAt(u *uint32) *StatementCreate {
	if u != nil {
		sc.SetCreatedAt(*u)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StatementCreate) SetUpdatedAt(u uint32) *StatementCreate {
	sc.mutation.SetUpdatedAt(u)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableUpdatedAt(u *uint32) *StatementCreate {
	if u != nil {
		sc.SetUpdatedAt(*u)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *StatementCreate) SetDeletedAt(u uint32) *StatementCreate {
	sc.mutation.SetDeletedAt(u)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableDeletedAt(u *uint32) *StatementCreate {
	if u != nil {
		sc.SetDeletedAt(*u)
	}
	return sc
}

// SetAppID sets the "app_id" field.
func (sc *StatementCreate) SetAppID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetAppID(u)
	return sc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableAppID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetAppID(*u)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *StatementCreate) SetUserID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetUserID(u)
	return sc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableUserID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetUserID(*u)
	}
	return sc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (sc *StatementCreate) SetCoinTypeID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetCoinTypeID(u)
	return sc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableCoinTypeID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetCoinTypeID(*u)
	}
	return sc
}

// SetIoType sets the "io_type" field.
func (sc *StatementCreate) SetIoType(s string) *StatementCreate {
	sc.mutation.SetIoType(s)
	return sc
}

// SetNillableIoType sets the "io_type" field if the given value is not nil.
func (sc *StatementCreate) SetNillableIoType(s *string) *StatementCreate {
	if s != nil {
		sc.SetIoType(*s)
	}
	return sc
}

// SetIoSubType sets the "io_sub_type" field.
func (sc *StatementCreate) SetIoSubType(s string) *StatementCreate {
	sc.mutation.SetIoSubType(s)
	return sc
}

// SetNillableIoSubType sets the "io_sub_type" field if the given value is not nil.
func (sc *StatementCreate) SetNillableIoSubType(s *string) *StatementCreate {
	if s != nil {
		sc.SetIoSubType(*s)
	}
	return sc
}

// SetAmount sets the "amount" field.
func (sc *StatementCreate) SetAmount(d decimal.Decimal) *StatementCreate {
	sc.mutation.SetAmount(d)
	return sc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sc *StatementCreate) SetNillableAmount(d *decimal.Decimal) *StatementCreate {
	if d != nil {
		sc.SetAmount(*d)
	}
	return sc
}

// SetIoExtra sets the "io_extra" field.
func (sc *StatementCreate) SetIoExtra(s string) *StatementCreate {
	sc.mutation.SetIoExtra(s)
	return sc
}

// SetNillableIoExtra sets the "io_extra" field if the given value is not nil.
func (sc *StatementCreate) SetNillableIoExtra(s *string) *StatementCreate {
	if s != nil {
		sc.SetIoExtra(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StatementCreate) SetID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// Mutation returns the StatementMutation object of the builder.
func (sc *StatementCreate) Mutation() *StatementMutation {
	return sc.mutation
}

// Save creates the Statement in the database.
func (sc *StatementCreate) Save(ctx context.Context) (*Statement, error) {
	var (
		err  error
		node *Statement
	)
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Statement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StatementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatementCreate) SaveX(ctx context.Context) *Statement {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StatementCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StatementCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StatementCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if statement.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized statement.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := statement.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if statement.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized statement.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := statement.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		if statement.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized statement.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := statement.DefaultDeletedAt()
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.AppID(); !ok {
		if statement.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized statement.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := statement.DefaultAppID()
		sc.mutation.SetAppID(v)
	}
	if _, ok := sc.mutation.UserID(); !ok {
		if statement.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized statement.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := statement.DefaultUserID()
		sc.mutation.SetUserID(v)
	}
	if _, ok := sc.mutation.CoinTypeID(); !ok {
		if statement.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized statement.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := statement.DefaultCoinTypeID()
		sc.mutation.SetCoinTypeID(v)
	}
	if _, ok := sc.mutation.IoType(); !ok {
		v := statement.DefaultIoType
		sc.mutation.SetIoType(v)
	}
	if _, ok := sc.mutation.IoSubType(); !ok {
		v := statement.DefaultIoSubType
		sc.mutation.SetIoSubType(v)
	}
	if _, ok := sc.mutation.IoExtra(); !ok {
		v := statement.DefaultIoExtra
		sc.mutation.SetIoExtra(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if statement.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized statement.DefaultID (forgotten import ent/runtime?)")
		}
		v := statement.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *StatementCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Statement.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Statement.updated_at"`)}
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Statement.deleted_at"`)}
	}
	if v, ok := sc.mutation.IoExtra(); ok {
		if err := statement.IoExtraValidator(v); err != nil {
			return &ValidationError{Name: "io_extra", err: fmt.Errorf(`ent: validator failed for field "Statement.io_extra": %w`, err)}
		}
	}
	return nil
}

func (sc *StatementCreate) sqlSave(ctx context.Context) (*Statement, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sc *StatementCreate) createSpec() (*Statement, *sqlgraph.CreateSpec) {
	var (
		_node = &Statement{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: statement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: statement.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: statement.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := sc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: statement.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := sc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: statement.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := sc.mutation.IoType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statement.FieldIoType,
		})
		_node.IoType = value
	}
	if value, ok := sc.mutation.IoSubType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statement.FieldIoSubType,
		})
		_node.IoSubType = value
	}
	if value, ok := sc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statement.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := sc.mutation.IoExtra(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statement.FieldIoExtra,
		})
		_node.IoExtra = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Statement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sc *StatementCreate) OnConflict(opts ...sql.ConflictOption) *StatementUpsertOne {
	sc.conflict = opts
	return &StatementUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *StatementCreate) OnConflictColumns(columns ...string) *StatementUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StatementUpsertOne{
		create: sc,
	}
}

type (
	// StatementUpsertOne is the builder for "upsert"-ing
	//  one Statement node.
	StatementUpsertOne struct {
		create *StatementCreate
	}

	// StatementUpsert is the "OnConflict" setter.
	StatementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *StatementUpsert) SetCreatedAt(v uint32) *StatementUpsert {
	u.Set(statement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StatementUpsert) UpdateCreatedAt() *StatementUpsert {
	u.SetExcluded(statement.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StatementUpsert) AddCreatedAt(v uint32) *StatementUpsert {
	u.Add(statement.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatementUpsert) SetUpdatedAt(v uint32) *StatementUpsert {
	u.Set(statement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatementUpsert) UpdateUpdatedAt() *StatementUpsert {
	u.SetExcluded(statement.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StatementUpsert) AddUpdatedAt(v uint32) *StatementUpsert {
	u.Add(statement.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StatementUpsert) SetDeletedAt(v uint32) *StatementUpsert {
	u.Set(statement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StatementUpsert) UpdateDeletedAt() *StatementUpsert {
	u.SetExcluded(statement.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StatementUpsert) AddDeletedAt(v uint32) *StatementUpsert {
	u.Add(statement.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *StatementUpsert) SetAppID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateAppID() *StatementUpsert {
	u.SetExcluded(statement.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *StatementUpsert) ClearAppID() *StatementUpsert {
	u.SetNull(statement.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *StatementUpsert) SetUserID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateUserID() *StatementUpsert {
	u.SetExcluded(statement.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *StatementUpsert) ClearUserID() *StatementUpsert {
	u.SetNull(statement.FieldUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *StatementUpsert) SetCoinTypeID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateCoinTypeID() *StatementUpsert {
	u.SetExcluded(statement.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *StatementUpsert) ClearCoinTypeID() *StatementUpsert {
	u.SetNull(statement.FieldCoinTypeID)
	return u
}

// SetIoType sets the "io_type" field.
func (u *StatementUpsert) SetIoType(v string) *StatementUpsert {
	u.Set(statement.FieldIoType, v)
	return u
}

// UpdateIoType sets the "io_type" field to the value that was provided on create.
func (u *StatementUpsert) UpdateIoType() *StatementUpsert {
	u.SetExcluded(statement.FieldIoType)
	return u
}

// ClearIoType clears the value of the "io_type" field.
func (u *StatementUpsert) ClearIoType() *StatementUpsert {
	u.SetNull(statement.FieldIoType)
	return u
}

// SetIoSubType sets the "io_sub_type" field.
func (u *StatementUpsert) SetIoSubType(v string) *StatementUpsert {
	u.Set(statement.FieldIoSubType, v)
	return u
}

// UpdateIoSubType sets the "io_sub_type" field to the value that was provided on create.
func (u *StatementUpsert) UpdateIoSubType() *StatementUpsert {
	u.SetExcluded(statement.FieldIoSubType)
	return u
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (u *StatementUpsert) ClearIoSubType() *StatementUpsert {
	u.SetNull(statement.FieldIoSubType)
	return u
}

// SetAmount sets the "amount" field.
func (u *StatementUpsert) SetAmount(v decimal.Decimal) *StatementUpsert {
	u.Set(statement.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *StatementUpsert) UpdateAmount() *StatementUpsert {
	u.SetExcluded(statement.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *StatementUpsert) AddAmount(v decimal.Decimal) *StatementUpsert {
	u.Add(statement.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *StatementUpsert) ClearAmount() *StatementUpsert {
	u.SetNull(statement.FieldAmount)
	return u
}

// SetIoExtra sets the "io_extra" field.
func (u *StatementUpsert) SetIoExtra(v string) *StatementUpsert {
	u.Set(statement.FieldIoExtra, v)
	return u
}

// UpdateIoExtra sets the "io_extra" field to the value that was provided on create.
func (u *StatementUpsert) UpdateIoExtra() *StatementUpsert {
	u.SetExcluded(statement.FieldIoExtra)
	return u
}

// ClearIoExtra clears the value of the "io_extra" field.
func (u *StatementUpsert) ClearIoExtra() *StatementUpsert {
	u.SetNull(statement.FieldIoExtra)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(statement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StatementUpsertOne) UpdateNewValues() *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(statement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Statement.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *StatementUpsertOne) Ignore() *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StatementUpsertOne) DoNothing() *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StatementCreate.OnConflict
// documentation for more info.
func (u *StatementUpsertOne) Update(set func(*StatementUpsert)) *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StatementUpsertOne) SetCreatedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StatementUpsertOne) AddCreatedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateCreatedAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatementUpsertOne) SetUpdatedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StatementUpsertOne) AddUpdatedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateUpdatedAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StatementUpsertOne) SetDeletedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StatementUpsertOne) AddDeletedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateDeletedAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *StatementUpsertOne) SetAppID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateAppID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *StatementUpsertOne) ClearAppID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *StatementUpsertOne) SetUserID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateUserID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *StatementUpsertOne) ClearUserID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *StatementUpsertOne) SetCoinTypeID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateCoinTypeID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *StatementUpsertOne) ClearCoinTypeID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetIoType sets the "io_type" field.
func (u *StatementUpsertOne) SetIoType(v string) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetIoType(v)
	})
}

// UpdateIoType sets the "io_type" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateIoType() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateIoType()
	})
}

// ClearIoType clears the value of the "io_type" field.
func (u *StatementUpsertOne) ClearIoType() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearIoType()
	})
}

// SetIoSubType sets the "io_sub_type" field.
func (u *StatementUpsertOne) SetIoSubType(v string) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetIoSubType(v)
	})
}

// UpdateIoSubType sets the "io_sub_type" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateIoSubType() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateIoSubType()
	})
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (u *StatementUpsertOne) ClearIoSubType() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearIoSubType()
	})
}

// SetAmount sets the "amount" field.
func (u *StatementUpsertOne) SetAmount(v decimal.Decimal) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *StatementUpsertOne) AddAmount(v decimal.Decimal) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateAmount() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *StatementUpsertOne) ClearAmount() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAmount()
	})
}

// SetIoExtra sets the "io_extra" field.
func (u *StatementUpsertOne) SetIoExtra(v string) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetIoExtra(v)
	})
}

// UpdateIoExtra sets the "io_extra" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateIoExtra() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateIoExtra()
	})
}

// ClearIoExtra clears the value of the "io_extra" field.
func (u *StatementUpsertOne) ClearIoExtra() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearIoExtra()
	})
}

// Exec executes the query.
func (u *StatementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StatementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StatementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StatementUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: StatementUpsertOne.ID is not supported by MySQL driver. Use StatementUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StatementUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StatementCreateBulk is the builder for creating many Statement entities in bulk.
type StatementCreateBulk struct {
	config
	builders []*StatementCreate
	conflict []sql.ConflictOption
}

// Save creates the Statement entities in the database.
func (scb *StatementCreateBulk) Save(ctx context.Context) ([]*Statement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Statement, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StatementCreateBulk) SaveX(ctx context.Context) []*Statement {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StatementCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StatementCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Statement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scb *StatementCreateBulk) OnConflict(opts ...sql.ConflictOption) *StatementUpsertBulk {
	scb.conflict = opts
	return &StatementUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *StatementCreateBulk) OnConflictColumns(columns ...string) *StatementUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StatementUpsertBulk{
		create: scb,
	}
}

// StatementUpsertBulk is the builder for "upsert"-ing
// a bulk of Statement nodes.
type StatementUpsertBulk struct {
	create *StatementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(statement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StatementUpsertBulk) UpdateNewValues() *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(statement.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *StatementUpsertBulk) Ignore() *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StatementUpsertBulk) DoNothing() *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StatementCreateBulk.OnConflict
// documentation for more info.
func (u *StatementUpsertBulk) Update(set func(*StatementUpsert)) *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StatementUpsertBulk) SetCreatedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StatementUpsertBulk) AddCreatedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateCreatedAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatementUpsertBulk) SetUpdatedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StatementUpsertBulk) AddUpdatedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateUpdatedAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StatementUpsertBulk) SetDeletedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StatementUpsertBulk) AddDeletedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateDeletedAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *StatementUpsertBulk) SetAppID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateAppID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *StatementUpsertBulk) ClearAppID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *StatementUpsertBulk) SetUserID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateUserID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *StatementUpsertBulk) ClearUserID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *StatementUpsertBulk) SetCoinTypeID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateCoinTypeID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *StatementUpsertBulk) ClearCoinTypeID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetIoType sets the "io_type" field.
func (u *StatementUpsertBulk) SetIoType(v string) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetIoType(v)
	})
}

// UpdateIoType sets the "io_type" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateIoType() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateIoType()
	})
}

// ClearIoType clears the value of the "io_type" field.
func (u *StatementUpsertBulk) ClearIoType() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearIoType()
	})
}

// SetIoSubType sets the "io_sub_type" field.
func (u *StatementUpsertBulk) SetIoSubType(v string) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetIoSubType(v)
	})
}

// UpdateIoSubType sets the "io_sub_type" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateIoSubType() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateIoSubType()
	})
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (u *StatementUpsertBulk) ClearIoSubType() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearIoSubType()
	})
}

// SetAmount sets the "amount" field.
func (u *StatementUpsertBulk) SetAmount(v decimal.Decimal) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *StatementUpsertBulk) AddAmount(v decimal.Decimal) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateAmount() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *StatementUpsertBulk) ClearAmount() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAmount()
	})
}

// SetIoExtra sets the "io_extra" field.
func (u *StatementUpsertBulk) SetIoExtra(v string) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetIoExtra(v)
	})
}

// UpdateIoExtra sets the "io_extra" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateIoExtra() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateIoExtra()
	})
}

// ClearIoExtra clears the value of the "io_extra" field.
func (u *StatementUpsertBulk) ClearIoExtra() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearIoExtra()
	})
}

// Exec executes the query.
func (u *StatementUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StatementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StatementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StatementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
