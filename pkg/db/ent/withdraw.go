// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/withdraw"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Withdraw is the model entity for the Withdraw schema.
type Withdraw struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID uuid.UUID `json:"account_id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// PlatformTransactionID holds the value of the "platform_transaction_id" field.
	PlatformTransactionID uuid.UUID `json:"platform_transaction_id,omitempty"`
	// ChainTransactionID holds the value of the "chain_transaction_id" field.
	ChainTransactionID string `json:"chain_transaction_id,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Withdraw) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case withdraw.FieldAmount:
			values[i] = new(decimal.Decimal)
		case withdraw.FieldCreatedAt, withdraw.FieldUpdatedAt, withdraw.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case withdraw.FieldAddress, withdraw.FieldChainTransactionID, withdraw.FieldState:
			values[i] = new(sql.NullString)
		case withdraw.FieldID, withdraw.FieldAppID, withdraw.FieldUserID, withdraw.FieldCoinTypeID, withdraw.FieldAccountID, withdraw.FieldPlatformTransactionID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Withdraw", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Withdraw fields.
func (w *Withdraw) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case withdraw.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case withdraw.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = uint32(value.Int64)
			}
		case withdraw.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = uint32(value.Int64)
			}
		case withdraw.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				w.DeletedAt = uint32(value.Int64)
			}
		case withdraw.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				w.AppID = *value
			}
		case withdraw.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				w.UserID = *value
			}
		case withdraw.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				w.CoinTypeID = *value
			}
		case withdraw.FieldAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				w.AccountID = *value
			}
		case withdraw.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				w.Address = value.String
			}
		case withdraw.FieldPlatformTransactionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field platform_transaction_id", values[i])
			} else if value != nil {
				w.PlatformTransactionID = *value
			}
		case withdraw.FieldChainTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_transaction_id", values[i])
			} else if value.Valid {
				w.ChainTransactionID = value.String
			}
		case withdraw.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				w.State = value.String
			}
		case withdraw.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				w.Amount = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Withdraw.
// Note that you need to call Withdraw.Unwrap() before calling this method if this Withdraw
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Withdraw) Update() *WithdrawUpdateOne {
	return (&WithdrawClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Withdraw entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Withdraw) Unwrap() *Withdraw {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Withdraw is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Withdraw) String() string {
	var builder strings.Builder
	builder.WriteString("Withdraw(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", w.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", w.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", w.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", w.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", w.UserID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", w.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", w.AccountID))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(w.Address)
	builder.WriteString(", ")
	builder.WriteString("platform_transaction_id=")
	builder.WriteString(fmt.Sprintf("%v", w.PlatformTransactionID))
	builder.WriteString(", ")
	builder.WriteString("chain_transaction_id=")
	builder.WriteString(w.ChainTransactionID)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(w.State)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", w.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// Withdraws is a parsable slice of Withdraw.
type Withdraws []*Withdraw

func (w Withdraws) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
