// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/simulatestatement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SimulateStatementCreate is the builder for creating a SimulateStatement entity.
type SimulateStatementCreate struct {
	config
	mutation *SimulateStatementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ssc *SimulateStatementCreate) SetCreatedAt(u uint32) *SimulateStatementCreate {
	ssc.mutation.SetCreatedAt(u)
	return ssc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableCreatedAt(u *uint32) *SimulateStatementCreate {
	if u != nil {
		ssc.SetCreatedAt(*u)
	}
	return ssc
}

// SetUpdatedAt sets the "updated_at" field.
func (ssc *SimulateStatementCreate) SetUpdatedAt(u uint32) *SimulateStatementCreate {
	ssc.mutation.SetUpdatedAt(u)
	return ssc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableUpdatedAt(u *uint32) *SimulateStatementCreate {
	if u != nil {
		ssc.SetUpdatedAt(*u)
	}
	return ssc
}

// SetDeletedAt sets the "deleted_at" field.
func (ssc *SimulateStatementCreate) SetDeletedAt(u uint32) *SimulateStatementCreate {
	ssc.mutation.SetDeletedAt(u)
	return ssc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableDeletedAt(u *uint32) *SimulateStatementCreate {
	if u != nil {
		ssc.SetDeletedAt(*u)
	}
	return ssc
}

// SetEntID sets the "ent_id" field.
func (ssc *SimulateStatementCreate) SetEntID(u uuid.UUID) *SimulateStatementCreate {
	ssc.mutation.SetEntID(u)
	return ssc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableEntID(u *uuid.UUID) *SimulateStatementCreate {
	if u != nil {
		ssc.SetEntID(*u)
	}
	return ssc
}

// SetAppID sets the "app_id" field.
func (ssc *SimulateStatementCreate) SetAppID(u uuid.UUID) *SimulateStatementCreate {
	ssc.mutation.SetAppID(u)
	return ssc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableAppID(u *uuid.UUID) *SimulateStatementCreate {
	if u != nil {
		ssc.SetAppID(*u)
	}
	return ssc
}

// SetUserID sets the "user_id" field.
func (ssc *SimulateStatementCreate) SetUserID(u uuid.UUID) *SimulateStatementCreate {
	ssc.mutation.SetUserID(u)
	return ssc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableUserID(u *uuid.UUID) *SimulateStatementCreate {
	if u != nil {
		ssc.SetUserID(*u)
	}
	return ssc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ssc *SimulateStatementCreate) SetCoinTypeID(u uuid.UUID) *SimulateStatementCreate {
	ssc.mutation.SetCoinTypeID(u)
	return ssc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableCoinTypeID(u *uuid.UUID) *SimulateStatementCreate {
	if u != nil {
		ssc.SetCoinTypeID(*u)
	}
	return ssc
}

// SetIoType sets the "io_type" field.
func (ssc *SimulateStatementCreate) SetIoType(s string) *SimulateStatementCreate {
	ssc.mutation.SetIoType(s)
	return ssc
}

// SetNillableIoType sets the "io_type" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableIoType(s *string) *SimulateStatementCreate {
	if s != nil {
		ssc.SetIoType(*s)
	}
	return ssc
}

// SetIoSubType sets the "io_sub_type" field.
func (ssc *SimulateStatementCreate) SetIoSubType(s string) *SimulateStatementCreate {
	ssc.mutation.SetIoSubType(s)
	return ssc
}

// SetNillableIoSubType sets the "io_sub_type" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableIoSubType(s *string) *SimulateStatementCreate {
	if s != nil {
		ssc.SetIoSubType(*s)
	}
	return ssc
}

// SetAmount sets the "amount" field.
func (ssc *SimulateStatementCreate) SetAmount(d decimal.Decimal) *SimulateStatementCreate {
	ssc.mutation.SetAmount(d)
	return ssc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableAmount(d *decimal.Decimal) *SimulateStatementCreate {
	if d != nil {
		ssc.SetAmount(*d)
	}
	return ssc
}

// SetIoExtra sets the "io_extra" field.
func (ssc *SimulateStatementCreate) SetIoExtra(s string) *SimulateStatementCreate {
	ssc.mutation.SetIoExtra(s)
	return ssc
}

// SetNillableIoExtra sets the "io_extra" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableIoExtra(s *string) *SimulateStatementCreate {
	if s != nil {
		ssc.SetIoExtra(*s)
	}
	return ssc
}

// SetSendCoupon sets the "send_coupon" field.
func (ssc *SimulateStatementCreate) SetSendCoupon(b bool) *SimulateStatementCreate {
	ssc.mutation.SetSendCoupon(b)
	return ssc
}

// SetNillableSendCoupon sets the "send_coupon" field if the given value is not nil.
func (ssc *SimulateStatementCreate) SetNillableSendCoupon(b *bool) *SimulateStatementCreate {
	if b != nil {
		ssc.SetSendCoupon(*b)
	}
	return ssc
}

// SetID sets the "id" field.
func (ssc *SimulateStatementCreate) SetID(u uint32) *SimulateStatementCreate {
	ssc.mutation.SetID(u)
	return ssc
}

// Mutation returns the SimulateStatementMutation object of the builder.
func (ssc *SimulateStatementCreate) Mutation() *SimulateStatementMutation {
	return ssc.mutation
}

// Save creates the SimulateStatement in the database.
func (ssc *SimulateStatementCreate) Save(ctx context.Context) (*SimulateStatement, error) {
	var (
		err  error
		node *SimulateStatement
	)
	if err := ssc.defaults(); err != nil {
		return nil, err
	}
	if len(ssc.hooks) == 0 {
		if err = ssc.check(); err != nil {
			return nil, err
		}
		node, err = ssc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SimulateStatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssc.check(); err != nil {
				return nil, err
			}
			ssc.mutation = mutation
			if node, err = ssc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ssc.hooks) - 1; i >= 0; i-- {
			if ssc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ssc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SimulateStatement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SimulateStatementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SimulateStatementCreate) SaveX(ctx context.Context) *SimulateStatement {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SimulateStatementCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SimulateStatementCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *SimulateStatementCreate) defaults() error {
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		if simulatestatement.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulatestatement.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := simulatestatement.DefaultCreatedAt()
		ssc.mutation.SetCreatedAt(v)
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		if simulatestatement.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulatestatement.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := simulatestatement.DefaultUpdatedAt()
		ssc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ssc.mutation.DeletedAt(); !ok {
		if simulatestatement.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized simulatestatement.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := simulatestatement.DefaultDeletedAt()
		ssc.mutation.SetDeletedAt(v)
	}
	if _, ok := ssc.mutation.EntID(); !ok {
		if simulatestatement.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized simulatestatement.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := simulatestatement.DefaultEntID()
		ssc.mutation.SetEntID(v)
	}
	if _, ok := ssc.mutation.AppID(); !ok {
		if simulatestatement.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized simulatestatement.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := simulatestatement.DefaultAppID()
		ssc.mutation.SetAppID(v)
	}
	if _, ok := ssc.mutation.UserID(); !ok {
		if simulatestatement.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized simulatestatement.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := simulatestatement.DefaultUserID()
		ssc.mutation.SetUserID(v)
	}
	if _, ok := ssc.mutation.CoinTypeID(); !ok {
		if simulatestatement.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized simulatestatement.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := simulatestatement.DefaultCoinTypeID()
		ssc.mutation.SetCoinTypeID(v)
	}
	if _, ok := ssc.mutation.IoType(); !ok {
		v := simulatestatement.DefaultIoType
		ssc.mutation.SetIoType(v)
	}
	if _, ok := ssc.mutation.IoSubType(); !ok {
		v := simulatestatement.DefaultIoSubType
		ssc.mutation.SetIoSubType(v)
	}
	if _, ok := ssc.mutation.IoExtra(); !ok {
		v := simulatestatement.DefaultIoExtra
		ssc.mutation.SetIoExtra(v)
	}
	if _, ok := ssc.mutation.SendCoupon(); !ok {
		v := simulatestatement.DefaultSendCoupon
		ssc.mutation.SetSendCoupon(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SimulateStatementCreate) check() error {
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SimulateStatement.created_at"`)}
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SimulateStatement.updated_at"`)}
	}
	if _, ok := ssc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "SimulateStatement.deleted_at"`)}
	}
	if _, ok := ssc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "SimulateStatement.ent_id"`)}
	}
	if v, ok := ssc.mutation.IoExtra(); ok {
		if err := simulatestatement.IoExtraValidator(v); err != nil {
			return &ValidationError{Name: "io_extra", err: fmt.Errorf(`ent: validator failed for field "SimulateStatement.io_extra": %w`, err)}
		}
	}
	return nil
}

func (ssc *SimulateStatementCreate) sqlSave(ctx context.Context) (*SimulateStatement, error) {
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (ssc *SimulateStatementCreate) createSpec() (*SimulateStatement, *sqlgraph.CreateSpec) {
	var (
		_node = &SimulateStatement{config: ssc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: simulatestatement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: simulatestatement.FieldID,
			},
		}
	)
	_spec.OnConflict = ssc.conflict
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulatestatement.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ssc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulatestatement.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ssc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulatestatement.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ssc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulatestatement.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := ssc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulatestatement.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ssc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulatestatement.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := ssc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulatestatement.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := ssc.mutation.IoType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: simulatestatement.FieldIoType,
		})
		_node.IoType = value
	}
	if value, ok := ssc.mutation.IoSubType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: simulatestatement.FieldIoSubType,
		})
		_node.IoSubType = value
	}
	if value, ok := ssc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulatestatement.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := ssc.mutation.IoExtra(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: simulatestatement.FieldIoExtra,
		})
		_node.IoExtra = value
	}
	if value, ok := ssc.mutation.SendCoupon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: simulatestatement.FieldSendCoupon,
		})
		_node.SendCoupon = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SimulateStatement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SimulateStatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ssc *SimulateStatementCreate) OnConflict(opts ...sql.ConflictOption) *SimulateStatementUpsertOne {
	ssc.conflict = opts
	return &SimulateStatementUpsertOne{
		create: ssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SimulateStatement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ssc *SimulateStatementCreate) OnConflictColumns(columns ...string) *SimulateStatementUpsertOne {
	ssc.conflict = append(ssc.conflict, sql.ConflictColumns(columns...))
	return &SimulateStatementUpsertOne{
		create: ssc,
	}
}

type (
	// SimulateStatementUpsertOne is the builder for "upsert"-ing
	//  one SimulateStatement node.
	SimulateStatementUpsertOne struct {
		create *SimulateStatementCreate
	}

	// SimulateStatementUpsert is the "OnConflict" setter.
	SimulateStatementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SimulateStatementUpsert) SetCreatedAt(v uint32) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateCreatedAt() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateStatementUpsert) AddCreatedAt(v uint32) *SimulateStatementUpsert {
	u.Add(simulatestatement.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateStatementUpsert) SetUpdatedAt(v uint32) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateUpdatedAt() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateStatementUpsert) AddUpdatedAt(v uint32) *SimulateStatementUpsert {
	u.Add(simulatestatement.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateStatementUpsert) SetDeletedAt(v uint32) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateDeletedAt() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateStatementUpsert) AddDeletedAt(v uint32) *SimulateStatementUpsert {
	u.Add(simulatestatement.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SimulateStatementUpsert) SetEntID(v uuid.UUID) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateEntID() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *SimulateStatementUpsert) SetAppID(v uuid.UUID) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateAppID() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *SimulateStatementUpsert) ClearAppID() *SimulateStatementUpsert {
	u.SetNull(simulatestatement.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SimulateStatementUpsert) SetUserID(v uuid.UUID) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateUserID() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *SimulateStatementUpsert) ClearUserID() *SimulateStatementUpsert {
	u.SetNull(simulatestatement.FieldUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SimulateStatementUpsert) SetCoinTypeID(v uuid.UUID) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateCoinTypeID() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SimulateStatementUpsert) ClearCoinTypeID() *SimulateStatementUpsert {
	u.SetNull(simulatestatement.FieldCoinTypeID)
	return u
}

// SetIoType sets the "io_type" field.
func (u *SimulateStatementUpsert) SetIoType(v string) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldIoType, v)
	return u
}

// UpdateIoType sets the "io_type" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateIoType() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldIoType)
	return u
}

// ClearIoType clears the value of the "io_type" field.
func (u *SimulateStatementUpsert) ClearIoType() *SimulateStatementUpsert {
	u.SetNull(simulatestatement.FieldIoType)
	return u
}

// SetIoSubType sets the "io_sub_type" field.
func (u *SimulateStatementUpsert) SetIoSubType(v string) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldIoSubType, v)
	return u
}

// UpdateIoSubType sets the "io_sub_type" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateIoSubType() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldIoSubType)
	return u
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (u *SimulateStatementUpsert) ClearIoSubType() *SimulateStatementUpsert {
	u.SetNull(simulatestatement.FieldIoSubType)
	return u
}

// SetAmount sets the "amount" field.
func (u *SimulateStatementUpsert) SetAmount(v decimal.Decimal) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateAmount() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *SimulateStatementUpsert) AddAmount(v decimal.Decimal) *SimulateStatementUpsert {
	u.Add(simulatestatement.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *SimulateStatementUpsert) ClearAmount() *SimulateStatementUpsert {
	u.SetNull(simulatestatement.FieldAmount)
	return u
}

// SetIoExtra sets the "io_extra" field.
func (u *SimulateStatementUpsert) SetIoExtra(v string) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldIoExtra, v)
	return u
}

// UpdateIoExtra sets the "io_extra" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateIoExtra() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldIoExtra)
	return u
}

// ClearIoExtra clears the value of the "io_extra" field.
func (u *SimulateStatementUpsert) ClearIoExtra() *SimulateStatementUpsert {
	u.SetNull(simulatestatement.FieldIoExtra)
	return u
}

// SetSendCoupon sets the "send_coupon" field.
func (u *SimulateStatementUpsert) SetSendCoupon(v bool) *SimulateStatementUpsert {
	u.Set(simulatestatement.FieldSendCoupon, v)
	return u
}

// UpdateSendCoupon sets the "send_coupon" field to the value that was provided on create.
func (u *SimulateStatementUpsert) UpdateSendCoupon() *SimulateStatementUpsert {
	u.SetExcluded(simulatestatement.FieldSendCoupon)
	return u
}

// ClearSendCoupon clears the value of the "send_coupon" field.
func (u *SimulateStatementUpsert) ClearSendCoupon() *SimulateStatementUpsert {
	u.SetNull(simulatestatement.FieldSendCoupon)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SimulateStatement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(simulatestatement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SimulateStatementUpsertOne) UpdateNewValues() *SimulateStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(simulatestatement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SimulateStatement.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SimulateStatementUpsertOne) Ignore() *SimulateStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SimulateStatementUpsertOne) DoNothing() *SimulateStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SimulateStatementCreate.OnConflict
// documentation for more info.
func (u *SimulateStatementUpsertOne) Update(set func(*SimulateStatementUpsert)) *SimulateStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SimulateStatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SimulateStatementUpsertOne) SetCreatedAt(v uint32) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateStatementUpsertOne) AddCreatedAt(v uint32) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateCreatedAt() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateStatementUpsertOne) SetUpdatedAt(v uint32) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateStatementUpsertOne) AddUpdatedAt(v uint32) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateUpdatedAt() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateStatementUpsertOne) SetDeletedAt(v uint32) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateStatementUpsertOne) AddDeletedAt(v uint32) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateDeletedAt() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SimulateStatementUpsertOne) SetEntID(v uuid.UUID) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateEntID() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *SimulateStatementUpsertOne) SetAppID(v uuid.UUID) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateAppID() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *SimulateStatementUpsertOne) ClearAppID() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SimulateStatementUpsertOne) SetUserID(v uuid.UUID) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateUserID() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SimulateStatementUpsertOne) ClearUserID() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SimulateStatementUpsertOne) SetCoinTypeID(v uuid.UUID) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateCoinTypeID() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SimulateStatementUpsertOne) ClearCoinTypeID() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetIoType sets the "io_type" field.
func (u *SimulateStatementUpsertOne) SetIoType(v string) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetIoType(v)
	})
}

// UpdateIoType sets the "io_type" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateIoType() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateIoType()
	})
}

// ClearIoType clears the value of the "io_type" field.
func (u *SimulateStatementUpsertOne) ClearIoType() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearIoType()
	})
}

// SetIoSubType sets the "io_sub_type" field.
func (u *SimulateStatementUpsertOne) SetIoSubType(v string) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetIoSubType(v)
	})
}

// UpdateIoSubType sets the "io_sub_type" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateIoSubType() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateIoSubType()
	})
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (u *SimulateStatementUpsertOne) ClearIoSubType() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearIoSubType()
	})
}

// SetAmount sets the "amount" field.
func (u *SimulateStatementUpsertOne) SetAmount(v decimal.Decimal) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *SimulateStatementUpsertOne) AddAmount(v decimal.Decimal) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateAmount() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *SimulateStatementUpsertOne) ClearAmount() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearAmount()
	})
}

// SetIoExtra sets the "io_extra" field.
func (u *SimulateStatementUpsertOne) SetIoExtra(v string) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetIoExtra(v)
	})
}

// UpdateIoExtra sets the "io_extra" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateIoExtra() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateIoExtra()
	})
}

// ClearIoExtra clears the value of the "io_extra" field.
func (u *SimulateStatementUpsertOne) ClearIoExtra() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearIoExtra()
	})
}

// SetSendCoupon sets the "send_coupon" field.
func (u *SimulateStatementUpsertOne) SetSendCoupon(v bool) *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetSendCoupon(v)
	})
}

// UpdateSendCoupon sets the "send_coupon" field to the value that was provided on create.
func (u *SimulateStatementUpsertOne) UpdateSendCoupon() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateSendCoupon()
	})
}

// ClearSendCoupon clears the value of the "send_coupon" field.
func (u *SimulateStatementUpsertOne) ClearSendCoupon() *SimulateStatementUpsertOne {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearSendCoupon()
	})
}

// Exec executes the query.
func (u *SimulateStatementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SimulateStatementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SimulateStatementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SimulateStatementUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SimulateStatementUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SimulateStatementCreateBulk is the builder for creating many SimulateStatement entities in bulk.
type SimulateStatementCreateBulk struct {
	config
	builders []*SimulateStatementCreate
	conflict []sql.ConflictOption
}

// Save creates the SimulateStatement entities in the database.
func (sscb *SimulateStatementCreateBulk) Save(ctx context.Context) ([]*SimulateStatement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SimulateStatement, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SimulateStatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SimulateStatementCreateBulk) SaveX(ctx context.Context) []*SimulateStatement {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SimulateStatementCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SimulateStatementCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SimulateStatement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SimulateStatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sscb *SimulateStatementCreateBulk) OnConflict(opts ...sql.ConflictOption) *SimulateStatementUpsertBulk {
	sscb.conflict = opts
	return &SimulateStatementUpsertBulk{
		create: sscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SimulateStatement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sscb *SimulateStatementCreateBulk) OnConflictColumns(columns ...string) *SimulateStatementUpsertBulk {
	sscb.conflict = append(sscb.conflict, sql.ConflictColumns(columns...))
	return &SimulateStatementUpsertBulk{
		create: sscb,
	}
}

// SimulateStatementUpsertBulk is the builder for "upsert"-ing
// a bulk of SimulateStatement nodes.
type SimulateStatementUpsertBulk struct {
	create *SimulateStatementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SimulateStatement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(simulatestatement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SimulateStatementUpsertBulk) UpdateNewValues() *SimulateStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(simulatestatement.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SimulateStatement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SimulateStatementUpsertBulk) Ignore() *SimulateStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SimulateStatementUpsertBulk) DoNothing() *SimulateStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SimulateStatementCreateBulk.OnConflict
// documentation for more info.
func (u *SimulateStatementUpsertBulk) Update(set func(*SimulateStatementUpsert)) *SimulateStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SimulateStatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SimulateStatementUpsertBulk) SetCreatedAt(v uint32) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateStatementUpsertBulk) AddCreatedAt(v uint32) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateCreatedAt() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateStatementUpsertBulk) SetUpdatedAt(v uint32) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateStatementUpsertBulk) AddUpdatedAt(v uint32) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateUpdatedAt() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateStatementUpsertBulk) SetDeletedAt(v uint32) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateStatementUpsertBulk) AddDeletedAt(v uint32) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateDeletedAt() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SimulateStatementUpsertBulk) SetEntID(v uuid.UUID) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateEntID() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *SimulateStatementUpsertBulk) SetAppID(v uuid.UUID) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateAppID() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *SimulateStatementUpsertBulk) ClearAppID() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SimulateStatementUpsertBulk) SetUserID(v uuid.UUID) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateUserID() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SimulateStatementUpsertBulk) ClearUserID() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SimulateStatementUpsertBulk) SetCoinTypeID(v uuid.UUID) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateCoinTypeID() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SimulateStatementUpsertBulk) ClearCoinTypeID() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetIoType sets the "io_type" field.
func (u *SimulateStatementUpsertBulk) SetIoType(v string) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetIoType(v)
	})
}

// UpdateIoType sets the "io_type" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateIoType() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateIoType()
	})
}

// ClearIoType clears the value of the "io_type" field.
func (u *SimulateStatementUpsertBulk) ClearIoType() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearIoType()
	})
}

// SetIoSubType sets the "io_sub_type" field.
func (u *SimulateStatementUpsertBulk) SetIoSubType(v string) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetIoSubType(v)
	})
}

// UpdateIoSubType sets the "io_sub_type" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateIoSubType() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateIoSubType()
	})
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (u *SimulateStatementUpsertBulk) ClearIoSubType() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearIoSubType()
	})
}

// SetAmount sets the "amount" field.
func (u *SimulateStatementUpsertBulk) SetAmount(v decimal.Decimal) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *SimulateStatementUpsertBulk) AddAmount(v decimal.Decimal) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateAmount() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *SimulateStatementUpsertBulk) ClearAmount() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearAmount()
	})
}

// SetIoExtra sets the "io_extra" field.
func (u *SimulateStatementUpsertBulk) SetIoExtra(v string) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetIoExtra(v)
	})
}

// UpdateIoExtra sets the "io_extra" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateIoExtra() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateIoExtra()
	})
}

// ClearIoExtra clears the value of the "io_extra" field.
func (u *SimulateStatementUpsertBulk) ClearIoExtra() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearIoExtra()
	})
}

// SetSendCoupon sets the "send_coupon" field.
func (u *SimulateStatementUpsertBulk) SetSendCoupon(v bool) *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.SetSendCoupon(v)
	})
}

// UpdateSendCoupon sets the "send_coupon" field to the value that was provided on create.
func (u *SimulateStatementUpsertBulk) UpdateSendCoupon() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.UpdateSendCoupon()
	})
}

// ClearSendCoupon clears the value of the "send_coupon" field.
func (u *SimulateStatementUpsertBulk) ClearSendCoupon() *SimulateStatementUpsertBulk {
	return u.Update(func(s *SimulateStatementUpsert) {
		s.ClearSendCoupon()
	})
}

// Exec executes the query.
func (u *SimulateStatementUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SimulateStatementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SimulateStatementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SimulateStatementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
