// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/goodledger"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodLedgerUpdate is the builder for updating GoodLedger entities.
type GoodLedgerUpdate struct {
	config
	hooks    []Hook
	mutation *GoodLedgerMutation
}

// Where appends a list predicates to the GoodLedgerUpdate builder.
func (glu *GoodLedgerUpdate) Where(ps ...predicate.GoodLedger) *GoodLedgerUpdate {
	glu.mutation.Where(ps...)
	return glu
}

// SetCreatedAt sets the "created_at" field.
func (glu *GoodLedgerUpdate) SetCreatedAt(u uint32) *GoodLedgerUpdate {
	glu.mutation.ResetCreatedAt()
	glu.mutation.SetCreatedAt(u)
	return glu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (glu *GoodLedgerUpdate) SetNillableCreatedAt(u *uint32) *GoodLedgerUpdate {
	if u != nil {
		glu.SetCreatedAt(*u)
	}
	return glu
}

// AddCreatedAt adds u to the "created_at" field.
func (glu *GoodLedgerUpdate) AddCreatedAt(u int32) *GoodLedgerUpdate {
	glu.mutation.AddCreatedAt(u)
	return glu
}

// SetUpdatedAt sets the "updated_at" field.
func (glu *GoodLedgerUpdate) SetUpdatedAt(u uint32) *GoodLedgerUpdate {
	glu.mutation.ResetUpdatedAt()
	glu.mutation.SetUpdatedAt(u)
	return glu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (glu *GoodLedgerUpdate) AddUpdatedAt(u int32) *GoodLedgerUpdate {
	glu.mutation.AddUpdatedAt(u)
	return glu
}

// SetDeletedAt sets the "deleted_at" field.
func (glu *GoodLedgerUpdate) SetDeletedAt(u uint32) *GoodLedgerUpdate {
	glu.mutation.ResetDeletedAt()
	glu.mutation.SetDeletedAt(u)
	return glu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (glu *GoodLedgerUpdate) SetNillableDeletedAt(u *uint32) *GoodLedgerUpdate {
	if u != nil {
		glu.SetDeletedAt(*u)
	}
	return glu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (glu *GoodLedgerUpdate) AddDeletedAt(u int32) *GoodLedgerUpdate {
	glu.mutation.AddDeletedAt(u)
	return glu
}

// SetEntID sets the "ent_id" field.
func (glu *GoodLedgerUpdate) SetEntID(u uuid.UUID) *GoodLedgerUpdate {
	glu.mutation.SetEntID(u)
	return glu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (glu *GoodLedgerUpdate) SetNillableEntID(u *uuid.UUID) *GoodLedgerUpdate {
	if u != nil {
		glu.SetEntID(*u)
	}
	return glu
}

// SetGoodID sets the "good_id" field.
func (glu *GoodLedgerUpdate) SetGoodID(u uuid.UUID) *GoodLedgerUpdate {
	glu.mutation.SetGoodID(u)
	return glu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (glu *GoodLedgerUpdate) SetNillableGoodID(u *uuid.UUID) *GoodLedgerUpdate {
	if u != nil {
		glu.SetGoodID(*u)
	}
	return glu
}

// ClearGoodID clears the value of the "good_id" field.
func (glu *GoodLedgerUpdate) ClearGoodID() *GoodLedgerUpdate {
	glu.mutation.ClearGoodID()
	return glu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (glu *GoodLedgerUpdate) SetCoinTypeID(u uuid.UUID) *GoodLedgerUpdate {
	glu.mutation.SetCoinTypeID(u)
	return glu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (glu *GoodLedgerUpdate) SetNillableCoinTypeID(u *uuid.UUID) *GoodLedgerUpdate {
	if u != nil {
		glu.SetCoinTypeID(*u)
	}
	return glu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (glu *GoodLedgerUpdate) ClearCoinTypeID() *GoodLedgerUpdate {
	glu.mutation.ClearCoinTypeID()
	return glu
}

// SetAmount sets the "amount" field.
func (glu *GoodLedgerUpdate) SetAmount(d decimal.Decimal) *GoodLedgerUpdate {
	glu.mutation.ResetAmount()
	glu.mutation.SetAmount(d)
	return glu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (glu *GoodLedgerUpdate) SetNillableAmount(d *decimal.Decimal) *GoodLedgerUpdate {
	if d != nil {
		glu.SetAmount(*d)
	}
	return glu
}

// AddAmount adds d to the "amount" field.
func (glu *GoodLedgerUpdate) AddAmount(d decimal.Decimal) *GoodLedgerUpdate {
	glu.mutation.AddAmount(d)
	return glu
}

// ClearAmount clears the value of the "amount" field.
func (glu *GoodLedgerUpdate) ClearAmount() *GoodLedgerUpdate {
	glu.mutation.ClearAmount()
	return glu
}

// SetToPlatform sets the "to_platform" field.
func (glu *GoodLedgerUpdate) SetToPlatform(d decimal.Decimal) *GoodLedgerUpdate {
	glu.mutation.ResetToPlatform()
	glu.mutation.SetToPlatform(d)
	return glu
}

// SetNillableToPlatform sets the "to_platform" field if the given value is not nil.
func (glu *GoodLedgerUpdate) SetNillableToPlatform(d *decimal.Decimal) *GoodLedgerUpdate {
	if d != nil {
		glu.SetToPlatform(*d)
	}
	return glu
}

// AddToPlatform adds d to the "to_platform" field.
func (glu *GoodLedgerUpdate) AddToPlatform(d decimal.Decimal) *GoodLedgerUpdate {
	glu.mutation.AddToPlatform(d)
	return glu
}

// ClearToPlatform clears the value of the "to_platform" field.
func (glu *GoodLedgerUpdate) ClearToPlatform() *GoodLedgerUpdate {
	glu.mutation.ClearToPlatform()
	return glu
}

// SetToUser sets the "to_user" field.
func (glu *GoodLedgerUpdate) SetToUser(d decimal.Decimal) *GoodLedgerUpdate {
	glu.mutation.ResetToUser()
	glu.mutation.SetToUser(d)
	return glu
}

// SetNillableToUser sets the "to_user" field if the given value is not nil.
func (glu *GoodLedgerUpdate) SetNillableToUser(d *decimal.Decimal) *GoodLedgerUpdate {
	if d != nil {
		glu.SetToUser(*d)
	}
	return glu
}

// AddToUser adds d to the "to_user" field.
func (glu *GoodLedgerUpdate) AddToUser(d decimal.Decimal) *GoodLedgerUpdate {
	glu.mutation.AddToUser(d)
	return glu
}

// ClearToUser clears the value of the "to_user" field.
func (glu *GoodLedgerUpdate) ClearToUser() *GoodLedgerUpdate {
	glu.mutation.ClearToUser()
	return glu
}

// Mutation returns the GoodLedgerMutation object of the builder.
func (glu *GoodLedgerUpdate) Mutation() *GoodLedgerMutation {
	return glu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (glu *GoodLedgerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := glu.defaults(); err != nil {
		return 0, err
	}
	if len(glu.hooks) == 0 {
		affected, err = glu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodLedgerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			glu.mutation = mutation
			affected, err = glu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(glu.hooks) - 1; i >= 0; i-- {
			if glu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = glu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, glu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (glu *GoodLedgerUpdate) SaveX(ctx context.Context) int {
	affected, err := glu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (glu *GoodLedgerUpdate) Exec(ctx context.Context) error {
	_, err := glu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glu *GoodLedgerUpdate) ExecX(ctx context.Context) {
	if err := glu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (glu *GoodLedgerUpdate) defaults() error {
	if _, ok := glu.mutation.UpdatedAt(); !ok {
		if goodledger.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodledger.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodledger.UpdateDefaultUpdatedAt()
		glu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (glu *GoodLedgerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodledger.Table,
			Columns: goodledger.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodledger.FieldID,
			},
		},
	}
	if ps := glu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := glu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldCreatedAt,
		})
	}
	if value, ok := glu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldCreatedAt,
		})
	}
	if value, ok := glu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldUpdatedAt,
		})
	}
	if value, ok := glu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldUpdatedAt,
		})
	}
	if value, ok := glu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldDeletedAt,
		})
	}
	if value, ok := glu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldDeletedAt,
		})
	}
	if value, ok := glu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodledger.FieldEntID,
		})
	}
	if value, ok := glu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodledger.FieldGoodID,
		})
	}
	if glu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodledger.FieldGoodID,
		})
	}
	if value, ok := glu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodledger.FieldCoinTypeID,
		})
	}
	if glu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodledger.FieldCoinTypeID,
		})
	}
	if value, ok := glu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldAmount,
		})
	}
	if value, ok := glu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldAmount,
		})
	}
	if glu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: goodledger.FieldAmount,
		})
	}
	if value, ok := glu.mutation.ToPlatform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldToPlatform,
		})
	}
	if value, ok := glu.mutation.AddedToPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldToPlatform,
		})
	}
	if glu.mutation.ToPlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: goodledger.FieldToPlatform,
		})
	}
	if value, ok := glu.mutation.ToUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldToUser,
		})
	}
	if value, ok := glu.mutation.AddedToUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldToUser,
		})
	}
	if glu.mutation.ToUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: goodledger.FieldToUser,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, glu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GoodLedgerUpdateOne is the builder for updating a single GoodLedger entity.
type GoodLedgerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodLedgerMutation
}

// SetCreatedAt sets the "created_at" field.
func (gluo *GoodLedgerUpdateOne) SetCreatedAt(u uint32) *GoodLedgerUpdateOne {
	gluo.mutation.ResetCreatedAt()
	gluo.mutation.SetCreatedAt(u)
	return gluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gluo *GoodLedgerUpdateOne) SetNillableCreatedAt(u *uint32) *GoodLedgerUpdateOne {
	if u != nil {
		gluo.SetCreatedAt(*u)
	}
	return gluo
}

// AddCreatedAt adds u to the "created_at" field.
func (gluo *GoodLedgerUpdateOne) AddCreatedAt(u int32) *GoodLedgerUpdateOne {
	gluo.mutation.AddCreatedAt(u)
	return gluo
}

// SetUpdatedAt sets the "updated_at" field.
func (gluo *GoodLedgerUpdateOne) SetUpdatedAt(u uint32) *GoodLedgerUpdateOne {
	gluo.mutation.ResetUpdatedAt()
	gluo.mutation.SetUpdatedAt(u)
	return gluo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gluo *GoodLedgerUpdateOne) AddUpdatedAt(u int32) *GoodLedgerUpdateOne {
	gluo.mutation.AddUpdatedAt(u)
	return gluo
}

// SetDeletedAt sets the "deleted_at" field.
func (gluo *GoodLedgerUpdateOne) SetDeletedAt(u uint32) *GoodLedgerUpdateOne {
	gluo.mutation.ResetDeletedAt()
	gluo.mutation.SetDeletedAt(u)
	return gluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gluo *GoodLedgerUpdateOne) SetNillableDeletedAt(u *uint32) *GoodLedgerUpdateOne {
	if u != nil {
		gluo.SetDeletedAt(*u)
	}
	return gluo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gluo *GoodLedgerUpdateOne) AddDeletedAt(u int32) *GoodLedgerUpdateOne {
	gluo.mutation.AddDeletedAt(u)
	return gluo
}

// SetEntID sets the "ent_id" field.
func (gluo *GoodLedgerUpdateOne) SetEntID(u uuid.UUID) *GoodLedgerUpdateOne {
	gluo.mutation.SetEntID(u)
	return gluo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gluo *GoodLedgerUpdateOne) SetNillableEntID(u *uuid.UUID) *GoodLedgerUpdateOne {
	if u != nil {
		gluo.SetEntID(*u)
	}
	return gluo
}

// SetGoodID sets the "good_id" field.
func (gluo *GoodLedgerUpdateOne) SetGoodID(u uuid.UUID) *GoodLedgerUpdateOne {
	gluo.mutation.SetGoodID(u)
	return gluo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gluo *GoodLedgerUpdateOne) SetNillableGoodID(u *uuid.UUID) *GoodLedgerUpdateOne {
	if u != nil {
		gluo.SetGoodID(*u)
	}
	return gluo
}

// ClearGoodID clears the value of the "good_id" field.
func (gluo *GoodLedgerUpdateOne) ClearGoodID() *GoodLedgerUpdateOne {
	gluo.mutation.ClearGoodID()
	return gluo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gluo *GoodLedgerUpdateOne) SetCoinTypeID(u uuid.UUID) *GoodLedgerUpdateOne {
	gluo.mutation.SetCoinTypeID(u)
	return gluo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (gluo *GoodLedgerUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *GoodLedgerUpdateOne {
	if u != nil {
		gluo.SetCoinTypeID(*u)
	}
	return gluo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (gluo *GoodLedgerUpdateOne) ClearCoinTypeID() *GoodLedgerUpdateOne {
	gluo.mutation.ClearCoinTypeID()
	return gluo
}

// SetAmount sets the "amount" field.
func (gluo *GoodLedgerUpdateOne) SetAmount(d decimal.Decimal) *GoodLedgerUpdateOne {
	gluo.mutation.ResetAmount()
	gluo.mutation.SetAmount(d)
	return gluo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (gluo *GoodLedgerUpdateOne) SetNillableAmount(d *decimal.Decimal) *GoodLedgerUpdateOne {
	if d != nil {
		gluo.SetAmount(*d)
	}
	return gluo
}

// AddAmount adds d to the "amount" field.
func (gluo *GoodLedgerUpdateOne) AddAmount(d decimal.Decimal) *GoodLedgerUpdateOne {
	gluo.mutation.AddAmount(d)
	return gluo
}

// ClearAmount clears the value of the "amount" field.
func (gluo *GoodLedgerUpdateOne) ClearAmount() *GoodLedgerUpdateOne {
	gluo.mutation.ClearAmount()
	return gluo
}

// SetToPlatform sets the "to_platform" field.
func (gluo *GoodLedgerUpdateOne) SetToPlatform(d decimal.Decimal) *GoodLedgerUpdateOne {
	gluo.mutation.ResetToPlatform()
	gluo.mutation.SetToPlatform(d)
	return gluo
}

// SetNillableToPlatform sets the "to_platform" field if the given value is not nil.
func (gluo *GoodLedgerUpdateOne) SetNillableToPlatform(d *decimal.Decimal) *GoodLedgerUpdateOne {
	if d != nil {
		gluo.SetToPlatform(*d)
	}
	return gluo
}

// AddToPlatform adds d to the "to_platform" field.
func (gluo *GoodLedgerUpdateOne) AddToPlatform(d decimal.Decimal) *GoodLedgerUpdateOne {
	gluo.mutation.AddToPlatform(d)
	return gluo
}

// ClearToPlatform clears the value of the "to_platform" field.
func (gluo *GoodLedgerUpdateOne) ClearToPlatform() *GoodLedgerUpdateOne {
	gluo.mutation.ClearToPlatform()
	return gluo
}

// SetToUser sets the "to_user" field.
func (gluo *GoodLedgerUpdateOne) SetToUser(d decimal.Decimal) *GoodLedgerUpdateOne {
	gluo.mutation.ResetToUser()
	gluo.mutation.SetToUser(d)
	return gluo
}

// SetNillableToUser sets the "to_user" field if the given value is not nil.
func (gluo *GoodLedgerUpdateOne) SetNillableToUser(d *decimal.Decimal) *GoodLedgerUpdateOne {
	if d != nil {
		gluo.SetToUser(*d)
	}
	return gluo
}

// AddToUser adds d to the "to_user" field.
func (gluo *GoodLedgerUpdateOne) AddToUser(d decimal.Decimal) *GoodLedgerUpdateOne {
	gluo.mutation.AddToUser(d)
	return gluo
}

// ClearToUser clears the value of the "to_user" field.
func (gluo *GoodLedgerUpdateOne) ClearToUser() *GoodLedgerUpdateOne {
	gluo.mutation.ClearToUser()
	return gluo
}

// Mutation returns the GoodLedgerMutation object of the builder.
func (gluo *GoodLedgerUpdateOne) Mutation() *GoodLedgerMutation {
	return gluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gluo *GoodLedgerUpdateOne) Select(field string, fields ...string) *GoodLedgerUpdateOne {
	gluo.fields = append([]string{field}, fields...)
	return gluo
}

// Save executes the query and returns the updated GoodLedger entity.
func (gluo *GoodLedgerUpdateOne) Save(ctx context.Context) (*GoodLedger, error) {
	var (
		err  error
		node *GoodLedger
	)
	if err := gluo.defaults(); err != nil {
		return nil, err
	}
	if len(gluo.hooks) == 0 {
		node, err = gluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodLedgerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gluo.mutation = mutation
			node, err = gluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gluo.hooks) - 1; i >= 0; i-- {
			if gluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodLedger)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodLedgerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gluo *GoodLedgerUpdateOne) SaveX(ctx context.Context) *GoodLedger {
	node, err := gluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gluo *GoodLedgerUpdateOne) Exec(ctx context.Context) error {
	_, err := gluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gluo *GoodLedgerUpdateOne) ExecX(ctx context.Context) {
	if err := gluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gluo *GoodLedgerUpdateOne) defaults() error {
	if _, ok := gluo.mutation.UpdatedAt(); !ok {
		if goodledger.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodledger.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodledger.UpdateDefaultUpdatedAt()
		gluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (gluo *GoodLedgerUpdateOne) sqlSave(ctx context.Context) (_node *GoodLedger, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodledger.Table,
			Columns: goodledger.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodledger.FieldID,
			},
		},
	}
	id, ok := gluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodLedger.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodledger.FieldID)
		for _, f := range fields {
			if !goodledger.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodledger.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gluo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldCreatedAt,
		})
	}
	if value, ok := gluo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldCreatedAt,
		})
	}
	if value, ok := gluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldUpdatedAt,
		})
	}
	if value, ok := gluo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldUpdatedAt,
		})
	}
	if value, ok := gluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldDeletedAt,
		})
	}
	if value, ok := gluo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldDeletedAt,
		})
	}
	if value, ok := gluo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodledger.FieldEntID,
		})
	}
	if value, ok := gluo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodledger.FieldGoodID,
		})
	}
	if gluo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodledger.FieldGoodID,
		})
	}
	if value, ok := gluo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodledger.FieldCoinTypeID,
		})
	}
	if gluo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodledger.FieldCoinTypeID,
		})
	}
	if value, ok := gluo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldAmount,
		})
	}
	if value, ok := gluo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldAmount,
		})
	}
	if gluo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: goodledger.FieldAmount,
		})
	}
	if value, ok := gluo.mutation.ToPlatform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldToPlatform,
		})
	}
	if value, ok := gluo.mutation.AddedToPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldToPlatform,
		})
	}
	if gluo.mutation.ToPlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: goodledger.FieldToPlatform,
		})
	}
	if value, ok := gluo.mutation.ToUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldToUser,
		})
	}
	if value, ok := gluo.mutation.AddedToUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldToUser,
		})
	}
	if gluo.mutation.ToUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: goodledger.FieldToUser,
		})
	}
	_node = &GoodLedger{config: gluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
