// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/ledger"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Ledger is the model entity for the Ledger schema.
type Ledger struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// Incoming holds the value of the "incoming" field.
	Incoming decimal.Decimal `json:"incoming,omitempty"`
	// Locked holds the value of the "locked" field.
	Locked decimal.Decimal `json:"locked,omitempty"`
	// Outcoming holds the value of the "outcoming" field.
	Outcoming decimal.Decimal `json:"outcoming,omitempty"`
	// Spendable holds the value of the "spendable" field.
	Spendable decimal.Decimal `json:"spendable,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ledger) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ledger.FieldIncoming, ledger.FieldLocked, ledger.FieldOutcoming, ledger.FieldSpendable:
			values[i] = new(decimal.Decimal)
		case ledger.FieldCreatedAt, ledger.FieldUpdatedAt, ledger.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case ledger.FieldID, ledger.FieldAppID, ledger.FieldUserID, ledger.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ledger", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ledger fields.
func (l *Ledger) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ledger.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case ledger.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = uint32(value.Int64)
			}
		case ledger.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = uint32(value.Int64)
			}
		case ledger.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				l.DeletedAt = uint32(value.Int64)
			}
		case ledger.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				l.AppID = *value
			}
		case ledger.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				l.UserID = *value
			}
		case ledger.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				l.CoinTypeID = *value
			}
		case ledger.FieldIncoming:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field incoming", values[i])
			} else if value != nil {
				l.Incoming = *value
			}
		case ledger.FieldLocked:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field locked", values[i])
			} else if value != nil {
				l.Locked = *value
			}
		case ledger.FieldOutcoming:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field outcoming", values[i])
			} else if value != nil {
				l.Outcoming = *value
			}
		case ledger.FieldSpendable:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field spendable", values[i])
			} else if value != nil {
				l.Spendable = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Ledger.
// Note that you need to call Ledger.Unwrap() before calling this method if this Ledger
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Ledger) Update() *LedgerUpdateOne {
	return (&LedgerClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Ledger entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Ledger) Unwrap() *Ledger {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ledger is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Ledger) String() string {
	var builder strings.Builder
	builder.WriteString("Ledger(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", l.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", l.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", l.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", l.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", l.UserID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", l.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("incoming=")
	builder.WriteString(fmt.Sprintf("%v", l.Incoming))
	builder.WriteString(", ")
	builder.WriteString("locked=")
	builder.WriteString(fmt.Sprintf("%v", l.Locked))
	builder.WriteString(", ")
	builder.WriteString("outcoming=")
	builder.WriteString(fmt.Sprintf("%v", l.Outcoming))
	builder.WriteString(", ")
	builder.WriteString("spendable=")
	builder.WriteString(fmt.Sprintf("%v", l.Spendable))
	builder.WriteByte(')')
	return builder.String()
}

// Ledgers is a parsable slice of Ledger.
type Ledgers []*Ledger

func (l Ledgers) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
