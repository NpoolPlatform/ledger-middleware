// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/simulateprofit"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SimulateProfitCreate is the builder for creating a SimulateProfit entity.
type SimulateProfitCreate struct {
	config
	mutation *SimulateProfitMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (spc *SimulateProfitCreate) SetCreatedAt(u uint32) *SimulateProfitCreate {
	spc.mutation.SetCreatedAt(u)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *SimulateProfitCreate) SetNillableCreatedAt(u *uint32) *SimulateProfitCreate {
	if u != nil {
		spc.SetCreatedAt(*u)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *SimulateProfitCreate) SetUpdatedAt(u uint32) *SimulateProfitCreate {
	spc.mutation.SetUpdatedAt(u)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *SimulateProfitCreate) SetNillableUpdatedAt(u *uint32) *SimulateProfitCreate {
	if u != nil {
		spc.SetUpdatedAt(*u)
	}
	return spc
}

// SetDeletedAt sets the "deleted_at" field.
func (spc *SimulateProfitCreate) SetDeletedAt(u uint32) *SimulateProfitCreate {
	spc.mutation.SetDeletedAt(u)
	return spc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spc *SimulateProfitCreate) SetNillableDeletedAt(u *uint32) *SimulateProfitCreate {
	if u != nil {
		spc.SetDeletedAt(*u)
	}
	return spc
}

// SetEntID sets the "ent_id" field.
func (spc *SimulateProfitCreate) SetEntID(u uuid.UUID) *SimulateProfitCreate {
	spc.mutation.SetEntID(u)
	return spc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (spc *SimulateProfitCreate) SetNillableEntID(u *uuid.UUID) *SimulateProfitCreate {
	if u != nil {
		spc.SetEntID(*u)
	}
	return spc
}

// SetAppID sets the "app_id" field.
func (spc *SimulateProfitCreate) SetAppID(u uuid.UUID) *SimulateProfitCreate {
	spc.mutation.SetAppID(u)
	return spc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (spc *SimulateProfitCreate) SetNillableAppID(u *uuid.UUID) *SimulateProfitCreate {
	if u != nil {
		spc.SetAppID(*u)
	}
	return spc
}

// SetUserID sets the "user_id" field.
func (spc *SimulateProfitCreate) SetUserID(u uuid.UUID) *SimulateProfitCreate {
	spc.mutation.SetUserID(u)
	return spc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (spc *SimulateProfitCreate) SetNillableUserID(u *uuid.UUID) *SimulateProfitCreate {
	if u != nil {
		spc.SetUserID(*u)
	}
	return spc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (spc *SimulateProfitCreate) SetCoinTypeID(u uuid.UUID) *SimulateProfitCreate {
	spc.mutation.SetCoinTypeID(u)
	return spc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (spc *SimulateProfitCreate) SetNillableCoinTypeID(u *uuid.UUID) *SimulateProfitCreate {
	if u != nil {
		spc.SetCoinTypeID(*u)
	}
	return spc
}

// SetIncoming sets the "incoming" field.
func (spc *SimulateProfitCreate) SetIncoming(d decimal.Decimal) *SimulateProfitCreate {
	spc.mutation.SetIncoming(d)
	return spc
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (spc *SimulateProfitCreate) SetNillableIncoming(d *decimal.Decimal) *SimulateProfitCreate {
	if d != nil {
		spc.SetIncoming(*d)
	}
	return spc
}

// SetID sets the "id" field.
func (spc *SimulateProfitCreate) SetID(u uint32) *SimulateProfitCreate {
	spc.mutation.SetID(u)
	return spc
}

// Mutation returns the SimulateProfitMutation object of the builder.
func (spc *SimulateProfitCreate) Mutation() *SimulateProfitMutation {
	return spc.mutation
}

// Save creates the SimulateProfit in the database.
func (spc *SimulateProfitCreate) Save(ctx context.Context) (*SimulateProfit, error) {
	var (
		err  error
		node *SimulateProfit
	)
	if err := spc.defaults(); err != nil {
		return nil, err
	}
	if len(spc.hooks) == 0 {
		if err = spc.check(); err != nil {
			return nil, err
		}
		node, err = spc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SimulateProfitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spc.check(); err != nil {
				return nil, err
			}
			spc.mutation = mutation
			if node, err = spc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(spc.hooks) - 1; i >= 0; i-- {
			if spc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, spc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SimulateProfit)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SimulateProfitMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SimulateProfitCreate) SaveX(ctx context.Context) *SimulateProfit {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SimulateProfitCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SimulateProfitCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SimulateProfitCreate) defaults() error {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		if simulateprofit.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateprofit.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := simulateprofit.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		if simulateprofit.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateprofit.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := simulateprofit.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
	if _, ok := spc.mutation.DeletedAt(); !ok {
		if simulateprofit.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateprofit.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := simulateprofit.DefaultDeletedAt()
		spc.mutation.SetDeletedAt(v)
	}
	if _, ok := spc.mutation.EntID(); !ok {
		if simulateprofit.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized simulateprofit.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := simulateprofit.DefaultEntID()
		spc.mutation.SetEntID(v)
	}
	if _, ok := spc.mutation.AppID(); !ok {
		if simulateprofit.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized simulateprofit.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := simulateprofit.DefaultAppID()
		spc.mutation.SetAppID(v)
	}
	if _, ok := spc.mutation.UserID(); !ok {
		if simulateprofit.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized simulateprofit.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := simulateprofit.DefaultUserID()
		spc.mutation.SetUserID(v)
	}
	if _, ok := spc.mutation.CoinTypeID(); !ok {
		if simulateprofit.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized simulateprofit.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := simulateprofit.DefaultCoinTypeID()
		spc.mutation.SetCoinTypeID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spc *SimulateProfitCreate) check() error {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SimulateProfit.created_at"`)}
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SimulateProfit.updated_at"`)}
	}
	if _, ok := spc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "SimulateProfit.deleted_at"`)}
	}
	if _, ok := spc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "SimulateProfit.ent_id"`)}
	}
	return nil
}

func (spc *SimulateProfitCreate) sqlSave(ctx context.Context) (*SimulateProfit, error) {
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (spc *SimulateProfitCreate) createSpec() (*SimulateProfit, *sqlgraph.CreateSpec) {
	var (
		_node = &SimulateProfit{config: spc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: simulateprofit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: simulateprofit.FieldID,
			},
		}
	)
	_spec.OnConflict = spc.conflict
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateprofit.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateprofit.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := spc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateprofit.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := spc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateprofit.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := spc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateprofit.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := spc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateprofit.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := spc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateprofit.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := spc.mutation.Incoming(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateprofit.FieldIncoming,
		})
		_node.Incoming = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SimulateProfit.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SimulateProfitUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (spc *SimulateProfitCreate) OnConflict(opts ...sql.ConflictOption) *SimulateProfitUpsertOne {
	spc.conflict = opts
	return &SimulateProfitUpsertOne{
		create: spc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SimulateProfit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (spc *SimulateProfitCreate) OnConflictColumns(columns ...string) *SimulateProfitUpsertOne {
	spc.conflict = append(spc.conflict, sql.ConflictColumns(columns...))
	return &SimulateProfitUpsertOne{
		create: spc,
	}
}

type (
	// SimulateProfitUpsertOne is the builder for "upsert"-ing
	//  one SimulateProfit node.
	SimulateProfitUpsertOne struct {
		create *SimulateProfitCreate
	}

	// SimulateProfitUpsert is the "OnConflict" setter.
	SimulateProfitUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SimulateProfitUpsert) SetCreatedAt(v uint32) *SimulateProfitUpsert {
	u.Set(simulateprofit.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateProfitUpsert) UpdateCreatedAt() *SimulateProfitUpsert {
	u.SetExcluded(simulateprofit.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateProfitUpsert) AddCreatedAt(v uint32) *SimulateProfitUpsert {
	u.Add(simulateprofit.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateProfitUpsert) SetUpdatedAt(v uint32) *SimulateProfitUpsert {
	u.Set(simulateprofit.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateProfitUpsert) UpdateUpdatedAt() *SimulateProfitUpsert {
	u.SetExcluded(simulateprofit.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateProfitUpsert) AddUpdatedAt(v uint32) *SimulateProfitUpsert {
	u.Add(simulateprofit.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateProfitUpsert) SetDeletedAt(v uint32) *SimulateProfitUpsert {
	u.Set(simulateprofit.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateProfitUpsert) UpdateDeletedAt() *SimulateProfitUpsert {
	u.SetExcluded(simulateprofit.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateProfitUpsert) AddDeletedAt(v uint32) *SimulateProfitUpsert {
	u.Add(simulateprofit.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SimulateProfitUpsert) SetEntID(v uuid.UUID) *SimulateProfitUpsert {
	u.Set(simulateprofit.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateProfitUpsert) UpdateEntID() *SimulateProfitUpsert {
	u.SetExcluded(simulateprofit.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *SimulateProfitUpsert) SetAppID(v uuid.UUID) *SimulateProfitUpsert {
	u.Set(simulateprofit.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateProfitUpsert) UpdateAppID() *SimulateProfitUpsert {
	u.SetExcluded(simulateprofit.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *SimulateProfitUpsert) ClearAppID() *SimulateProfitUpsert {
	u.SetNull(simulateprofit.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SimulateProfitUpsert) SetUserID(v uuid.UUID) *SimulateProfitUpsert {
	u.Set(simulateprofit.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SimulateProfitUpsert) UpdateUserID() *SimulateProfitUpsert {
	u.SetExcluded(simulateprofit.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *SimulateProfitUpsert) ClearUserID() *SimulateProfitUpsert {
	u.SetNull(simulateprofit.FieldUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SimulateProfitUpsert) SetCoinTypeID(v uuid.UUID) *SimulateProfitUpsert {
	u.Set(simulateprofit.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SimulateProfitUpsert) UpdateCoinTypeID() *SimulateProfitUpsert {
	u.SetExcluded(simulateprofit.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SimulateProfitUpsert) ClearCoinTypeID() *SimulateProfitUpsert {
	u.SetNull(simulateprofit.FieldCoinTypeID)
	return u
}

// SetIncoming sets the "incoming" field.
func (u *SimulateProfitUpsert) SetIncoming(v decimal.Decimal) *SimulateProfitUpsert {
	u.Set(simulateprofit.FieldIncoming, v)
	return u
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *SimulateProfitUpsert) UpdateIncoming() *SimulateProfitUpsert {
	u.SetExcluded(simulateprofit.FieldIncoming)
	return u
}

// AddIncoming adds v to the "incoming" field.
func (u *SimulateProfitUpsert) AddIncoming(v decimal.Decimal) *SimulateProfitUpsert {
	u.Add(simulateprofit.FieldIncoming, v)
	return u
}

// ClearIncoming clears the value of the "incoming" field.
func (u *SimulateProfitUpsert) ClearIncoming() *SimulateProfitUpsert {
	u.SetNull(simulateprofit.FieldIncoming)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SimulateProfit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(simulateprofit.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SimulateProfitUpsertOne) UpdateNewValues() *SimulateProfitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(simulateprofit.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SimulateProfit.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SimulateProfitUpsertOne) Ignore() *SimulateProfitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SimulateProfitUpsertOne) DoNothing() *SimulateProfitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SimulateProfitCreate.OnConflict
// documentation for more info.
func (u *SimulateProfitUpsertOne) Update(set func(*SimulateProfitUpsert)) *SimulateProfitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SimulateProfitUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SimulateProfitUpsertOne) SetCreatedAt(v uint32) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateProfitUpsertOne) AddCreatedAt(v uint32) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateProfitUpsertOne) UpdateCreatedAt() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateProfitUpsertOne) SetUpdatedAt(v uint32) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateProfitUpsertOne) AddUpdatedAt(v uint32) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateProfitUpsertOne) UpdateUpdatedAt() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateProfitUpsertOne) SetDeletedAt(v uint32) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateProfitUpsertOne) AddDeletedAt(v uint32) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateProfitUpsertOne) UpdateDeletedAt() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SimulateProfitUpsertOne) SetEntID(v uuid.UUID) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateProfitUpsertOne) UpdateEntID() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *SimulateProfitUpsertOne) SetAppID(v uuid.UUID) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateProfitUpsertOne) UpdateAppID() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *SimulateProfitUpsertOne) ClearAppID() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SimulateProfitUpsertOne) SetUserID(v uuid.UUID) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SimulateProfitUpsertOne) UpdateUserID() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SimulateProfitUpsertOne) ClearUserID() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SimulateProfitUpsertOne) SetCoinTypeID(v uuid.UUID) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SimulateProfitUpsertOne) UpdateCoinTypeID() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SimulateProfitUpsertOne) ClearCoinTypeID() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetIncoming sets the "incoming" field.
func (u *SimulateProfitUpsertOne) SetIncoming(v decimal.Decimal) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetIncoming(v)
	})
}

// AddIncoming adds v to the "incoming" field.
func (u *SimulateProfitUpsertOne) AddIncoming(v decimal.Decimal) *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.AddIncoming(v)
	})
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *SimulateProfitUpsertOne) UpdateIncoming() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateIncoming()
	})
}

// ClearIncoming clears the value of the "incoming" field.
func (u *SimulateProfitUpsertOne) ClearIncoming() *SimulateProfitUpsertOne {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.ClearIncoming()
	})
}

// Exec executes the query.
func (u *SimulateProfitUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SimulateProfitCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SimulateProfitUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SimulateProfitUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SimulateProfitUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SimulateProfitCreateBulk is the builder for creating many SimulateProfit entities in bulk.
type SimulateProfitCreateBulk struct {
	config
	builders []*SimulateProfitCreate
	conflict []sql.ConflictOption
}

// Save creates the SimulateProfit entities in the database.
func (spcb *SimulateProfitCreateBulk) Save(ctx context.Context) ([]*SimulateProfit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SimulateProfit, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SimulateProfitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SimulateProfitCreateBulk) SaveX(ctx context.Context) []*SimulateProfit {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SimulateProfitCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SimulateProfitCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SimulateProfit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SimulateProfitUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (spcb *SimulateProfitCreateBulk) OnConflict(opts ...sql.ConflictOption) *SimulateProfitUpsertBulk {
	spcb.conflict = opts
	return &SimulateProfitUpsertBulk{
		create: spcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SimulateProfit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (spcb *SimulateProfitCreateBulk) OnConflictColumns(columns ...string) *SimulateProfitUpsertBulk {
	spcb.conflict = append(spcb.conflict, sql.ConflictColumns(columns...))
	return &SimulateProfitUpsertBulk{
		create: spcb,
	}
}

// SimulateProfitUpsertBulk is the builder for "upsert"-ing
// a bulk of SimulateProfit nodes.
type SimulateProfitUpsertBulk struct {
	create *SimulateProfitCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SimulateProfit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(simulateprofit.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SimulateProfitUpsertBulk) UpdateNewValues() *SimulateProfitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(simulateprofit.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SimulateProfit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SimulateProfitUpsertBulk) Ignore() *SimulateProfitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SimulateProfitUpsertBulk) DoNothing() *SimulateProfitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SimulateProfitCreateBulk.OnConflict
// documentation for more info.
func (u *SimulateProfitUpsertBulk) Update(set func(*SimulateProfitUpsert)) *SimulateProfitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SimulateProfitUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SimulateProfitUpsertBulk) SetCreatedAt(v uint32) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateProfitUpsertBulk) AddCreatedAt(v uint32) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateProfitUpsertBulk) UpdateCreatedAt() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateProfitUpsertBulk) SetUpdatedAt(v uint32) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateProfitUpsertBulk) AddUpdatedAt(v uint32) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateProfitUpsertBulk) UpdateUpdatedAt() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateProfitUpsertBulk) SetDeletedAt(v uint32) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateProfitUpsertBulk) AddDeletedAt(v uint32) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateProfitUpsertBulk) UpdateDeletedAt() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SimulateProfitUpsertBulk) SetEntID(v uuid.UUID) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateProfitUpsertBulk) UpdateEntID() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *SimulateProfitUpsertBulk) SetAppID(v uuid.UUID) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateProfitUpsertBulk) UpdateAppID() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *SimulateProfitUpsertBulk) ClearAppID() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SimulateProfitUpsertBulk) SetUserID(v uuid.UUID) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SimulateProfitUpsertBulk) UpdateUserID() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SimulateProfitUpsertBulk) ClearUserID() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SimulateProfitUpsertBulk) SetCoinTypeID(v uuid.UUID) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SimulateProfitUpsertBulk) UpdateCoinTypeID() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SimulateProfitUpsertBulk) ClearCoinTypeID() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetIncoming sets the "incoming" field.
func (u *SimulateProfitUpsertBulk) SetIncoming(v decimal.Decimal) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.SetIncoming(v)
	})
}

// AddIncoming adds v to the "incoming" field.
func (u *SimulateProfitUpsertBulk) AddIncoming(v decimal.Decimal) *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.AddIncoming(v)
	})
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *SimulateProfitUpsertBulk) UpdateIncoming() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.UpdateIncoming()
	})
}

// ClearIncoming clears the value of the "incoming" field.
func (u *SimulateProfitUpsertBulk) ClearIncoming() *SimulateProfitUpsertBulk {
	return u.Update(func(s *SimulateProfitUpsert) {
		s.ClearIncoming()
	})
}

// Exec executes the query.
func (u *SimulateProfitUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SimulateProfitCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SimulateProfitCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SimulateProfitUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
