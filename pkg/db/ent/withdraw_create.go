// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/withdraw"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// WithdrawCreate is the builder for creating a Withdraw entity.
type WithdrawCreate struct {
	config
	mutation *WithdrawMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wc *WithdrawCreate) SetCreatedAt(u uint32) *WithdrawCreate {
	wc.mutation.SetCreatedAt(u)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableCreatedAt(u *uint32) *WithdrawCreate {
	if u != nil {
		wc.SetCreatedAt(*u)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WithdrawCreate) SetUpdatedAt(u uint32) *WithdrawCreate {
	wc.mutation.SetUpdatedAt(u)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableUpdatedAt(u *uint32) *WithdrawCreate {
	if u != nil {
		wc.SetUpdatedAt(*u)
	}
	return wc
}

// SetDeletedAt sets the "deleted_at" field.
func (wc *WithdrawCreate) SetDeletedAt(u uint32) *WithdrawCreate {
	wc.mutation.SetDeletedAt(u)
	return wc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableDeletedAt(u *uint32) *WithdrawCreate {
	if u != nil {
		wc.SetDeletedAt(*u)
	}
	return wc
}

// SetAppID sets the "app_id" field.
func (wc *WithdrawCreate) SetAppID(u uuid.UUID) *WithdrawCreate {
	wc.mutation.SetAppID(u)
	return wc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableAppID(u *uuid.UUID) *WithdrawCreate {
	if u != nil {
		wc.SetAppID(*u)
	}
	return wc
}

// SetUserID sets the "user_id" field.
func (wc *WithdrawCreate) SetUserID(u uuid.UUID) *WithdrawCreate {
	wc.mutation.SetUserID(u)
	return wc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableUserID(u *uuid.UUID) *WithdrawCreate {
	if u != nil {
		wc.SetUserID(*u)
	}
	return wc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (wc *WithdrawCreate) SetCoinTypeID(u uuid.UUID) *WithdrawCreate {
	wc.mutation.SetCoinTypeID(u)
	return wc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableCoinTypeID(u *uuid.UUID) *WithdrawCreate {
	if u != nil {
		wc.SetCoinTypeID(*u)
	}
	return wc
}

// SetAccountID sets the "account_id" field.
func (wc *WithdrawCreate) SetAccountID(u uuid.UUID) *WithdrawCreate {
	wc.mutation.SetAccountID(u)
	return wc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableAccountID(u *uuid.UUID) *WithdrawCreate {
	if u != nil {
		wc.SetAccountID(*u)
	}
	return wc
}

// SetAddress sets the "address" field.
func (wc *WithdrawCreate) SetAddress(s string) *WithdrawCreate {
	wc.mutation.SetAddress(s)
	return wc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableAddress(s *string) *WithdrawCreate {
	if s != nil {
		wc.SetAddress(*s)
	}
	return wc
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (wc *WithdrawCreate) SetPlatformTransactionID(u uuid.UUID) *WithdrawCreate {
	wc.mutation.SetPlatformTransactionID(u)
	return wc
}

// SetNillablePlatformTransactionID sets the "platform_transaction_id" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillablePlatformTransactionID(u *uuid.UUID) *WithdrawCreate {
	if u != nil {
		wc.SetPlatformTransactionID(*u)
	}
	return wc
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (wc *WithdrawCreate) SetChainTransactionID(s string) *WithdrawCreate {
	wc.mutation.SetChainTransactionID(s)
	return wc
}

// SetNillableChainTransactionID sets the "chain_transaction_id" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableChainTransactionID(s *string) *WithdrawCreate {
	if s != nil {
		wc.SetChainTransactionID(*s)
	}
	return wc
}

// SetState sets the "state" field.
func (wc *WithdrawCreate) SetState(s string) *WithdrawCreate {
	wc.mutation.SetState(s)
	return wc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableState(s *string) *WithdrawCreate {
	if s != nil {
		wc.SetState(*s)
	}
	return wc
}

// SetAmount sets the "amount" field.
func (wc *WithdrawCreate) SetAmount(d decimal.Decimal) *WithdrawCreate {
	wc.mutation.SetAmount(d)
	return wc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableAmount(d *decimal.Decimal) *WithdrawCreate {
	if d != nil {
		wc.SetAmount(*d)
	}
	return wc
}

// SetID sets the "id" field.
func (wc *WithdrawCreate) SetID(u uuid.UUID) *WithdrawCreate {
	wc.mutation.SetID(u)
	return wc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wc *WithdrawCreate) SetNillableID(u *uuid.UUID) *WithdrawCreate {
	if u != nil {
		wc.SetID(*u)
	}
	return wc
}

// Mutation returns the WithdrawMutation object of the builder.
func (wc *WithdrawCreate) Mutation() *WithdrawMutation {
	return wc.mutation
}

// Save creates the Withdraw in the database.
func (wc *WithdrawCreate) Save(ctx context.Context) (*Withdraw, error) {
	var (
		err  error
		node *Withdraw
	)
	if err := wc.defaults(); err != nil {
		return nil, err
	}
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WithdrawMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			if node, err = wc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			if wc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, wc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Withdraw)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from WithdrawMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WithdrawCreate) SaveX(ctx context.Context) *Withdraw {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WithdrawCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WithdrawCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WithdrawCreate) defaults() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		if withdraw.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized withdraw.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := withdraw.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		if withdraw.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized withdraw.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := withdraw.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.DeletedAt(); !ok {
		if withdraw.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized withdraw.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := withdraw.DefaultDeletedAt()
		wc.mutation.SetDeletedAt(v)
	}
	if _, ok := wc.mutation.AppID(); !ok {
		if withdraw.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized withdraw.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := withdraw.DefaultAppID()
		wc.mutation.SetAppID(v)
	}
	if _, ok := wc.mutation.UserID(); !ok {
		if withdraw.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized withdraw.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := withdraw.DefaultUserID()
		wc.mutation.SetUserID(v)
	}
	if _, ok := wc.mutation.CoinTypeID(); !ok {
		if withdraw.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized withdraw.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := withdraw.DefaultCoinTypeID()
		wc.mutation.SetCoinTypeID(v)
	}
	if _, ok := wc.mutation.AccountID(); !ok {
		if withdraw.DefaultAccountID == nil {
			return fmt.Errorf("ent: uninitialized withdraw.DefaultAccountID (forgotten import ent/runtime?)")
		}
		v := withdraw.DefaultAccountID()
		wc.mutation.SetAccountID(v)
	}
	if _, ok := wc.mutation.Address(); !ok {
		v := withdraw.DefaultAddress
		wc.mutation.SetAddress(v)
	}
	if _, ok := wc.mutation.PlatformTransactionID(); !ok {
		if withdraw.DefaultPlatformTransactionID == nil {
			return fmt.Errorf("ent: uninitialized withdraw.DefaultPlatformTransactionID (forgotten import ent/runtime?)")
		}
		v := withdraw.DefaultPlatformTransactionID()
		wc.mutation.SetPlatformTransactionID(v)
	}
	if _, ok := wc.mutation.ChainTransactionID(); !ok {
		v := withdraw.DefaultChainTransactionID
		wc.mutation.SetChainTransactionID(v)
	}
	if _, ok := wc.mutation.State(); !ok {
		v := withdraw.DefaultState
		wc.mutation.SetState(v)
	}
	if _, ok := wc.mutation.ID(); !ok {
		if withdraw.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized withdraw.DefaultID (forgotten import ent/runtime?)")
		}
		v := withdraw.DefaultID()
		wc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wc *WithdrawCreate) check() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Withdraw.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Withdraw.updated_at"`)}
	}
	if _, ok := wc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Withdraw.deleted_at"`)}
	}
	return nil
}

func (wc *WithdrawCreate) sqlSave(ctx context.Context) (*Withdraw, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (wc *WithdrawCreate) createSpec() (*Withdraw, *sqlgraph.CreateSpec) {
	var (
		_node = &Withdraw{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: withdraw.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: withdraw.FieldID,
			},
		}
	)
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: withdraw.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: withdraw.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: withdraw.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := wc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: withdraw.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := wc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: withdraw.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := wc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: withdraw.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := wc.mutation.AccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: withdraw.FieldAccountID,
		})
		_node.AccountID = value
	}
	if value, ok := wc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: withdraw.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := wc.mutation.PlatformTransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: withdraw.FieldPlatformTransactionID,
		})
		_node.PlatformTransactionID = value
	}
	if value, ok := wc.mutation.ChainTransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: withdraw.FieldChainTransactionID,
		})
		_node.ChainTransactionID = value
	}
	if value, ok := wc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: withdraw.FieldState,
		})
		_node.State = value
	}
	if value, ok := wc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: withdraw.FieldAmount,
		})
		_node.Amount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Withdraw.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WithdrawUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (wc *WithdrawCreate) OnConflict(opts ...sql.ConflictOption) *WithdrawUpsertOne {
	wc.conflict = opts
	return &WithdrawUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Withdraw.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wc *WithdrawCreate) OnConflictColumns(columns ...string) *WithdrawUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WithdrawUpsertOne{
		create: wc,
	}
}

type (
	// WithdrawUpsertOne is the builder for "upsert"-ing
	//  one Withdraw node.
	WithdrawUpsertOne struct {
		create *WithdrawCreate
	}

	// WithdrawUpsert is the "OnConflict" setter.
	WithdrawUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *WithdrawUpsert) SetCreatedAt(v uint32) *WithdrawUpsert {
	u.Set(withdraw.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateCreatedAt() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *WithdrawUpsert) AddCreatedAt(v uint32) *WithdrawUpsert {
	u.Add(withdraw.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WithdrawUpsert) SetUpdatedAt(v uint32) *WithdrawUpsert {
	u.Set(withdraw.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateUpdatedAt() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *WithdrawUpsert) AddUpdatedAt(v uint32) *WithdrawUpsert {
	u.Add(withdraw.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WithdrawUpsert) SetDeletedAt(v uint32) *WithdrawUpsert {
	u.Set(withdraw.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateDeletedAt() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *WithdrawUpsert) AddDeletedAt(v uint32) *WithdrawUpsert {
	u.Add(withdraw.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *WithdrawUpsert) SetAppID(v uuid.UUID) *WithdrawUpsert {
	u.Set(withdraw.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateAppID() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *WithdrawUpsert) ClearAppID() *WithdrawUpsert {
	u.SetNull(withdraw.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *WithdrawUpsert) SetUserID(v uuid.UUID) *WithdrawUpsert {
	u.Set(withdraw.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateUserID() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *WithdrawUpsert) ClearUserID() *WithdrawUpsert {
	u.SetNull(withdraw.FieldUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *WithdrawUpsert) SetCoinTypeID(v uuid.UUID) *WithdrawUpsert {
	u.Set(withdraw.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateCoinTypeID() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *WithdrawUpsert) ClearCoinTypeID() *WithdrawUpsert {
	u.SetNull(withdraw.FieldCoinTypeID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *WithdrawUpsert) SetAccountID(v uuid.UUID) *WithdrawUpsert {
	u.Set(withdraw.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateAccountID() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldAccountID)
	return u
}

// ClearAccountID clears the value of the "account_id" field.
func (u *WithdrawUpsert) ClearAccountID() *WithdrawUpsert {
	u.SetNull(withdraw.FieldAccountID)
	return u
}

// SetAddress sets the "address" field.
func (u *WithdrawUpsert) SetAddress(v string) *WithdrawUpsert {
	u.Set(withdraw.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateAddress() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *WithdrawUpsert) ClearAddress() *WithdrawUpsert {
	u.SetNull(withdraw.FieldAddress)
	return u
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (u *WithdrawUpsert) SetPlatformTransactionID(v uuid.UUID) *WithdrawUpsert {
	u.Set(withdraw.FieldPlatformTransactionID, v)
	return u
}

// UpdatePlatformTransactionID sets the "platform_transaction_id" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdatePlatformTransactionID() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldPlatformTransactionID)
	return u
}

// ClearPlatformTransactionID clears the value of the "platform_transaction_id" field.
func (u *WithdrawUpsert) ClearPlatformTransactionID() *WithdrawUpsert {
	u.SetNull(withdraw.FieldPlatformTransactionID)
	return u
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (u *WithdrawUpsert) SetChainTransactionID(v string) *WithdrawUpsert {
	u.Set(withdraw.FieldChainTransactionID, v)
	return u
}

// UpdateChainTransactionID sets the "chain_transaction_id" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateChainTransactionID() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldChainTransactionID)
	return u
}

// ClearChainTransactionID clears the value of the "chain_transaction_id" field.
func (u *WithdrawUpsert) ClearChainTransactionID() *WithdrawUpsert {
	u.SetNull(withdraw.FieldChainTransactionID)
	return u
}

// SetState sets the "state" field.
func (u *WithdrawUpsert) SetState(v string) *WithdrawUpsert {
	u.Set(withdraw.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateState() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *WithdrawUpsert) ClearState() *WithdrawUpsert {
	u.SetNull(withdraw.FieldState)
	return u
}

// SetAmount sets the "amount" field.
func (u *WithdrawUpsert) SetAmount(v decimal.Decimal) *WithdrawUpsert {
	u.Set(withdraw.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *WithdrawUpsert) UpdateAmount() *WithdrawUpsert {
	u.SetExcluded(withdraw.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *WithdrawUpsert) AddAmount(v decimal.Decimal) *WithdrawUpsert {
	u.Add(withdraw.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *WithdrawUpsert) ClearAmount() *WithdrawUpsert {
	u.SetNull(withdraw.FieldAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Withdraw.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(withdraw.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WithdrawUpsertOne) UpdateNewValues() *WithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(withdraw.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Withdraw.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *WithdrawUpsertOne) Ignore() *WithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WithdrawUpsertOne) DoNothing() *WithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WithdrawCreate.OnConflict
// documentation for more info.
func (u *WithdrawUpsertOne) Update(set func(*WithdrawUpsert)) *WithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WithdrawUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WithdrawUpsertOne) SetCreatedAt(v uint32) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *WithdrawUpsertOne) AddCreatedAt(v uint32) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateCreatedAt() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WithdrawUpsertOne) SetUpdatedAt(v uint32) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *WithdrawUpsertOne) AddUpdatedAt(v uint32) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateUpdatedAt() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WithdrawUpsertOne) SetDeletedAt(v uint32) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *WithdrawUpsertOne) AddDeletedAt(v uint32) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateDeletedAt() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *WithdrawUpsertOne) SetAppID(v uuid.UUID) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateAppID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *WithdrawUpsertOne) ClearAppID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *WithdrawUpsertOne) SetUserID(v uuid.UUID) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateUserID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *WithdrawUpsertOne) ClearUserID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *WithdrawUpsertOne) SetCoinTypeID(v uuid.UUID) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateCoinTypeID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *WithdrawUpsertOne) ClearCoinTypeID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *WithdrawUpsertOne) SetAccountID(v uuid.UUID) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateAccountID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *WithdrawUpsertOne) ClearAccountID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearAccountID()
	})
}

// SetAddress sets the "address" field.
func (u *WithdrawUpsertOne) SetAddress(v string) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateAddress() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *WithdrawUpsertOne) ClearAddress() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearAddress()
	})
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (u *WithdrawUpsertOne) SetPlatformTransactionID(v uuid.UUID) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetPlatformTransactionID(v)
	})
}

// UpdatePlatformTransactionID sets the "platform_transaction_id" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdatePlatformTransactionID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdatePlatformTransactionID()
	})
}

// ClearPlatformTransactionID clears the value of the "platform_transaction_id" field.
func (u *WithdrawUpsertOne) ClearPlatformTransactionID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearPlatformTransactionID()
	})
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (u *WithdrawUpsertOne) SetChainTransactionID(v string) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetChainTransactionID(v)
	})
}

// UpdateChainTransactionID sets the "chain_transaction_id" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateChainTransactionID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateChainTransactionID()
	})
}

// ClearChainTransactionID clears the value of the "chain_transaction_id" field.
func (u *WithdrawUpsertOne) ClearChainTransactionID() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearChainTransactionID()
	})
}

// SetState sets the "state" field.
func (u *WithdrawUpsertOne) SetState(v string) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateState() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *WithdrawUpsertOne) ClearState() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearState()
	})
}

// SetAmount sets the "amount" field.
func (u *WithdrawUpsertOne) SetAmount(v decimal.Decimal) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *WithdrawUpsertOne) AddAmount(v decimal.Decimal) *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *WithdrawUpsertOne) UpdateAmount() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *WithdrawUpsertOne) ClearAmount() *WithdrawUpsertOne {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearAmount()
	})
}

// Exec executes the query.
func (u *WithdrawUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WithdrawCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WithdrawUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WithdrawUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WithdrawUpsertOne.ID is not supported by MySQL driver. Use WithdrawUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WithdrawUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WithdrawCreateBulk is the builder for creating many Withdraw entities in bulk.
type WithdrawCreateBulk struct {
	config
	builders []*WithdrawCreate
	conflict []sql.ConflictOption
}

// Save creates the Withdraw entities in the database.
func (wcb *WithdrawCreateBulk) Save(ctx context.Context) ([]*Withdraw, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Withdraw, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WithdrawMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WithdrawCreateBulk) SaveX(ctx context.Context) []*Withdraw {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WithdrawCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WithdrawCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Withdraw.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WithdrawUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (wcb *WithdrawCreateBulk) OnConflict(opts ...sql.ConflictOption) *WithdrawUpsertBulk {
	wcb.conflict = opts
	return &WithdrawUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Withdraw.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wcb *WithdrawCreateBulk) OnConflictColumns(columns ...string) *WithdrawUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WithdrawUpsertBulk{
		create: wcb,
	}
}

// WithdrawUpsertBulk is the builder for "upsert"-ing
// a bulk of Withdraw nodes.
type WithdrawUpsertBulk struct {
	create *WithdrawCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Withdraw.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(withdraw.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WithdrawUpsertBulk) UpdateNewValues() *WithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(withdraw.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Withdraw.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *WithdrawUpsertBulk) Ignore() *WithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WithdrawUpsertBulk) DoNothing() *WithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WithdrawCreateBulk.OnConflict
// documentation for more info.
func (u *WithdrawUpsertBulk) Update(set func(*WithdrawUpsert)) *WithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WithdrawUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WithdrawUpsertBulk) SetCreatedAt(v uint32) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *WithdrawUpsertBulk) AddCreatedAt(v uint32) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateCreatedAt() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WithdrawUpsertBulk) SetUpdatedAt(v uint32) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *WithdrawUpsertBulk) AddUpdatedAt(v uint32) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateUpdatedAt() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WithdrawUpsertBulk) SetDeletedAt(v uint32) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *WithdrawUpsertBulk) AddDeletedAt(v uint32) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateDeletedAt() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *WithdrawUpsertBulk) SetAppID(v uuid.UUID) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateAppID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *WithdrawUpsertBulk) ClearAppID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *WithdrawUpsertBulk) SetUserID(v uuid.UUID) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateUserID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *WithdrawUpsertBulk) ClearUserID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *WithdrawUpsertBulk) SetCoinTypeID(v uuid.UUID) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateCoinTypeID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *WithdrawUpsertBulk) ClearCoinTypeID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *WithdrawUpsertBulk) SetAccountID(v uuid.UUID) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateAccountID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *WithdrawUpsertBulk) ClearAccountID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearAccountID()
	})
}

// SetAddress sets the "address" field.
func (u *WithdrawUpsertBulk) SetAddress(v string) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateAddress() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *WithdrawUpsertBulk) ClearAddress() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearAddress()
	})
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (u *WithdrawUpsertBulk) SetPlatformTransactionID(v uuid.UUID) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetPlatformTransactionID(v)
	})
}

// UpdatePlatformTransactionID sets the "platform_transaction_id" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdatePlatformTransactionID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdatePlatformTransactionID()
	})
}

// ClearPlatformTransactionID clears the value of the "platform_transaction_id" field.
func (u *WithdrawUpsertBulk) ClearPlatformTransactionID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearPlatformTransactionID()
	})
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (u *WithdrawUpsertBulk) SetChainTransactionID(v string) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetChainTransactionID(v)
	})
}

// UpdateChainTransactionID sets the "chain_transaction_id" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateChainTransactionID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateChainTransactionID()
	})
}

// ClearChainTransactionID clears the value of the "chain_transaction_id" field.
func (u *WithdrawUpsertBulk) ClearChainTransactionID() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearChainTransactionID()
	})
}

// SetState sets the "state" field.
func (u *WithdrawUpsertBulk) SetState(v string) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateState() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *WithdrawUpsertBulk) ClearState() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearState()
	})
}

// SetAmount sets the "amount" field.
func (u *WithdrawUpsertBulk) SetAmount(v decimal.Decimal) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *WithdrawUpsertBulk) AddAmount(v decimal.Decimal) *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *WithdrawUpsertBulk) UpdateAmount() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *WithdrawUpsertBulk) ClearAmount() *WithdrawUpsertBulk {
	return u.Update(func(s *WithdrawUpsert) {
		s.ClearAmount()
	})
}

// Exec executes the query.
func (u *WithdrawUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WithdrawCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WithdrawCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WithdrawUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
