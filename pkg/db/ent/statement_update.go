// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/statement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StatementUpdate is the builder for updating Statement entities.
type StatementUpdate struct {
	config
	hooks    []Hook
	mutation *StatementMutation
}

// Where appends a list predicates to the StatementUpdate builder.
func (su *StatementUpdate) Where(ps ...predicate.Statement) *StatementUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StatementUpdate) SetCreatedAt(u uint32) *StatementUpdate {
	su.mutation.ResetCreatedAt()
	su.mutation.SetCreatedAt(u)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCreatedAt(u *uint32) *StatementUpdate {
	if u != nil {
		su.SetCreatedAt(*u)
	}
	return su
}

// AddCreatedAt adds u to the "created_at" field.
func (su *StatementUpdate) AddCreatedAt(u int32) *StatementUpdate {
	su.mutation.AddCreatedAt(u)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StatementUpdate) SetUpdatedAt(u uint32) *StatementUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(u)
	return su
}

// AddUpdatedAt adds u to the "updated_at" field.
func (su *StatementUpdate) AddUpdatedAt(u int32) *StatementUpdate {
	su.mutation.AddUpdatedAt(u)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StatementUpdate) SetDeletedAt(u uint32) *StatementUpdate {
	su.mutation.ResetDeletedAt()
	su.mutation.SetDeletedAt(u)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StatementUpdate) SetNillableDeletedAt(u *uint32) *StatementUpdate {
	if u != nil {
		su.SetDeletedAt(*u)
	}
	return su
}

// AddDeletedAt adds u to the "deleted_at" field.
func (su *StatementUpdate) AddDeletedAt(u int32) *StatementUpdate {
	su.mutation.AddDeletedAt(u)
	return su
}

// SetAppID sets the "app_id" field.
func (su *StatementUpdate) SetAppID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetAppID(u)
	return su
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableAppID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetAppID(*u)
	}
	return su
}

// ClearAppID clears the value of the "app_id" field.
func (su *StatementUpdate) ClearAppID() *StatementUpdate {
	su.mutation.ClearAppID()
	return su
}

// SetUserID sets the "user_id" field.
func (su *StatementUpdate) SetUserID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetUserID(u)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableUserID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetUserID(*u)
	}
	return su
}

// ClearUserID clears the value of the "user_id" field.
func (su *StatementUpdate) ClearUserID() *StatementUpdate {
	su.mutation.ClearUserID()
	return su
}

// SetCoinTypeID sets the "coin_type_id" field.
func (su *StatementUpdate) SetCoinTypeID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetCoinTypeID(u)
	return su
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCoinTypeID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetCoinTypeID(*u)
	}
	return su
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (su *StatementUpdate) ClearCoinTypeID() *StatementUpdate {
	su.mutation.ClearCoinTypeID()
	return su
}

// SetIoType sets the "io_type" field.
func (su *StatementUpdate) SetIoType(s string) *StatementUpdate {
	su.mutation.SetIoType(s)
	return su
}

// SetNillableIoType sets the "io_type" field if the given value is not nil.
func (su *StatementUpdate) SetNillableIoType(s *string) *StatementUpdate {
	if s != nil {
		su.SetIoType(*s)
	}
	return su
}

// ClearIoType clears the value of the "io_type" field.
func (su *StatementUpdate) ClearIoType() *StatementUpdate {
	su.mutation.ClearIoType()
	return su
}

// SetIoSubType sets the "io_sub_type" field.
func (su *StatementUpdate) SetIoSubType(s string) *StatementUpdate {
	su.mutation.SetIoSubType(s)
	return su
}

// SetNillableIoSubType sets the "io_sub_type" field if the given value is not nil.
func (su *StatementUpdate) SetNillableIoSubType(s *string) *StatementUpdate {
	if s != nil {
		su.SetIoSubType(*s)
	}
	return su
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (su *StatementUpdate) ClearIoSubType() *StatementUpdate {
	su.mutation.ClearIoSubType()
	return su
}

// SetAmount sets the "amount" field.
func (su *StatementUpdate) SetAmount(d decimal.Decimal) *StatementUpdate {
	su.mutation.ResetAmount()
	su.mutation.SetAmount(d)
	return su
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (su *StatementUpdate) SetNillableAmount(d *decimal.Decimal) *StatementUpdate {
	if d != nil {
		su.SetAmount(*d)
	}
	return su
}

// AddAmount adds d to the "amount" field.
func (su *StatementUpdate) AddAmount(d decimal.Decimal) *StatementUpdate {
	su.mutation.AddAmount(d)
	return su
}

// ClearAmount clears the value of the "amount" field.
func (su *StatementUpdate) ClearAmount() *StatementUpdate {
	su.mutation.ClearAmount()
	return su
}

// SetIoExtra sets the "io_extra" field.
func (su *StatementUpdate) SetIoExtra(s string) *StatementUpdate {
	su.mutation.SetIoExtra(s)
	return su
}

// SetNillableIoExtra sets the "io_extra" field if the given value is not nil.
func (su *StatementUpdate) SetNillableIoExtra(s *string) *StatementUpdate {
	if s != nil {
		su.SetIoExtra(*s)
	}
	return su
}

// ClearIoExtra clears the value of the "io_extra" field.
func (su *StatementUpdate) ClearIoExtra() *StatementUpdate {
	su.mutation.ClearIoExtra()
	return su
}

// Mutation returns the StatementMutation object of the builder.
func (su *StatementUpdate) Mutation() *StatementMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatementUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatementUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatementUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StatementUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if statement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized statement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := statement.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *StatementUpdate) check() error {
	if v, ok := su.mutation.IoExtra(); ok {
		if err := statement.IoExtraValidator(v); err != nil {
			return &ValidationError{Name: "io_extra", err: fmt.Errorf(`ent: validator failed for field "Statement.io_extra": %w`, err)}
		}
	}
	return nil
}

func (su *StatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statement.Table,
			Columns: statement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: statement.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldDeletedAt,
		})
	}
	if value, ok := su.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldDeletedAt,
		})
	}
	if value, ok := su.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: statement.FieldAppID,
		})
	}
	if su.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: statement.FieldAppID,
		})
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: statement.FieldUserID,
		})
	}
	if su.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: statement.FieldUserID,
		})
	}
	if value, ok := su.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: statement.FieldCoinTypeID,
		})
	}
	if su.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: statement.FieldCoinTypeID,
		})
	}
	if value, ok := su.mutation.IoType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statement.FieldIoType,
		})
	}
	if su.mutation.IoTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statement.FieldIoType,
		})
	}
	if value, ok := su.mutation.IoSubType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statement.FieldIoSubType,
		})
	}
	if su.mutation.IoSubTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statement.FieldIoSubType,
		})
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statement.FieldAmount,
		})
	}
	if value, ok := su.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statement.FieldAmount,
		})
	}
	if su.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: statement.FieldAmount,
		})
	}
	if value, ok := su.mutation.IoExtra(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statement.FieldIoExtra,
		})
	}
	if su.mutation.IoExtraCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statement.FieldIoExtra,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// StatementUpdateOne is the builder for updating a single Statement entity.
type StatementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatementMutation
}

// SetCreatedAt sets the "created_at" field.
func (suo *StatementUpdateOne) SetCreatedAt(u uint32) *StatementUpdateOne {
	suo.mutation.ResetCreatedAt()
	suo.mutation.SetCreatedAt(u)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCreatedAt(u *uint32) *StatementUpdateOne {
	if u != nil {
		suo.SetCreatedAt(*u)
	}
	return suo
}

// AddCreatedAt adds u to the "created_at" field.
func (suo *StatementUpdateOne) AddCreatedAt(u int32) *StatementUpdateOne {
	suo.mutation.AddCreatedAt(u)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StatementUpdateOne) SetUpdatedAt(u uint32) *StatementUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(u)
	return suo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (suo *StatementUpdateOne) AddUpdatedAt(u int32) *StatementUpdateOne {
	suo.mutation.AddUpdatedAt(u)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StatementUpdateOne) SetDeletedAt(u uint32) *StatementUpdateOne {
	suo.mutation.ResetDeletedAt()
	suo.mutation.SetDeletedAt(u)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableDeletedAt(u *uint32) *StatementUpdateOne {
	if u != nil {
		suo.SetDeletedAt(*u)
	}
	return suo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (suo *StatementUpdateOne) AddDeletedAt(u int32) *StatementUpdateOne {
	suo.mutation.AddDeletedAt(u)
	return suo
}

// SetAppID sets the "app_id" field.
func (suo *StatementUpdateOne) SetAppID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetAppID(u)
	return suo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableAppID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetAppID(*u)
	}
	return suo
}

// ClearAppID clears the value of the "app_id" field.
func (suo *StatementUpdateOne) ClearAppID() *StatementUpdateOne {
	suo.mutation.ClearAppID()
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *StatementUpdateOne) SetUserID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetUserID(u)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableUserID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetUserID(*u)
	}
	return suo
}

// ClearUserID clears the value of the "user_id" field.
func (suo *StatementUpdateOne) ClearUserID() *StatementUpdateOne {
	suo.mutation.ClearUserID()
	return suo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (suo *StatementUpdateOne) SetCoinTypeID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetCoinTypeID(u)
	return suo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetCoinTypeID(*u)
	}
	return suo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (suo *StatementUpdateOne) ClearCoinTypeID() *StatementUpdateOne {
	suo.mutation.ClearCoinTypeID()
	return suo
}

// SetIoType sets the "io_type" field.
func (suo *StatementUpdateOne) SetIoType(s string) *StatementUpdateOne {
	suo.mutation.SetIoType(s)
	return suo
}

// SetNillableIoType sets the "io_type" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableIoType(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetIoType(*s)
	}
	return suo
}

// ClearIoType clears the value of the "io_type" field.
func (suo *StatementUpdateOne) ClearIoType() *StatementUpdateOne {
	suo.mutation.ClearIoType()
	return suo
}

// SetIoSubType sets the "io_sub_type" field.
func (suo *StatementUpdateOne) SetIoSubType(s string) *StatementUpdateOne {
	suo.mutation.SetIoSubType(s)
	return suo
}

// SetNillableIoSubType sets the "io_sub_type" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableIoSubType(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetIoSubType(*s)
	}
	return suo
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (suo *StatementUpdateOne) ClearIoSubType() *StatementUpdateOne {
	suo.mutation.ClearIoSubType()
	return suo
}

// SetAmount sets the "amount" field.
func (suo *StatementUpdateOne) SetAmount(d decimal.Decimal) *StatementUpdateOne {
	suo.mutation.ResetAmount()
	suo.mutation.SetAmount(d)
	return suo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableAmount(d *decimal.Decimal) *StatementUpdateOne {
	if d != nil {
		suo.SetAmount(*d)
	}
	return suo
}

// AddAmount adds d to the "amount" field.
func (suo *StatementUpdateOne) AddAmount(d decimal.Decimal) *StatementUpdateOne {
	suo.mutation.AddAmount(d)
	return suo
}

// ClearAmount clears the value of the "amount" field.
func (suo *StatementUpdateOne) ClearAmount() *StatementUpdateOne {
	suo.mutation.ClearAmount()
	return suo
}

// SetIoExtra sets the "io_extra" field.
func (suo *StatementUpdateOne) SetIoExtra(s string) *StatementUpdateOne {
	suo.mutation.SetIoExtra(s)
	return suo
}

// SetNillableIoExtra sets the "io_extra" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableIoExtra(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetIoExtra(*s)
	}
	return suo
}

// ClearIoExtra clears the value of the "io_extra" field.
func (suo *StatementUpdateOne) ClearIoExtra() *StatementUpdateOne {
	suo.mutation.ClearIoExtra()
	return suo
}

// Mutation returns the StatementMutation object of the builder.
func (suo *StatementUpdateOne) Mutation() *StatementMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatementUpdateOne) Select(field string, fields ...string) *StatementUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Statement entity.
func (suo *StatementUpdateOne) Save(ctx context.Context) (*Statement, error) {
	var (
		err  error
		node *Statement
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Statement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StatementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatementUpdateOne) SaveX(ctx context.Context) *Statement {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatementUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatementUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StatementUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if statement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized statement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := statement.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *StatementUpdateOne) check() error {
	if v, ok := suo.mutation.IoExtra(); ok {
		if err := statement.IoExtraValidator(v); err != nil {
			return &ValidationError{Name: "io_extra", err: fmt.Errorf(`ent: validator failed for field "Statement.io_extra": %w`, err)}
		}
	}
	return nil
}

func (suo *StatementUpdateOne) sqlSave(ctx context.Context) (_node *Statement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statement.Table,
			Columns: statement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: statement.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Statement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statement.FieldID)
		for _, f := range fields {
			if !statement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldDeletedAt,
		})
	}
	if value, ok := suo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: statement.FieldDeletedAt,
		})
	}
	if value, ok := suo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: statement.FieldAppID,
		})
	}
	if suo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: statement.FieldAppID,
		})
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: statement.FieldUserID,
		})
	}
	if suo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: statement.FieldUserID,
		})
	}
	if value, ok := suo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: statement.FieldCoinTypeID,
		})
	}
	if suo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: statement.FieldCoinTypeID,
		})
	}
	if value, ok := suo.mutation.IoType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statement.FieldIoType,
		})
	}
	if suo.mutation.IoTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statement.FieldIoType,
		})
	}
	if value, ok := suo.mutation.IoSubType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statement.FieldIoSubType,
		})
	}
	if suo.mutation.IoSubTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statement.FieldIoSubType,
		})
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statement.FieldAmount,
		})
	}
	if value, ok := suo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statement.FieldAmount,
		})
	}
	if suo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: statement.FieldAmount,
		})
	}
	if value, ok := suo.mutation.IoExtra(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statement.FieldIoExtra,
		})
	}
	if suo.mutation.IoExtraCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statement.FieldIoExtra,
		})
	}
	_node = &Statement{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
