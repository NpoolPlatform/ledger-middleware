// Code generated by ent, DO NOT EDIT.

package statement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// IoType applies equality check predicate on the "io_type" field. It's identical to IoTypeEQ.
func IoType(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIoType), v))
	})
}

// IoSubType applies equality check predicate on the "io_sub_type" field. It's identical to IoSubTypeEQ.
func IoSubType(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIoSubType), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// IoExtra applies equality check predicate on the "io_extra" field. It's identical to IoExtraEQ.
func IoExtra(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIoExtra), v))
	})
}

// IoExtraV1 applies equality check predicate on the "io_extra_v1" field. It's identical to IoExtraV1EQ.
func IoExtraV1(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIoExtraV1), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinTypeID)))
	})
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinTypeID)))
	})
}

// IoTypeEQ applies the EQ predicate on the "io_type" field.
func IoTypeEQ(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIoType), v))
	})
}

// IoTypeNEQ applies the NEQ predicate on the "io_type" field.
func IoTypeNEQ(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIoType), v))
	})
}

// IoTypeIn applies the In predicate on the "io_type" field.
func IoTypeIn(vs ...string) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIoType), v...))
	})
}

// IoTypeNotIn applies the NotIn predicate on the "io_type" field.
func IoTypeNotIn(vs ...string) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIoType), v...))
	})
}

// IoTypeGT applies the GT predicate on the "io_type" field.
func IoTypeGT(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIoType), v))
	})
}

// IoTypeGTE applies the GTE predicate on the "io_type" field.
func IoTypeGTE(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIoType), v))
	})
}

// IoTypeLT applies the LT predicate on the "io_type" field.
func IoTypeLT(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIoType), v))
	})
}

// IoTypeLTE applies the LTE predicate on the "io_type" field.
func IoTypeLTE(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIoType), v))
	})
}

// IoTypeContains applies the Contains predicate on the "io_type" field.
func IoTypeContains(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIoType), v))
	})
}

// IoTypeHasPrefix applies the HasPrefix predicate on the "io_type" field.
func IoTypeHasPrefix(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIoType), v))
	})
}

// IoTypeHasSuffix applies the HasSuffix predicate on the "io_type" field.
func IoTypeHasSuffix(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIoType), v))
	})
}

// IoTypeIsNil applies the IsNil predicate on the "io_type" field.
func IoTypeIsNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIoType)))
	})
}

// IoTypeNotNil applies the NotNil predicate on the "io_type" field.
func IoTypeNotNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIoType)))
	})
}

// IoTypeEqualFold applies the EqualFold predicate on the "io_type" field.
func IoTypeEqualFold(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIoType), v))
	})
}

// IoTypeContainsFold applies the ContainsFold predicate on the "io_type" field.
func IoTypeContainsFold(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIoType), v))
	})
}

// IoSubTypeEQ applies the EQ predicate on the "io_sub_type" field.
func IoSubTypeEQ(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIoSubType), v))
	})
}

// IoSubTypeNEQ applies the NEQ predicate on the "io_sub_type" field.
func IoSubTypeNEQ(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIoSubType), v))
	})
}

// IoSubTypeIn applies the In predicate on the "io_sub_type" field.
func IoSubTypeIn(vs ...string) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIoSubType), v...))
	})
}

// IoSubTypeNotIn applies the NotIn predicate on the "io_sub_type" field.
func IoSubTypeNotIn(vs ...string) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIoSubType), v...))
	})
}

// IoSubTypeGT applies the GT predicate on the "io_sub_type" field.
func IoSubTypeGT(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIoSubType), v))
	})
}

// IoSubTypeGTE applies the GTE predicate on the "io_sub_type" field.
func IoSubTypeGTE(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIoSubType), v))
	})
}

// IoSubTypeLT applies the LT predicate on the "io_sub_type" field.
func IoSubTypeLT(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIoSubType), v))
	})
}

// IoSubTypeLTE applies the LTE predicate on the "io_sub_type" field.
func IoSubTypeLTE(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIoSubType), v))
	})
}

// IoSubTypeContains applies the Contains predicate on the "io_sub_type" field.
func IoSubTypeContains(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIoSubType), v))
	})
}

// IoSubTypeHasPrefix applies the HasPrefix predicate on the "io_sub_type" field.
func IoSubTypeHasPrefix(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIoSubType), v))
	})
}

// IoSubTypeHasSuffix applies the HasSuffix predicate on the "io_sub_type" field.
func IoSubTypeHasSuffix(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIoSubType), v))
	})
}

// IoSubTypeIsNil applies the IsNil predicate on the "io_sub_type" field.
func IoSubTypeIsNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIoSubType)))
	})
}

// IoSubTypeNotNil applies the NotNil predicate on the "io_sub_type" field.
func IoSubTypeNotNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIoSubType)))
	})
}

// IoSubTypeEqualFold applies the EqualFold predicate on the "io_sub_type" field.
func IoSubTypeEqualFold(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIoSubType), v))
	})
}

// IoSubTypeContainsFold applies the ContainsFold predicate on the "io_sub_type" field.
func IoSubTypeContainsFold(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIoSubType), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// IoExtraEQ applies the EQ predicate on the "io_extra" field.
func IoExtraEQ(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIoExtra), v))
	})
}

// IoExtraNEQ applies the NEQ predicate on the "io_extra" field.
func IoExtraNEQ(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIoExtra), v))
	})
}

// IoExtraIn applies the In predicate on the "io_extra" field.
func IoExtraIn(vs ...string) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIoExtra), v...))
	})
}

// IoExtraNotIn applies the NotIn predicate on the "io_extra" field.
func IoExtraNotIn(vs ...string) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIoExtra), v...))
	})
}

// IoExtraGT applies the GT predicate on the "io_extra" field.
func IoExtraGT(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIoExtra), v))
	})
}

// IoExtraGTE applies the GTE predicate on the "io_extra" field.
func IoExtraGTE(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIoExtra), v))
	})
}

// IoExtraLT applies the LT predicate on the "io_extra" field.
func IoExtraLT(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIoExtra), v))
	})
}

// IoExtraLTE applies the LTE predicate on the "io_extra" field.
func IoExtraLTE(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIoExtra), v))
	})
}

// IoExtraContains applies the Contains predicate on the "io_extra" field.
func IoExtraContains(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIoExtra), v))
	})
}

// IoExtraHasPrefix applies the HasPrefix predicate on the "io_extra" field.
func IoExtraHasPrefix(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIoExtra), v))
	})
}

// IoExtraHasSuffix applies the HasSuffix predicate on the "io_extra" field.
func IoExtraHasSuffix(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIoExtra), v))
	})
}

// IoExtraIsNil applies the IsNil predicate on the "io_extra" field.
func IoExtraIsNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIoExtra)))
	})
}

// IoExtraNotNil applies the NotNil predicate on the "io_extra" field.
func IoExtraNotNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIoExtra)))
	})
}

// IoExtraEqualFold applies the EqualFold predicate on the "io_extra" field.
func IoExtraEqualFold(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIoExtra), v))
	})
}

// IoExtraContainsFold applies the ContainsFold predicate on the "io_extra" field.
func IoExtraContainsFold(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIoExtra), v))
	})
}

// IoExtraV1EQ applies the EQ predicate on the "io_extra_v1" field.
func IoExtraV1EQ(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIoExtraV1), v))
	})
}

// IoExtraV1NEQ applies the NEQ predicate on the "io_extra_v1" field.
func IoExtraV1NEQ(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIoExtraV1), v))
	})
}

// IoExtraV1In applies the In predicate on the "io_extra_v1" field.
func IoExtraV1In(vs ...string) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIoExtraV1), v...))
	})
}

// IoExtraV1NotIn applies the NotIn predicate on the "io_extra_v1" field.
func IoExtraV1NotIn(vs ...string) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIoExtraV1), v...))
	})
}

// IoExtraV1GT applies the GT predicate on the "io_extra_v1" field.
func IoExtraV1GT(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIoExtraV1), v))
	})
}

// IoExtraV1GTE applies the GTE predicate on the "io_extra_v1" field.
func IoExtraV1GTE(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIoExtraV1), v))
	})
}

// IoExtraV1LT applies the LT predicate on the "io_extra_v1" field.
func IoExtraV1LT(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIoExtraV1), v))
	})
}

// IoExtraV1LTE applies the LTE predicate on the "io_extra_v1" field.
func IoExtraV1LTE(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIoExtraV1), v))
	})
}

// IoExtraV1Contains applies the Contains predicate on the "io_extra_v1" field.
func IoExtraV1Contains(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIoExtraV1), v))
	})
}

// IoExtraV1HasPrefix applies the HasPrefix predicate on the "io_extra_v1" field.
func IoExtraV1HasPrefix(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIoExtraV1), v))
	})
}

// IoExtraV1HasSuffix applies the HasSuffix predicate on the "io_extra_v1" field.
func IoExtraV1HasSuffix(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIoExtraV1), v))
	})
}

// IoExtraV1IsNil applies the IsNil predicate on the "io_extra_v1" field.
func IoExtraV1IsNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIoExtraV1)))
	})
}

// IoExtraV1NotNil applies the NotNil predicate on the "io_extra_v1" field.
func IoExtraV1NotNil() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIoExtraV1)))
	})
}

// IoExtraV1EqualFold applies the EqualFold predicate on the "io_extra_v1" field.
func IoExtraV1EqualFold(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIoExtraV1), v))
	})
}

// IoExtraV1ContainsFold applies the ContainsFold predicate on the "io_extra_v1" field.
func IoExtraV1ContainsFold(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIoExtraV1), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		p(s.Not())
	})
}
