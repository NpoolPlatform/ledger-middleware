// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/couponwithdraw"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponWithdraw is the model entity for the CouponWithdraw schema.
type CouponWithdraw struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// CouponID holds the value of the "coupon_id" field.
	CouponID uuid.UUID `json:"coupon_id,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// ReviewID holds the value of the "review_id" field.
	ReviewID uuid.UUID `json:"review_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponWithdraw) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case couponwithdraw.FieldAmount:
			values[i] = new(decimal.Decimal)
		case couponwithdraw.FieldID, couponwithdraw.FieldCreatedAt, couponwithdraw.FieldUpdatedAt, couponwithdraw.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case couponwithdraw.FieldState:
			values[i] = new(sql.NullString)
		case couponwithdraw.FieldEntID, couponwithdraw.FieldAppID, couponwithdraw.FieldUserID, couponwithdraw.FieldCoinTypeID, couponwithdraw.FieldCouponID, couponwithdraw.FieldReviewID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CouponWithdraw", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponWithdraw fields.
func (cw *CouponWithdraw) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case couponwithdraw.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cw.ID = uint32(value.Int64)
		case couponwithdraw.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cw.CreatedAt = uint32(value.Int64)
			}
		case couponwithdraw.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cw.UpdatedAt = uint32(value.Int64)
			}
		case couponwithdraw.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cw.DeletedAt = uint32(value.Int64)
			}
		case couponwithdraw.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				cw.EntID = *value
			}
		case couponwithdraw.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				cw.AppID = *value
			}
		case couponwithdraw.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				cw.UserID = *value
			}
		case couponwithdraw.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				cw.CoinTypeID = *value
			}
		case couponwithdraw.FieldCouponID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_id", values[i])
			} else if value != nil {
				cw.CouponID = *value
			}
		case couponwithdraw.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				cw.State = value.String
			}
		case couponwithdraw.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				cw.Amount = *value
			}
		case couponwithdraw.FieldReviewID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field review_id", values[i])
			} else if value != nil {
				cw.ReviewID = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CouponWithdraw.
// Note that you need to call CouponWithdraw.Unwrap() before calling this method if this CouponWithdraw
// was returned from a transaction, and the transaction was committed or rolled back.
func (cw *CouponWithdraw) Update() *CouponWithdrawUpdateOne {
	return (&CouponWithdrawClient{config: cw.config}).UpdateOne(cw)
}

// Unwrap unwraps the CouponWithdraw entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cw *CouponWithdraw) Unwrap() *CouponWithdraw {
	_tx, ok := cw.config.driver.(*txDriver)
	if !ok {
		panic("ent: CouponWithdraw is not a transactional entity")
	}
	cw.config.driver = _tx.drv
	return cw
}

// String implements the fmt.Stringer.
func (cw *CouponWithdraw) String() string {
	var builder strings.Builder
	builder.WriteString("CouponWithdraw(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cw.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", cw.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", cw.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", cw.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", cw.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", cw.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", cw.UserID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", cw.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("coupon_id=")
	builder.WriteString(fmt.Sprintf("%v", cw.CouponID))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(cw.State)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", cw.Amount))
	builder.WriteString(", ")
	builder.WriteString("review_id=")
	builder.WriteString(fmt.Sprintf("%v", cw.ReviewID))
	builder.WriteByte(')')
	return builder.String()
}

// CouponWithdraws is a parsable slice of CouponWithdraw.
type CouponWithdraws []*CouponWithdraw

func (cw CouponWithdraws) config(cfg config) {
	for _i := range cw {
		cw[_i].config = cfg
	}
}
