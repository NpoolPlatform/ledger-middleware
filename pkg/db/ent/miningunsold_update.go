// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/miningunsold"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// MiningUnsoldUpdate is the builder for updating MiningUnsold entities.
type MiningUnsoldUpdate struct {
	config
	hooks    []Hook
	mutation *MiningUnsoldMutation
}

// Where appends a list predicates to the MiningUnsoldUpdate builder.
func (muu *MiningUnsoldUpdate) Where(ps ...predicate.MiningUnsold) *MiningUnsoldUpdate {
	muu.mutation.Where(ps...)
	return muu
}

// SetCreatedAt sets the "created_at" field.
func (muu *MiningUnsoldUpdate) SetCreatedAt(u uint32) *MiningUnsoldUpdate {
	muu.mutation.ResetCreatedAt()
	muu.mutation.SetCreatedAt(u)
	return muu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muu *MiningUnsoldUpdate) SetNillableCreatedAt(u *uint32) *MiningUnsoldUpdate {
	if u != nil {
		muu.SetCreatedAt(*u)
	}
	return muu
}

// AddCreatedAt adds u to the "created_at" field.
func (muu *MiningUnsoldUpdate) AddCreatedAt(u int32) *MiningUnsoldUpdate {
	muu.mutation.AddCreatedAt(u)
	return muu
}

// SetUpdatedAt sets the "updated_at" field.
func (muu *MiningUnsoldUpdate) SetUpdatedAt(u uint32) *MiningUnsoldUpdate {
	muu.mutation.ResetUpdatedAt()
	muu.mutation.SetUpdatedAt(u)
	return muu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (muu *MiningUnsoldUpdate) AddUpdatedAt(u int32) *MiningUnsoldUpdate {
	muu.mutation.AddUpdatedAt(u)
	return muu
}

// SetDeletedAt sets the "deleted_at" field.
func (muu *MiningUnsoldUpdate) SetDeletedAt(u uint32) *MiningUnsoldUpdate {
	muu.mutation.ResetDeletedAt()
	muu.mutation.SetDeletedAt(u)
	return muu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muu *MiningUnsoldUpdate) SetNillableDeletedAt(u *uint32) *MiningUnsoldUpdate {
	if u != nil {
		muu.SetDeletedAt(*u)
	}
	return muu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (muu *MiningUnsoldUpdate) AddDeletedAt(u int32) *MiningUnsoldUpdate {
	muu.mutation.AddDeletedAt(u)
	return muu
}

// SetGoodID sets the "good_id" field.
func (muu *MiningUnsoldUpdate) SetGoodID(u uuid.UUID) *MiningUnsoldUpdate {
	muu.mutation.SetGoodID(u)
	return muu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (muu *MiningUnsoldUpdate) SetNillableGoodID(u *uuid.UUID) *MiningUnsoldUpdate {
	if u != nil {
		muu.SetGoodID(*u)
	}
	return muu
}

// ClearGoodID clears the value of the "good_id" field.
func (muu *MiningUnsoldUpdate) ClearGoodID() *MiningUnsoldUpdate {
	muu.mutation.ClearGoodID()
	return muu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (muu *MiningUnsoldUpdate) SetCoinTypeID(u uuid.UUID) *MiningUnsoldUpdate {
	muu.mutation.SetCoinTypeID(u)
	return muu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (muu *MiningUnsoldUpdate) SetNillableCoinTypeID(u *uuid.UUID) *MiningUnsoldUpdate {
	if u != nil {
		muu.SetCoinTypeID(*u)
	}
	return muu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (muu *MiningUnsoldUpdate) ClearCoinTypeID() *MiningUnsoldUpdate {
	muu.mutation.ClearCoinTypeID()
	return muu
}

// SetAmount sets the "amount" field.
func (muu *MiningUnsoldUpdate) SetAmount(d decimal.Decimal) *MiningUnsoldUpdate {
	muu.mutation.ResetAmount()
	muu.mutation.SetAmount(d)
	return muu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (muu *MiningUnsoldUpdate) SetNillableAmount(d *decimal.Decimal) *MiningUnsoldUpdate {
	if d != nil {
		muu.SetAmount(*d)
	}
	return muu
}

// AddAmount adds d to the "amount" field.
func (muu *MiningUnsoldUpdate) AddAmount(d decimal.Decimal) *MiningUnsoldUpdate {
	muu.mutation.AddAmount(d)
	return muu
}

// ClearAmount clears the value of the "amount" field.
func (muu *MiningUnsoldUpdate) ClearAmount() *MiningUnsoldUpdate {
	muu.mutation.ClearAmount()
	return muu
}

// SetBenefitDate sets the "benefit_date" field.
func (muu *MiningUnsoldUpdate) SetBenefitDate(u uint32) *MiningUnsoldUpdate {
	muu.mutation.ResetBenefitDate()
	muu.mutation.SetBenefitDate(u)
	return muu
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (muu *MiningUnsoldUpdate) SetNillableBenefitDate(u *uint32) *MiningUnsoldUpdate {
	if u != nil {
		muu.SetBenefitDate(*u)
	}
	return muu
}

// AddBenefitDate adds u to the "benefit_date" field.
func (muu *MiningUnsoldUpdate) AddBenefitDate(u int32) *MiningUnsoldUpdate {
	muu.mutation.AddBenefitDate(u)
	return muu
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (muu *MiningUnsoldUpdate) ClearBenefitDate() *MiningUnsoldUpdate {
	muu.mutation.ClearBenefitDate()
	return muu
}

// Mutation returns the MiningUnsoldMutation object of the builder.
func (muu *MiningUnsoldUpdate) Mutation() *MiningUnsoldMutation {
	return muu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (muu *MiningUnsoldUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := muu.defaults(); err != nil {
		return 0, err
	}
	if len(muu.hooks) == 0 {
		affected, err = muu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiningUnsoldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muu.mutation = mutation
			affected, err = muu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(muu.hooks) - 1; i >= 0; i-- {
			if muu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (muu *MiningUnsoldUpdate) SaveX(ctx context.Context) int {
	affected, err := muu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (muu *MiningUnsoldUpdate) Exec(ctx context.Context) error {
	_, err := muu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muu *MiningUnsoldUpdate) ExecX(ctx context.Context) {
	if err := muu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muu *MiningUnsoldUpdate) defaults() error {
	if _, ok := muu.mutation.UpdatedAt(); !ok {
		if miningunsold.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningunsold.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := miningunsold.UpdateDefaultUpdatedAt()
		muu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (muu *MiningUnsoldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   miningunsold.Table,
			Columns: miningunsold.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningunsold.FieldID,
			},
		},
	}
	if ps := muu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldCreatedAt,
		})
	}
	if value, ok := muu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldCreatedAt,
		})
	}
	if value, ok := muu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldUpdatedAt,
		})
	}
	if value, ok := muu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldUpdatedAt,
		})
	}
	if value, ok := muu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldDeletedAt,
		})
	}
	if value, ok := muu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldDeletedAt,
		})
	}
	if value, ok := muu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningunsold.FieldGoodID,
		})
	}
	if muu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningunsold.FieldGoodID,
		})
	}
	if value, ok := muu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningunsold.FieldCoinTypeID,
		})
	}
	if muu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningunsold.FieldCoinTypeID,
		})
	}
	if value, ok := muu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningunsold.FieldAmount,
		})
	}
	if value, ok := muu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningunsold.FieldAmount,
		})
	}
	if muu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningunsold.FieldAmount,
		})
	}
	if value, ok := muu.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldBenefitDate,
		})
	}
	if value, ok := muu.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldBenefitDate,
		})
	}
	if muu.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: miningunsold.FieldBenefitDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, muu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miningunsold.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MiningUnsoldUpdateOne is the builder for updating a single MiningUnsold entity.
type MiningUnsoldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MiningUnsoldMutation
}

// SetCreatedAt sets the "created_at" field.
func (muuo *MiningUnsoldUpdateOne) SetCreatedAt(u uint32) *MiningUnsoldUpdateOne {
	muuo.mutation.ResetCreatedAt()
	muuo.mutation.SetCreatedAt(u)
	return muuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muuo *MiningUnsoldUpdateOne) SetNillableCreatedAt(u *uint32) *MiningUnsoldUpdateOne {
	if u != nil {
		muuo.SetCreatedAt(*u)
	}
	return muuo
}

// AddCreatedAt adds u to the "created_at" field.
func (muuo *MiningUnsoldUpdateOne) AddCreatedAt(u int32) *MiningUnsoldUpdateOne {
	muuo.mutation.AddCreatedAt(u)
	return muuo
}

// SetUpdatedAt sets the "updated_at" field.
func (muuo *MiningUnsoldUpdateOne) SetUpdatedAt(u uint32) *MiningUnsoldUpdateOne {
	muuo.mutation.ResetUpdatedAt()
	muuo.mutation.SetUpdatedAt(u)
	return muuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (muuo *MiningUnsoldUpdateOne) AddUpdatedAt(u int32) *MiningUnsoldUpdateOne {
	muuo.mutation.AddUpdatedAt(u)
	return muuo
}

// SetDeletedAt sets the "deleted_at" field.
func (muuo *MiningUnsoldUpdateOne) SetDeletedAt(u uint32) *MiningUnsoldUpdateOne {
	muuo.mutation.ResetDeletedAt()
	muuo.mutation.SetDeletedAt(u)
	return muuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muuo *MiningUnsoldUpdateOne) SetNillableDeletedAt(u *uint32) *MiningUnsoldUpdateOne {
	if u != nil {
		muuo.SetDeletedAt(*u)
	}
	return muuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (muuo *MiningUnsoldUpdateOne) AddDeletedAt(u int32) *MiningUnsoldUpdateOne {
	muuo.mutation.AddDeletedAt(u)
	return muuo
}

// SetGoodID sets the "good_id" field.
func (muuo *MiningUnsoldUpdateOne) SetGoodID(u uuid.UUID) *MiningUnsoldUpdateOne {
	muuo.mutation.SetGoodID(u)
	return muuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (muuo *MiningUnsoldUpdateOne) SetNillableGoodID(u *uuid.UUID) *MiningUnsoldUpdateOne {
	if u != nil {
		muuo.SetGoodID(*u)
	}
	return muuo
}

// ClearGoodID clears the value of the "good_id" field.
func (muuo *MiningUnsoldUpdateOne) ClearGoodID() *MiningUnsoldUpdateOne {
	muuo.mutation.ClearGoodID()
	return muuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (muuo *MiningUnsoldUpdateOne) SetCoinTypeID(u uuid.UUID) *MiningUnsoldUpdateOne {
	muuo.mutation.SetCoinTypeID(u)
	return muuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (muuo *MiningUnsoldUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *MiningUnsoldUpdateOne {
	if u != nil {
		muuo.SetCoinTypeID(*u)
	}
	return muuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (muuo *MiningUnsoldUpdateOne) ClearCoinTypeID() *MiningUnsoldUpdateOne {
	muuo.mutation.ClearCoinTypeID()
	return muuo
}

// SetAmount sets the "amount" field.
func (muuo *MiningUnsoldUpdateOne) SetAmount(d decimal.Decimal) *MiningUnsoldUpdateOne {
	muuo.mutation.ResetAmount()
	muuo.mutation.SetAmount(d)
	return muuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (muuo *MiningUnsoldUpdateOne) SetNillableAmount(d *decimal.Decimal) *MiningUnsoldUpdateOne {
	if d != nil {
		muuo.SetAmount(*d)
	}
	return muuo
}

// AddAmount adds d to the "amount" field.
func (muuo *MiningUnsoldUpdateOne) AddAmount(d decimal.Decimal) *MiningUnsoldUpdateOne {
	muuo.mutation.AddAmount(d)
	return muuo
}

// ClearAmount clears the value of the "amount" field.
func (muuo *MiningUnsoldUpdateOne) ClearAmount() *MiningUnsoldUpdateOne {
	muuo.mutation.ClearAmount()
	return muuo
}

// SetBenefitDate sets the "benefit_date" field.
func (muuo *MiningUnsoldUpdateOne) SetBenefitDate(u uint32) *MiningUnsoldUpdateOne {
	muuo.mutation.ResetBenefitDate()
	muuo.mutation.SetBenefitDate(u)
	return muuo
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (muuo *MiningUnsoldUpdateOne) SetNillableBenefitDate(u *uint32) *MiningUnsoldUpdateOne {
	if u != nil {
		muuo.SetBenefitDate(*u)
	}
	return muuo
}

// AddBenefitDate adds u to the "benefit_date" field.
func (muuo *MiningUnsoldUpdateOne) AddBenefitDate(u int32) *MiningUnsoldUpdateOne {
	muuo.mutation.AddBenefitDate(u)
	return muuo
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (muuo *MiningUnsoldUpdateOne) ClearBenefitDate() *MiningUnsoldUpdateOne {
	muuo.mutation.ClearBenefitDate()
	return muuo
}

// Mutation returns the MiningUnsoldMutation object of the builder.
func (muuo *MiningUnsoldUpdateOne) Mutation() *MiningUnsoldMutation {
	return muuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muuo *MiningUnsoldUpdateOne) Select(field string, fields ...string) *MiningUnsoldUpdateOne {
	muuo.fields = append([]string{field}, fields...)
	return muuo
}

// Save executes the query and returns the updated MiningUnsold entity.
func (muuo *MiningUnsoldUpdateOne) Save(ctx context.Context) (*MiningUnsold, error) {
	var (
		err  error
		node *MiningUnsold
	)
	if err := muuo.defaults(); err != nil {
		return nil, err
	}
	if len(muuo.hooks) == 0 {
		node, err = muuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiningUnsoldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muuo.mutation = mutation
			node, err = muuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muuo.hooks) - 1; i >= 0; i-- {
			if muuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MiningUnsold)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MiningUnsoldMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muuo *MiningUnsoldUpdateOne) SaveX(ctx context.Context) *MiningUnsold {
	node, err := muuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muuo *MiningUnsoldUpdateOne) Exec(ctx context.Context) error {
	_, err := muuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muuo *MiningUnsoldUpdateOne) ExecX(ctx context.Context) {
	if err := muuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muuo *MiningUnsoldUpdateOne) defaults() error {
	if _, ok := muuo.mutation.UpdatedAt(); !ok {
		if miningunsold.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningunsold.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := miningunsold.UpdateDefaultUpdatedAt()
		muuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (muuo *MiningUnsoldUpdateOne) sqlSave(ctx context.Context) (_node *MiningUnsold, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   miningunsold.Table,
			Columns: miningunsold.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningunsold.FieldID,
			},
		},
	}
	id, ok := muuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MiningUnsold.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, miningunsold.FieldID)
		for _, f := range fields {
			if !miningunsold.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != miningunsold.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldCreatedAt,
		})
	}
	if value, ok := muuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldCreatedAt,
		})
	}
	if value, ok := muuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldUpdatedAt,
		})
	}
	if value, ok := muuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldUpdatedAt,
		})
	}
	if value, ok := muuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldDeletedAt,
		})
	}
	if value, ok := muuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldDeletedAt,
		})
	}
	if value, ok := muuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningunsold.FieldGoodID,
		})
	}
	if muuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningunsold.FieldGoodID,
		})
	}
	if value, ok := muuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningunsold.FieldCoinTypeID,
		})
	}
	if muuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningunsold.FieldCoinTypeID,
		})
	}
	if value, ok := muuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningunsold.FieldAmount,
		})
	}
	if value, ok := muuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningunsold.FieldAmount,
		})
	}
	if muuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningunsold.FieldAmount,
		})
	}
	if value, ok := muuo.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldBenefitDate,
		})
	}
	if value, ok := muuo.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldBenefitDate,
		})
	}
	if muuo.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: miningunsold.FieldBenefitDate,
		})
	}
	_node = &MiningUnsold{config: muuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miningunsold.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
