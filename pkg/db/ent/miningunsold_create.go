// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/miningunsold"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// MiningUnsoldCreate is the builder for creating a MiningUnsold entity.
type MiningUnsoldCreate struct {
	config
	mutation *MiningUnsoldMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (muc *MiningUnsoldCreate) SetCreatedAt(u uint32) *MiningUnsoldCreate {
	muc.mutation.SetCreatedAt(u)
	return muc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muc *MiningUnsoldCreate) SetNillableCreatedAt(u *uint32) *MiningUnsoldCreate {
	if u != nil {
		muc.SetCreatedAt(*u)
	}
	return muc
}

// SetUpdatedAt sets the "updated_at" field.
func (muc *MiningUnsoldCreate) SetUpdatedAt(u uint32) *MiningUnsoldCreate {
	muc.mutation.SetUpdatedAt(u)
	return muc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (muc *MiningUnsoldCreate) SetNillableUpdatedAt(u *uint32) *MiningUnsoldCreate {
	if u != nil {
		muc.SetUpdatedAt(*u)
	}
	return muc
}

// SetDeletedAt sets the "deleted_at" field.
func (muc *MiningUnsoldCreate) SetDeletedAt(u uint32) *MiningUnsoldCreate {
	muc.mutation.SetDeletedAt(u)
	return muc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muc *MiningUnsoldCreate) SetNillableDeletedAt(u *uint32) *MiningUnsoldCreate {
	if u != nil {
		muc.SetDeletedAt(*u)
	}
	return muc
}

// SetGoodID sets the "good_id" field.
func (muc *MiningUnsoldCreate) SetGoodID(u uuid.UUID) *MiningUnsoldCreate {
	muc.mutation.SetGoodID(u)
	return muc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (muc *MiningUnsoldCreate) SetNillableGoodID(u *uuid.UUID) *MiningUnsoldCreate {
	if u != nil {
		muc.SetGoodID(*u)
	}
	return muc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (muc *MiningUnsoldCreate) SetCoinTypeID(u uuid.UUID) *MiningUnsoldCreate {
	muc.mutation.SetCoinTypeID(u)
	return muc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (muc *MiningUnsoldCreate) SetNillableCoinTypeID(u *uuid.UUID) *MiningUnsoldCreate {
	if u != nil {
		muc.SetCoinTypeID(*u)
	}
	return muc
}

// SetAmount sets the "amount" field.
func (muc *MiningUnsoldCreate) SetAmount(d decimal.Decimal) *MiningUnsoldCreate {
	muc.mutation.SetAmount(d)
	return muc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (muc *MiningUnsoldCreate) SetNillableAmount(d *decimal.Decimal) *MiningUnsoldCreate {
	if d != nil {
		muc.SetAmount(*d)
	}
	return muc
}

// SetBenefitDate sets the "benefit_date" field.
func (muc *MiningUnsoldCreate) SetBenefitDate(u uint32) *MiningUnsoldCreate {
	muc.mutation.SetBenefitDate(u)
	return muc
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (muc *MiningUnsoldCreate) SetNillableBenefitDate(u *uint32) *MiningUnsoldCreate {
	if u != nil {
		muc.SetBenefitDate(*u)
	}
	return muc
}

// SetID sets the "id" field.
func (muc *MiningUnsoldCreate) SetID(u uuid.UUID) *MiningUnsoldCreate {
	muc.mutation.SetID(u)
	return muc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (muc *MiningUnsoldCreate) SetNillableID(u *uuid.UUID) *MiningUnsoldCreate {
	if u != nil {
		muc.SetID(*u)
	}
	return muc
}

// Mutation returns the MiningUnsoldMutation object of the builder.
func (muc *MiningUnsoldCreate) Mutation() *MiningUnsoldMutation {
	return muc.mutation
}

// Save creates the MiningUnsold in the database.
func (muc *MiningUnsoldCreate) Save(ctx context.Context) (*MiningUnsold, error) {
	var (
		err  error
		node *MiningUnsold
	)
	if err := muc.defaults(); err != nil {
		return nil, err
	}
	if len(muc.hooks) == 0 {
		if err = muc.check(); err != nil {
			return nil, err
		}
		node, err = muc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiningUnsoldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muc.check(); err != nil {
				return nil, err
			}
			muc.mutation = mutation
			if node, err = muc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(muc.hooks) - 1; i >= 0; i-- {
			if muc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MiningUnsold)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MiningUnsoldMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (muc *MiningUnsoldCreate) SaveX(ctx context.Context) *MiningUnsold {
	v, err := muc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (muc *MiningUnsoldCreate) Exec(ctx context.Context) error {
	_, err := muc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muc *MiningUnsoldCreate) ExecX(ctx context.Context) {
	if err := muc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muc *MiningUnsoldCreate) defaults() error {
	if _, ok := muc.mutation.CreatedAt(); !ok {
		if miningunsold.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningunsold.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := miningunsold.DefaultCreatedAt()
		muc.mutation.SetCreatedAt(v)
	}
	if _, ok := muc.mutation.UpdatedAt(); !ok {
		if miningunsold.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningunsold.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := miningunsold.DefaultUpdatedAt()
		muc.mutation.SetUpdatedAt(v)
	}
	if _, ok := muc.mutation.DeletedAt(); !ok {
		if miningunsold.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized miningunsold.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := miningunsold.DefaultDeletedAt()
		muc.mutation.SetDeletedAt(v)
	}
	if _, ok := muc.mutation.GoodID(); !ok {
		if miningunsold.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized miningunsold.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := miningunsold.DefaultGoodID()
		muc.mutation.SetGoodID(v)
	}
	if _, ok := muc.mutation.CoinTypeID(); !ok {
		if miningunsold.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized miningunsold.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := miningunsold.DefaultCoinTypeID()
		muc.mutation.SetCoinTypeID(v)
	}
	if _, ok := muc.mutation.BenefitDate(); !ok {
		v := miningunsold.DefaultBenefitDate
		muc.mutation.SetBenefitDate(v)
	}
	if _, ok := muc.mutation.ID(); !ok {
		if miningunsold.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized miningunsold.DefaultID (forgotten import ent/runtime?)")
		}
		v := miningunsold.DefaultID()
		muc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (muc *MiningUnsoldCreate) check() error {
	if _, ok := muc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MiningUnsold.created_at"`)}
	}
	if _, ok := muc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MiningUnsold.updated_at"`)}
	}
	if _, ok := muc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "MiningUnsold.deleted_at"`)}
	}
	return nil
}

func (muc *MiningUnsoldCreate) sqlSave(ctx context.Context) (*MiningUnsold, error) {
	_node, _spec := muc.createSpec()
	if err := sqlgraph.CreateNode(ctx, muc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (muc *MiningUnsoldCreate) createSpec() (*MiningUnsold, *sqlgraph.CreateSpec) {
	var (
		_node = &MiningUnsold{config: muc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: miningunsold.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningunsold.FieldID,
			},
		}
	)
	_spec.OnConflict = muc.conflict
	if id, ok := muc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := muc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := muc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := muc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := muc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningunsold.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := muc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningunsold.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := muc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningunsold.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := muc.mutation.BenefitDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningunsold.FieldBenefitDate,
		})
		_node.BenefitDate = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MiningUnsold.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MiningUnsoldUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (muc *MiningUnsoldCreate) OnConflict(opts ...sql.ConflictOption) *MiningUnsoldUpsertOne {
	muc.conflict = opts
	return &MiningUnsoldUpsertOne{
		create: muc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MiningUnsold.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (muc *MiningUnsoldCreate) OnConflictColumns(columns ...string) *MiningUnsoldUpsertOne {
	muc.conflict = append(muc.conflict, sql.ConflictColumns(columns...))
	return &MiningUnsoldUpsertOne{
		create: muc,
	}
}

type (
	// MiningUnsoldUpsertOne is the builder for "upsert"-ing
	//  one MiningUnsold node.
	MiningUnsoldUpsertOne struct {
		create *MiningUnsoldCreate
	}

	// MiningUnsoldUpsert is the "OnConflict" setter.
	MiningUnsoldUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *MiningUnsoldUpsert) SetCreatedAt(v uint32) *MiningUnsoldUpsert {
	u.Set(miningunsold.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MiningUnsoldUpsert) UpdateCreatedAt() *MiningUnsoldUpsert {
	u.SetExcluded(miningunsold.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MiningUnsoldUpsert) AddCreatedAt(v uint32) *MiningUnsoldUpsert {
	u.Add(miningunsold.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MiningUnsoldUpsert) SetUpdatedAt(v uint32) *MiningUnsoldUpsert {
	u.Set(miningunsold.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MiningUnsoldUpsert) UpdateUpdatedAt() *MiningUnsoldUpsert {
	u.SetExcluded(miningunsold.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MiningUnsoldUpsert) AddUpdatedAt(v uint32) *MiningUnsoldUpsert {
	u.Add(miningunsold.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MiningUnsoldUpsert) SetDeletedAt(v uint32) *MiningUnsoldUpsert {
	u.Set(miningunsold.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MiningUnsoldUpsert) UpdateDeletedAt() *MiningUnsoldUpsert {
	u.SetExcluded(miningunsold.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MiningUnsoldUpsert) AddDeletedAt(v uint32) *MiningUnsoldUpsert {
	u.Add(miningunsold.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *MiningUnsoldUpsert) SetGoodID(v uuid.UUID) *MiningUnsoldUpsert {
	u.Set(miningunsold.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *MiningUnsoldUpsert) UpdateGoodID() *MiningUnsoldUpsert {
	u.SetExcluded(miningunsold.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *MiningUnsoldUpsert) ClearGoodID() *MiningUnsoldUpsert {
	u.SetNull(miningunsold.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *MiningUnsoldUpsert) SetCoinTypeID(v uuid.UUID) *MiningUnsoldUpsert {
	u.Set(miningunsold.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *MiningUnsoldUpsert) UpdateCoinTypeID() *MiningUnsoldUpsert {
	u.SetExcluded(miningunsold.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *MiningUnsoldUpsert) ClearCoinTypeID() *MiningUnsoldUpsert {
	u.SetNull(miningunsold.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *MiningUnsoldUpsert) SetAmount(v decimal.Decimal) *MiningUnsoldUpsert {
	u.Set(miningunsold.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *MiningUnsoldUpsert) UpdateAmount() *MiningUnsoldUpsert {
	u.SetExcluded(miningunsold.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *MiningUnsoldUpsert) AddAmount(v decimal.Decimal) *MiningUnsoldUpsert {
	u.Add(miningunsold.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *MiningUnsoldUpsert) ClearAmount() *MiningUnsoldUpsert {
	u.SetNull(miningunsold.FieldAmount)
	return u
}

// SetBenefitDate sets the "benefit_date" field.
func (u *MiningUnsoldUpsert) SetBenefitDate(v uint32) *MiningUnsoldUpsert {
	u.Set(miningunsold.FieldBenefitDate, v)
	return u
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *MiningUnsoldUpsert) UpdateBenefitDate() *MiningUnsoldUpsert {
	u.SetExcluded(miningunsold.FieldBenefitDate)
	return u
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *MiningUnsoldUpsert) AddBenefitDate(v uint32) *MiningUnsoldUpsert {
	u.Add(miningunsold.FieldBenefitDate, v)
	return u
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *MiningUnsoldUpsert) ClearBenefitDate() *MiningUnsoldUpsert {
	u.SetNull(miningunsold.FieldBenefitDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MiningUnsold.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(miningunsold.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MiningUnsoldUpsertOne) UpdateNewValues() *MiningUnsoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(miningunsold.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.MiningUnsold.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MiningUnsoldUpsertOne) Ignore() *MiningUnsoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MiningUnsoldUpsertOne) DoNothing() *MiningUnsoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MiningUnsoldCreate.OnConflict
// documentation for more info.
func (u *MiningUnsoldUpsertOne) Update(set func(*MiningUnsoldUpsert)) *MiningUnsoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MiningUnsoldUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MiningUnsoldUpsertOne) SetCreatedAt(v uint32) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MiningUnsoldUpsertOne) AddCreatedAt(v uint32) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MiningUnsoldUpsertOne) UpdateCreatedAt() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MiningUnsoldUpsertOne) SetUpdatedAt(v uint32) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MiningUnsoldUpsertOne) AddUpdatedAt(v uint32) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MiningUnsoldUpsertOne) UpdateUpdatedAt() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MiningUnsoldUpsertOne) SetDeletedAt(v uint32) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MiningUnsoldUpsertOne) AddDeletedAt(v uint32) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MiningUnsoldUpsertOne) UpdateDeletedAt() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *MiningUnsoldUpsertOne) SetGoodID(v uuid.UUID) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *MiningUnsoldUpsertOne) UpdateGoodID() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *MiningUnsoldUpsertOne) ClearGoodID() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *MiningUnsoldUpsertOne) SetCoinTypeID(v uuid.UUID) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *MiningUnsoldUpsertOne) UpdateCoinTypeID() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *MiningUnsoldUpsertOne) ClearCoinTypeID() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *MiningUnsoldUpsertOne) SetAmount(v decimal.Decimal) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *MiningUnsoldUpsertOne) AddAmount(v decimal.Decimal) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *MiningUnsoldUpsertOne) UpdateAmount() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *MiningUnsoldUpsertOne) ClearAmount() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.ClearAmount()
	})
}

// SetBenefitDate sets the "benefit_date" field.
func (u *MiningUnsoldUpsertOne) SetBenefitDate(v uint32) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetBenefitDate(v)
	})
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *MiningUnsoldUpsertOne) AddBenefitDate(v uint32) *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.AddBenefitDate(v)
	})
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *MiningUnsoldUpsertOne) UpdateBenefitDate() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateBenefitDate()
	})
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *MiningUnsoldUpsertOne) ClearBenefitDate() *MiningUnsoldUpsertOne {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.ClearBenefitDate()
	})
}

// Exec executes the query.
func (u *MiningUnsoldUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MiningUnsoldCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MiningUnsoldUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MiningUnsoldUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MiningUnsoldUpsertOne.ID is not supported by MySQL driver. Use MiningUnsoldUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MiningUnsoldUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MiningUnsoldCreateBulk is the builder for creating many MiningUnsold entities in bulk.
type MiningUnsoldCreateBulk struct {
	config
	builders []*MiningUnsoldCreate
	conflict []sql.ConflictOption
}

// Save creates the MiningUnsold entities in the database.
func (mucb *MiningUnsoldCreateBulk) Save(ctx context.Context) ([]*MiningUnsold, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mucb.builders))
	nodes := make([]*MiningUnsold, len(mucb.builders))
	mutators := make([]Mutator, len(mucb.builders))
	for i := range mucb.builders {
		func(i int, root context.Context) {
			builder := mucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MiningUnsoldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mucb *MiningUnsoldCreateBulk) SaveX(ctx context.Context) []*MiningUnsold {
	v, err := mucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mucb *MiningUnsoldCreateBulk) Exec(ctx context.Context) error {
	_, err := mucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mucb *MiningUnsoldCreateBulk) ExecX(ctx context.Context) {
	if err := mucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MiningUnsold.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MiningUnsoldUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (mucb *MiningUnsoldCreateBulk) OnConflict(opts ...sql.ConflictOption) *MiningUnsoldUpsertBulk {
	mucb.conflict = opts
	return &MiningUnsoldUpsertBulk{
		create: mucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MiningUnsold.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mucb *MiningUnsoldCreateBulk) OnConflictColumns(columns ...string) *MiningUnsoldUpsertBulk {
	mucb.conflict = append(mucb.conflict, sql.ConflictColumns(columns...))
	return &MiningUnsoldUpsertBulk{
		create: mucb,
	}
}

// MiningUnsoldUpsertBulk is the builder for "upsert"-ing
// a bulk of MiningUnsold nodes.
type MiningUnsoldUpsertBulk struct {
	create *MiningUnsoldCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MiningUnsold.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(miningunsold.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MiningUnsoldUpsertBulk) UpdateNewValues() *MiningUnsoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(miningunsold.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MiningUnsold.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MiningUnsoldUpsertBulk) Ignore() *MiningUnsoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MiningUnsoldUpsertBulk) DoNothing() *MiningUnsoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MiningUnsoldCreateBulk.OnConflict
// documentation for more info.
func (u *MiningUnsoldUpsertBulk) Update(set func(*MiningUnsoldUpsert)) *MiningUnsoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MiningUnsoldUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MiningUnsoldUpsertBulk) SetCreatedAt(v uint32) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MiningUnsoldUpsertBulk) AddCreatedAt(v uint32) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MiningUnsoldUpsertBulk) UpdateCreatedAt() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MiningUnsoldUpsertBulk) SetUpdatedAt(v uint32) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MiningUnsoldUpsertBulk) AddUpdatedAt(v uint32) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MiningUnsoldUpsertBulk) UpdateUpdatedAt() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MiningUnsoldUpsertBulk) SetDeletedAt(v uint32) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MiningUnsoldUpsertBulk) AddDeletedAt(v uint32) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MiningUnsoldUpsertBulk) UpdateDeletedAt() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *MiningUnsoldUpsertBulk) SetGoodID(v uuid.UUID) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *MiningUnsoldUpsertBulk) UpdateGoodID() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *MiningUnsoldUpsertBulk) ClearGoodID() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *MiningUnsoldUpsertBulk) SetCoinTypeID(v uuid.UUID) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *MiningUnsoldUpsertBulk) UpdateCoinTypeID() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *MiningUnsoldUpsertBulk) ClearCoinTypeID() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *MiningUnsoldUpsertBulk) SetAmount(v decimal.Decimal) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *MiningUnsoldUpsertBulk) AddAmount(v decimal.Decimal) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *MiningUnsoldUpsertBulk) UpdateAmount() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *MiningUnsoldUpsertBulk) ClearAmount() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.ClearAmount()
	})
}

// SetBenefitDate sets the "benefit_date" field.
func (u *MiningUnsoldUpsertBulk) SetBenefitDate(v uint32) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.SetBenefitDate(v)
	})
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *MiningUnsoldUpsertBulk) AddBenefitDate(v uint32) *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.AddBenefitDate(v)
	})
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *MiningUnsoldUpsertBulk) UpdateBenefitDate() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.UpdateBenefitDate()
	})
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *MiningUnsoldUpsertBulk) ClearBenefitDate() *MiningUnsoldUpsertBulk {
	return u.Update(func(s *MiningUnsoldUpsert) {
		s.ClearBenefitDate()
	})
}

// Exec executes the query.
func (u *MiningUnsoldUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MiningUnsoldCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MiningUnsoldCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MiningUnsoldUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
