// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/ledger"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// LedgerCreate is the builder for creating a Ledger entity.
type LedgerCreate struct {
	config
	mutation *LedgerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (lc *LedgerCreate) SetCreatedAt(u uint32) *LedgerCreate {
	lc.mutation.SetCreatedAt(u)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableCreatedAt(u *uint32) *LedgerCreate {
	if u != nil {
		lc.SetCreatedAt(*u)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LedgerCreate) SetUpdatedAt(u uint32) *LedgerCreate {
	lc.mutation.SetUpdatedAt(u)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableUpdatedAt(u *uint32) *LedgerCreate {
	if u != nil {
		lc.SetUpdatedAt(*u)
	}
	return lc
}

// SetDeletedAt sets the "deleted_at" field.
func (lc *LedgerCreate) SetDeletedAt(u uint32) *LedgerCreate {
	lc.mutation.SetDeletedAt(u)
	return lc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableDeletedAt(u *uint32) *LedgerCreate {
	if u != nil {
		lc.SetDeletedAt(*u)
	}
	return lc
}

// SetEntID sets the "ent_id" field.
func (lc *LedgerCreate) SetEntID(u uuid.UUID) *LedgerCreate {
	lc.mutation.SetEntID(u)
	return lc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableEntID(u *uuid.UUID) *LedgerCreate {
	if u != nil {
		lc.SetEntID(*u)
	}
	return lc
}

// SetAppID sets the "app_id" field.
func (lc *LedgerCreate) SetAppID(u uuid.UUID) *LedgerCreate {
	lc.mutation.SetAppID(u)
	return lc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableAppID(u *uuid.UUID) *LedgerCreate {
	if u != nil {
		lc.SetAppID(*u)
	}
	return lc
}

// SetUserID sets the "user_id" field.
func (lc *LedgerCreate) SetUserID(u uuid.UUID) *LedgerCreate {
	lc.mutation.SetUserID(u)
	return lc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableUserID(u *uuid.UUID) *LedgerCreate {
	if u != nil {
		lc.SetUserID(*u)
	}
	return lc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (lc *LedgerCreate) SetCoinTypeID(u uuid.UUID) *LedgerCreate {
	lc.mutation.SetCoinTypeID(u)
	return lc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableCoinTypeID(u *uuid.UUID) *LedgerCreate {
	if u != nil {
		lc.SetCoinTypeID(*u)
	}
	return lc
}

// SetIncoming sets the "incoming" field.
func (lc *LedgerCreate) SetIncoming(d decimal.Decimal) *LedgerCreate {
	lc.mutation.SetIncoming(d)
	return lc
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableIncoming(d *decimal.Decimal) *LedgerCreate {
	if d != nil {
		lc.SetIncoming(*d)
	}
	return lc
}

// SetLocked sets the "locked" field.
func (lc *LedgerCreate) SetLocked(d decimal.Decimal) *LedgerCreate {
	lc.mutation.SetLocked(d)
	return lc
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableLocked(d *decimal.Decimal) *LedgerCreate {
	if d != nil {
		lc.SetLocked(*d)
	}
	return lc
}

// SetOutcoming sets the "outcoming" field.
func (lc *LedgerCreate) SetOutcoming(d decimal.Decimal) *LedgerCreate {
	lc.mutation.SetOutcoming(d)
	return lc
}

// SetNillableOutcoming sets the "outcoming" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableOutcoming(d *decimal.Decimal) *LedgerCreate {
	if d != nil {
		lc.SetOutcoming(*d)
	}
	return lc
}

// SetSpendable sets the "spendable" field.
func (lc *LedgerCreate) SetSpendable(d decimal.Decimal) *LedgerCreate {
	lc.mutation.SetSpendable(d)
	return lc
}

// SetNillableSpendable sets the "spendable" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableSpendable(d *decimal.Decimal) *LedgerCreate {
	if d != nil {
		lc.SetSpendable(*d)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LedgerCreate) SetID(u uint32) *LedgerCreate {
	lc.mutation.SetID(u)
	return lc
}

// Mutation returns the LedgerMutation object of the builder.
func (lc *LedgerCreate) Mutation() *LedgerMutation {
	return lc.mutation
}

// Save creates the Ledger in the database.
func (lc *LedgerCreate) Save(ctx context.Context) (*Ledger, error) {
	var (
		err  error
		node *Ledger
	)
	if err := lc.defaults(); err != nil {
		return nil, err
	}
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LedgerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			if node, err = lc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			if lc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ledger)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LedgerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LedgerCreate) SaveX(ctx context.Context) *Ledger {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LedgerCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LedgerCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LedgerCreate) defaults() error {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		if ledger.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized ledger.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := ledger.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		if ledger.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ledger.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ledger.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.DeletedAt(); !ok {
		if ledger.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized ledger.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := ledger.DefaultDeletedAt()
		lc.mutation.SetDeletedAt(v)
	}
	if _, ok := lc.mutation.EntID(); !ok {
		if ledger.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized ledger.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := ledger.DefaultEntID()
		lc.mutation.SetEntID(v)
	}
	if _, ok := lc.mutation.AppID(); !ok {
		if ledger.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized ledger.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := ledger.DefaultAppID()
		lc.mutation.SetAppID(v)
	}
	if _, ok := lc.mutation.UserID(); !ok {
		if ledger.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized ledger.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := ledger.DefaultUserID()
		lc.mutation.SetUserID(v)
	}
	if _, ok := lc.mutation.CoinTypeID(); !ok {
		if ledger.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized ledger.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := ledger.DefaultCoinTypeID()
		lc.mutation.SetCoinTypeID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lc *LedgerCreate) check() error {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Ledger.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Ledger.updated_at"`)}
	}
	if _, ok := lc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Ledger.deleted_at"`)}
	}
	if _, ok := lc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Ledger.ent_id"`)}
	}
	return nil
}

func (lc *LedgerCreate) sqlSave(ctx context.Context) (*Ledger, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (lc *LedgerCreate) createSpec() (*Ledger, *sqlgraph.CreateSpec) {
	var (
		_node = &Ledger{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ledger.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: ledger.FieldID,
			},
		}
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ledger.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ledger.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ledger.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := lc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: ledger.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := lc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: ledger.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := lc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: ledger.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := lc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: ledger.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := lc.mutation.Incoming(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ledger.FieldIncoming,
		})
		_node.Incoming = value
	}
	if value, ok := lc.mutation.Locked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ledger.FieldLocked,
		})
		_node.Locked = value
	}
	if value, ok := lc.mutation.Outcoming(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ledger.FieldOutcoming,
		})
		_node.Outcoming = value
	}
	if value, ok := lc.mutation.Spendable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ledger.FieldSpendable,
		})
		_node.Spendable = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ledger.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LedgerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (lc *LedgerCreate) OnConflict(opts ...sql.ConflictOption) *LedgerUpsertOne {
	lc.conflict = opts
	return &LedgerUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ledger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lc *LedgerCreate) OnConflictColumns(columns ...string) *LedgerUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LedgerUpsertOne{
		create: lc,
	}
}

type (
	// LedgerUpsertOne is the builder for "upsert"-ing
	//  one Ledger node.
	LedgerUpsertOne struct {
		create *LedgerCreate
	}

	// LedgerUpsert is the "OnConflict" setter.
	LedgerUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *LedgerUpsert) SetCreatedAt(v uint32) *LedgerUpsert {
	u.Set(ledger.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateCreatedAt() *LedgerUpsert {
	u.SetExcluded(ledger.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LedgerUpsert) AddCreatedAt(v uint32) *LedgerUpsert {
	u.Add(ledger.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LedgerUpsert) SetUpdatedAt(v uint32) *LedgerUpsert {
	u.Set(ledger.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateUpdatedAt() *LedgerUpsert {
	u.SetExcluded(ledger.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LedgerUpsert) AddUpdatedAt(v uint32) *LedgerUpsert {
	u.Add(ledger.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LedgerUpsert) SetDeletedAt(v uint32) *LedgerUpsert {
	u.Set(ledger.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateDeletedAt() *LedgerUpsert {
	u.SetExcluded(ledger.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LedgerUpsert) AddDeletedAt(v uint32) *LedgerUpsert {
	u.Add(ledger.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *LedgerUpsert) SetEntID(v uuid.UUID) *LedgerUpsert {
	u.Set(ledger.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateEntID() *LedgerUpsert {
	u.SetExcluded(ledger.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *LedgerUpsert) SetAppID(v uuid.UUID) *LedgerUpsert {
	u.Set(ledger.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateAppID() *LedgerUpsert {
	u.SetExcluded(ledger.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *LedgerUpsert) ClearAppID() *LedgerUpsert {
	u.SetNull(ledger.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *LedgerUpsert) SetUserID(v uuid.UUID) *LedgerUpsert {
	u.Set(ledger.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateUserID() *LedgerUpsert {
	u.SetExcluded(ledger.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *LedgerUpsert) ClearUserID() *LedgerUpsert {
	u.SetNull(ledger.FieldUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *LedgerUpsert) SetCoinTypeID(v uuid.UUID) *LedgerUpsert {
	u.Set(ledger.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateCoinTypeID() *LedgerUpsert {
	u.SetExcluded(ledger.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *LedgerUpsert) ClearCoinTypeID() *LedgerUpsert {
	u.SetNull(ledger.FieldCoinTypeID)
	return u
}

// SetIncoming sets the "incoming" field.
func (u *LedgerUpsert) SetIncoming(v decimal.Decimal) *LedgerUpsert {
	u.Set(ledger.FieldIncoming, v)
	return u
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateIncoming() *LedgerUpsert {
	u.SetExcluded(ledger.FieldIncoming)
	return u
}

// AddIncoming adds v to the "incoming" field.
func (u *LedgerUpsert) AddIncoming(v decimal.Decimal) *LedgerUpsert {
	u.Add(ledger.FieldIncoming, v)
	return u
}

// ClearIncoming clears the value of the "incoming" field.
func (u *LedgerUpsert) ClearIncoming() *LedgerUpsert {
	u.SetNull(ledger.FieldIncoming)
	return u
}

// SetLocked sets the "locked" field.
func (u *LedgerUpsert) SetLocked(v decimal.Decimal) *LedgerUpsert {
	u.Set(ledger.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateLocked() *LedgerUpsert {
	u.SetExcluded(ledger.FieldLocked)
	return u
}

// AddLocked adds v to the "locked" field.
func (u *LedgerUpsert) AddLocked(v decimal.Decimal) *LedgerUpsert {
	u.Add(ledger.FieldLocked, v)
	return u
}

// ClearLocked clears the value of the "locked" field.
func (u *LedgerUpsert) ClearLocked() *LedgerUpsert {
	u.SetNull(ledger.FieldLocked)
	return u
}

// SetOutcoming sets the "outcoming" field.
func (u *LedgerUpsert) SetOutcoming(v decimal.Decimal) *LedgerUpsert {
	u.Set(ledger.FieldOutcoming, v)
	return u
}

// UpdateOutcoming sets the "outcoming" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateOutcoming() *LedgerUpsert {
	u.SetExcluded(ledger.FieldOutcoming)
	return u
}

// AddOutcoming adds v to the "outcoming" field.
func (u *LedgerUpsert) AddOutcoming(v decimal.Decimal) *LedgerUpsert {
	u.Add(ledger.FieldOutcoming, v)
	return u
}

// ClearOutcoming clears the value of the "outcoming" field.
func (u *LedgerUpsert) ClearOutcoming() *LedgerUpsert {
	u.SetNull(ledger.FieldOutcoming)
	return u
}

// SetSpendable sets the "spendable" field.
func (u *LedgerUpsert) SetSpendable(v decimal.Decimal) *LedgerUpsert {
	u.Set(ledger.FieldSpendable, v)
	return u
}

// UpdateSpendable sets the "spendable" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateSpendable() *LedgerUpsert {
	u.SetExcluded(ledger.FieldSpendable)
	return u
}

// AddSpendable adds v to the "spendable" field.
func (u *LedgerUpsert) AddSpendable(v decimal.Decimal) *LedgerUpsert {
	u.Add(ledger.FieldSpendable, v)
	return u
}

// ClearSpendable clears the value of the "spendable" field.
func (u *LedgerUpsert) ClearSpendable() *LedgerUpsert {
	u.SetNull(ledger.FieldSpendable)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Ledger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ledger.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LedgerUpsertOne) UpdateNewValues() *LedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ledger.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Ledger.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *LedgerUpsertOne) Ignore() *LedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LedgerUpsertOne) DoNothing() *LedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LedgerCreate.OnConflict
// documentation for more info.
func (u *LedgerUpsertOne) Update(set func(*LedgerUpsert)) *LedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LedgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LedgerUpsertOne) SetCreatedAt(v uint32) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LedgerUpsertOne) AddCreatedAt(v uint32) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateCreatedAt() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LedgerUpsertOne) SetUpdatedAt(v uint32) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LedgerUpsertOne) AddUpdatedAt(v uint32) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateUpdatedAt() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LedgerUpsertOne) SetDeletedAt(v uint32) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LedgerUpsertOne) AddDeletedAt(v uint32) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateDeletedAt() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *LedgerUpsertOne) SetEntID(v uuid.UUID) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateEntID() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *LedgerUpsertOne) SetAppID(v uuid.UUID) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateAppID() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *LedgerUpsertOne) ClearAppID() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *LedgerUpsertOne) SetUserID(v uuid.UUID) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateUserID() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *LedgerUpsertOne) ClearUserID() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *LedgerUpsertOne) SetCoinTypeID(v uuid.UUID) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateCoinTypeID() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *LedgerUpsertOne) ClearCoinTypeID() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetIncoming sets the "incoming" field.
func (u *LedgerUpsertOne) SetIncoming(v decimal.Decimal) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetIncoming(v)
	})
}

// AddIncoming adds v to the "incoming" field.
func (u *LedgerUpsertOne) AddIncoming(v decimal.Decimal) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.AddIncoming(v)
	})
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateIncoming() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateIncoming()
	})
}

// ClearIncoming clears the value of the "incoming" field.
func (u *LedgerUpsertOne) ClearIncoming() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearIncoming()
	})
}

// SetLocked sets the "locked" field.
func (u *LedgerUpsertOne) SetLocked(v decimal.Decimal) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetLocked(v)
	})
}

// AddLocked adds v to the "locked" field.
func (u *LedgerUpsertOne) AddLocked(v decimal.Decimal) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.AddLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateLocked() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *LedgerUpsertOne) ClearLocked() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearLocked()
	})
}

// SetOutcoming sets the "outcoming" field.
func (u *LedgerUpsertOne) SetOutcoming(v decimal.Decimal) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetOutcoming(v)
	})
}

// AddOutcoming adds v to the "outcoming" field.
func (u *LedgerUpsertOne) AddOutcoming(v decimal.Decimal) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.AddOutcoming(v)
	})
}

// UpdateOutcoming sets the "outcoming" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateOutcoming() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateOutcoming()
	})
}

// ClearOutcoming clears the value of the "outcoming" field.
func (u *LedgerUpsertOne) ClearOutcoming() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearOutcoming()
	})
}

// SetSpendable sets the "spendable" field.
func (u *LedgerUpsertOne) SetSpendable(v decimal.Decimal) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetSpendable(v)
	})
}

// AddSpendable adds v to the "spendable" field.
func (u *LedgerUpsertOne) AddSpendable(v decimal.Decimal) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.AddSpendable(v)
	})
}

// UpdateSpendable sets the "spendable" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateSpendable() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateSpendable()
	})
}

// ClearSpendable clears the value of the "spendable" field.
func (u *LedgerUpsertOne) ClearSpendable() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearSpendable()
	})
}

// Exec executes the query.
func (u *LedgerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LedgerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LedgerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LedgerUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LedgerUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LedgerCreateBulk is the builder for creating many Ledger entities in bulk.
type LedgerCreateBulk struct {
	config
	builders []*LedgerCreate
	conflict []sql.ConflictOption
}

// Save creates the Ledger entities in the database.
func (lcb *LedgerCreateBulk) Save(ctx context.Context) ([]*Ledger, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Ledger, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LedgerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LedgerCreateBulk) SaveX(ctx context.Context) []*Ledger {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LedgerCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LedgerCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ledger.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LedgerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (lcb *LedgerCreateBulk) OnConflict(opts ...sql.ConflictOption) *LedgerUpsertBulk {
	lcb.conflict = opts
	return &LedgerUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ledger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lcb *LedgerCreateBulk) OnConflictColumns(columns ...string) *LedgerUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LedgerUpsertBulk{
		create: lcb,
	}
}

// LedgerUpsertBulk is the builder for "upsert"-ing
// a bulk of Ledger nodes.
type LedgerUpsertBulk struct {
	create *LedgerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ledger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ledger.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LedgerUpsertBulk) UpdateNewValues() *LedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ledger.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ledger.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *LedgerUpsertBulk) Ignore() *LedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LedgerUpsertBulk) DoNothing() *LedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LedgerCreateBulk.OnConflict
// documentation for more info.
func (u *LedgerUpsertBulk) Update(set func(*LedgerUpsert)) *LedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LedgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LedgerUpsertBulk) SetCreatedAt(v uint32) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LedgerUpsertBulk) AddCreatedAt(v uint32) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateCreatedAt() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LedgerUpsertBulk) SetUpdatedAt(v uint32) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LedgerUpsertBulk) AddUpdatedAt(v uint32) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateUpdatedAt() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LedgerUpsertBulk) SetDeletedAt(v uint32) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LedgerUpsertBulk) AddDeletedAt(v uint32) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateDeletedAt() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *LedgerUpsertBulk) SetEntID(v uuid.UUID) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateEntID() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *LedgerUpsertBulk) SetAppID(v uuid.UUID) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateAppID() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *LedgerUpsertBulk) ClearAppID() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *LedgerUpsertBulk) SetUserID(v uuid.UUID) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateUserID() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *LedgerUpsertBulk) ClearUserID() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *LedgerUpsertBulk) SetCoinTypeID(v uuid.UUID) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateCoinTypeID() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *LedgerUpsertBulk) ClearCoinTypeID() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetIncoming sets the "incoming" field.
func (u *LedgerUpsertBulk) SetIncoming(v decimal.Decimal) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetIncoming(v)
	})
}

// AddIncoming adds v to the "incoming" field.
func (u *LedgerUpsertBulk) AddIncoming(v decimal.Decimal) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.AddIncoming(v)
	})
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateIncoming() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateIncoming()
	})
}

// ClearIncoming clears the value of the "incoming" field.
func (u *LedgerUpsertBulk) ClearIncoming() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearIncoming()
	})
}

// SetLocked sets the "locked" field.
func (u *LedgerUpsertBulk) SetLocked(v decimal.Decimal) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetLocked(v)
	})
}

// AddLocked adds v to the "locked" field.
func (u *LedgerUpsertBulk) AddLocked(v decimal.Decimal) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.AddLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateLocked() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *LedgerUpsertBulk) ClearLocked() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearLocked()
	})
}

// SetOutcoming sets the "outcoming" field.
func (u *LedgerUpsertBulk) SetOutcoming(v decimal.Decimal) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetOutcoming(v)
	})
}

// AddOutcoming adds v to the "outcoming" field.
func (u *LedgerUpsertBulk) AddOutcoming(v decimal.Decimal) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.AddOutcoming(v)
	})
}

// UpdateOutcoming sets the "outcoming" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateOutcoming() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateOutcoming()
	})
}

// ClearOutcoming clears the value of the "outcoming" field.
func (u *LedgerUpsertBulk) ClearOutcoming() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearOutcoming()
	})
}

// SetSpendable sets the "spendable" field.
func (u *LedgerUpsertBulk) SetSpendable(v decimal.Decimal) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetSpendable(v)
	})
}

// AddSpendable adds v to the "spendable" field.
func (u *LedgerUpsertBulk) AddSpendable(v decimal.Decimal) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.AddSpendable(v)
	})
}

// UpdateSpendable sets the "spendable" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateSpendable() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateSpendable()
	})
}

// ClearSpendable clears the value of the "spendable" field.
func (u *LedgerUpsertBulk) ClearSpendable() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.ClearSpendable()
	})
}

// Exec executes the query.
func (u *LedgerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LedgerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LedgerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LedgerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
