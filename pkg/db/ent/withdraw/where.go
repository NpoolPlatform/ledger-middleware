// Code generated by ent, DO NOT EDIT.

package withdraw

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// PlatformTransactionID applies equality check predicate on the "platform_transaction_id" field. It's identical to PlatformTransactionIDEQ.
func PlatformTransactionID(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformTransactionID), v))
	})
}

// ChainTransactionID applies equality check predicate on the "chain_transaction_id" field. It's identical to ChainTransactionIDEQ.
func ChainTransactionID(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainTransactionID), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// ReviewID applies equality check predicate on the "review_id" field. It's identical to ReviewIDEQ.
func ReviewID(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinTypeID)))
	})
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinTypeID)))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountID)))
	})
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountID)))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddress)))
	})
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddress)))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// PlatformTransactionIDEQ applies the EQ predicate on the "platform_transaction_id" field.
func PlatformTransactionIDEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformTransactionID), v))
	})
}

// PlatformTransactionIDNEQ applies the NEQ predicate on the "platform_transaction_id" field.
func PlatformTransactionIDNEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformTransactionID), v))
	})
}

// PlatformTransactionIDIn applies the In predicate on the "platform_transaction_id" field.
func PlatformTransactionIDIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatformTransactionID), v...))
	})
}

// PlatformTransactionIDNotIn applies the NotIn predicate on the "platform_transaction_id" field.
func PlatformTransactionIDNotIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatformTransactionID), v...))
	})
}

// PlatformTransactionIDGT applies the GT predicate on the "platform_transaction_id" field.
func PlatformTransactionIDGT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformTransactionID), v))
	})
}

// PlatformTransactionIDGTE applies the GTE predicate on the "platform_transaction_id" field.
func PlatformTransactionIDGTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformTransactionID), v))
	})
}

// PlatformTransactionIDLT applies the LT predicate on the "platform_transaction_id" field.
func PlatformTransactionIDLT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformTransactionID), v))
	})
}

// PlatformTransactionIDLTE applies the LTE predicate on the "platform_transaction_id" field.
func PlatformTransactionIDLTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformTransactionID), v))
	})
}

// PlatformTransactionIDIsNil applies the IsNil predicate on the "platform_transaction_id" field.
func PlatformTransactionIDIsNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatformTransactionID)))
	})
}

// PlatformTransactionIDNotNil applies the NotNil predicate on the "platform_transaction_id" field.
func PlatformTransactionIDNotNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatformTransactionID)))
	})
}

// ChainTransactionIDEQ applies the EQ predicate on the "chain_transaction_id" field.
func ChainTransactionIDEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainTransactionID), v))
	})
}

// ChainTransactionIDNEQ applies the NEQ predicate on the "chain_transaction_id" field.
func ChainTransactionIDNEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainTransactionID), v))
	})
}

// ChainTransactionIDIn applies the In predicate on the "chain_transaction_id" field.
func ChainTransactionIDIn(vs ...string) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChainTransactionID), v...))
	})
}

// ChainTransactionIDNotIn applies the NotIn predicate on the "chain_transaction_id" field.
func ChainTransactionIDNotIn(vs ...string) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChainTransactionID), v...))
	})
}

// ChainTransactionIDGT applies the GT predicate on the "chain_transaction_id" field.
func ChainTransactionIDGT(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChainTransactionID), v))
	})
}

// ChainTransactionIDGTE applies the GTE predicate on the "chain_transaction_id" field.
func ChainTransactionIDGTE(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChainTransactionID), v))
	})
}

// ChainTransactionIDLT applies the LT predicate on the "chain_transaction_id" field.
func ChainTransactionIDLT(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChainTransactionID), v))
	})
}

// ChainTransactionIDLTE applies the LTE predicate on the "chain_transaction_id" field.
func ChainTransactionIDLTE(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChainTransactionID), v))
	})
}

// ChainTransactionIDContains applies the Contains predicate on the "chain_transaction_id" field.
func ChainTransactionIDContains(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChainTransactionID), v))
	})
}

// ChainTransactionIDHasPrefix applies the HasPrefix predicate on the "chain_transaction_id" field.
func ChainTransactionIDHasPrefix(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChainTransactionID), v))
	})
}

// ChainTransactionIDHasSuffix applies the HasSuffix predicate on the "chain_transaction_id" field.
func ChainTransactionIDHasSuffix(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChainTransactionID), v))
	})
}

// ChainTransactionIDIsNil applies the IsNil predicate on the "chain_transaction_id" field.
func ChainTransactionIDIsNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChainTransactionID)))
	})
}

// ChainTransactionIDNotNil applies the NotNil predicate on the "chain_transaction_id" field.
func ChainTransactionIDNotNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChainTransactionID)))
	})
}

// ChainTransactionIDEqualFold applies the EqualFold predicate on the "chain_transaction_id" field.
func ChainTransactionIDEqualFold(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChainTransactionID), v))
	})
}

// ChainTransactionIDContainsFold applies the ContainsFold predicate on the "chain_transaction_id" field.
func ChainTransactionIDContainsFold(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChainTransactionID), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldState), v))
	})
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldState), v))
	})
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldState), v))
	})
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldState), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// ReviewIDEQ applies the EQ predicate on the "review_id" field.
func ReviewIDEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewID), v))
	})
}

// ReviewIDNEQ applies the NEQ predicate on the "review_id" field.
func ReviewIDNEQ(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewID), v))
	})
}

// ReviewIDIn applies the In predicate on the "review_id" field.
func ReviewIDIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReviewID), v...))
	})
}

// ReviewIDNotIn applies the NotIn predicate on the "review_id" field.
func ReviewIDNotIn(vs ...uuid.UUID) predicate.Withdraw {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReviewID), v...))
	})
}

// ReviewIDGT applies the GT predicate on the "review_id" field.
func ReviewIDGT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReviewID), v))
	})
}

// ReviewIDGTE applies the GTE predicate on the "review_id" field.
func ReviewIDGTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReviewID), v))
	})
}

// ReviewIDLT applies the LT predicate on the "review_id" field.
func ReviewIDLT(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReviewID), v))
	})
}

// ReviewIDLTE applies the LTE predicate on the "review_id" field.
func ReviewIDLTE(v uuid.UUID) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReviewID), v))
	})
}

// ReviewIDIsNil applies the IsNil predicate on the "review_id" field.
func ReviewIDIsNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReviewID)))
	})
}

// ReviewIDNotNil applies the NotNil predicate on the "review_id" field.
func ReviewIDNotNil() predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReviewID)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Withdraw) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Withdraw) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Withdraw) predicate.Withdraw {
	return predicate.Withdraw(func(s *sql.Selector) {
		p(s.Not())
	})
}
