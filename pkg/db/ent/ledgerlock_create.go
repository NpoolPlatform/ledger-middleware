// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/ledgerlock"
	"github.com/google/uuid"
)

// LedgerLockCreate is the builder for creating a LedgerLock entity.
type LedgerLockCreate struct {
	config
	mutation *LedgerLockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (llc *LedgerLockCreate) SetCreatedAt(u uint32) *LedgerLockCreate {
	llc.mutation.SetCreatedAt(u)
	return llc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (llc *LedgerLockCreate) SetNillableCreatedAt(u *uint32) *LedgerLockCreate {
	if u != nil {
		llc.SetCreatedAt(*u)
	}
	return llc
}

// SetUpdatedAt sets the "updated_at" field.
func (llc *LedgerLockCreate) SetUpdatedAt(u uint32) *LedgerLockCreate {
	llc.mutation.SetUpdatedAt(u)
	return llc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (llc *LedgerLockCreate) SetNillableUpdatedAt(u *uint32) *LedgerLockCreate {
	if u != nil {
		llc.SetUpdatedAt(*u)
	}
	return llc
}

// SetDeletedAt sets the "deleted_at" field.
func (llc *LedgerLockCreate) SetDeletedAt(u uint32) *LedgerLockCreate {
	llc.mutation.SetDeletedAt(u)
	return llc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (llc *LedgerLockCreate) SetNillableDeletedAt(u *uint32) *LedgerLockCreate {
	if u != nil {
		llc.SetDeletedAt(*u)
	}
	return llc
}

// SetID sets the "id" field.
func (llc *LedgerLockCreate) SetID(u uuid.UUID) *LedgerLockCreate {
	llc.mutation.SetID(u)
	return llc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (llc *LedgerLockCreate) SetNillableID(u *uuid.UUID) *LedgerLockCreate {
	if u != nil {
		llc.SetID(*u)
	}
	return llc
}

// Mutation returns the LedgerLockMutation object of the builder.
func (llc *LedgerLockCreate) Mutation() *LedgerLockMutation {
	return llc.mutation
}

// Save creates the LedgerLock in the database.
func (llc *LedgerLockCreate) Save(ctx context.Context) (*LedgerLock, error) {
	var (
		err  error
		node *LedgerLock
	)
	if err := llc.defaults(); err != nil {
		return nil, err
	}
	if len(llc.hooks) == 0 {
		if err = llc.check(); err != nil {
			return nil, err
		}
		node, err = llc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LedgerLockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = llc.check(); err != nil {
				return nil, err
			}
			llc.mutation = mutation
			if node, err = llc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(llc.hooks) - 1; i >= 0; i-- {
			if llc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = llc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, llc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LedgerLock)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LedgerLockMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (llc *LedgerLockCreate) SaveX(ctx context.Context) *LedgerLock {
	v, err := llc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (llc *LedgerLockCreate) Exec(ctx context.Context) error {
	_, err := llc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llc *LedgerLockCreate) ExecX(ctx context.Context) {
	if err := llc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (llc *LedgerLockCreate) defaults() error {
	if _, ok := llc.mutation.CreatedAt(); !ok {
		if ledgerlock.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized ledgerlock.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := ledgerlock.DefaultCreatedAt()
		llc.mutation.SetCreatedAt(v)
	}
	if _, ok := llc.mutation.UpdatedAt(); !ok {
		if ledgerlock.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ledgerlock.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ledgerlock.DefaultUpdatedAt()
		llc.mutation.SetUpdatedAt(v)
	}
	if _, ok := llc.mutation.DeletedAt(); !ok {
		if ledgerlock.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized ledgerlock.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := ledgerlock.DefaultDeletedAt()
		llc.mutation.SetDeletedAt(v)
	}
	if _, ok := llc.mutation.ID(); !ok {
		if ledgerlock.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized ledgerlock.DefaultID (forgotten import ent/runtime?)")
		}
		v := ledgerlock.DefaultID()
		llc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (llc *LedgerLockCreate) check() error {
	if _, ok := llc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LedgerLock.created_at"`)}
	}
	if _, ok := llc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LedgerLock.updated_at"`)}
	}
	if _, ok := llc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "LedgerLock.deleted_at"`)}
	}
	return nil
}

func (llc *LedgerLockCreate) sqlSave(ctx context.Context) (*LedgerLock, error) {
	_node, _spec := llc.createSpec()
	if err := sqlgraph.CreateNode(ctx, llc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (llc *LedgerLockCreate) createSpec() (*LedgerLock, *sqlgraph.CreateSpec) {
	var (
		_node = &LedgerLock{config: llc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ledgerlock.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ledgerlock.FieldID,
			},
		}
	)
	_spec.OnConflict = llc.conflict
	if id, ok := llc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := llc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ledgerlock.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := llc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ledgerlock.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := llc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ledgerlock.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LedgerLock.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LedgerLockUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (llc *LedgerLockCreate) OnConflict(opts ...sql.ConflictOption) *LedgerLockUpsertOne {
	llc.conflict = opts
	return &LedgerLockUpsertOne{
		create: llc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LedgerLock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (llc *LedgerLockCreate) OnConflictColumns(columns ...string) *LedgerLockUpsertOne {
	llc.conflict = append(llc.conflict, sql.ConflictColumns(columns...))
	return &LedgerLockUpsertOne{
		create: llc,
	}
}

type (
	// LedgerLockUpsertOne is the builder for "upsert"-ing
	//  one LedgerLock node.
	LedgerLockUpsertOne struct {
		create *LedgerLockCreate
	}

	// LedgerLockUpsert is the "OnConflict" setter.
	LedgerLockUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *LedgerLockUpsert) SetCreatedAt(v uint32) *LedgerLockUpsert {
	u.Set(ledgerlock.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LedgerLockUpsert) UpdateCreatedAt() *LedgerLockUpsert {
	u.SetExcluded(ledgerlock.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LedgerLockUpsert) AddCreatedAt(v uint32) *LedgerLockUpsert {
	u.Add(ledgerlock.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LedgerLockUpsert) SetUpdatedAt(v uint32) *LedgerLockUpsert {
	u.Set(ledgerlock.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LedgerLockUpsert) UpdateUpdatedAt() *LedgerLockUpsert {
	u.SetExcluded(ledgerlock.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LedgerLockUpsert) AddUpdatedAt(v uint32) *LedgerLockUpsert {
	u.Add(ledgerlock.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LedgerLockUpsert) SetDeletedAt(v uint32) *LedgerLockUpsert {
	u.Set(ledgerlock.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LedgerLockUpsert) UpdateDeletedAt() *LedgerLockUpsert {
	u.SetExcluded(ledgerlock.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LedgerLockUpsert) AddDeletedAt(v uint32) *LedgerLockUpsert {
	u.Add(ledgerlock.FieldDeletedAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LedgerLock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ledgerlock.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LedgerLockUpsertOne) UpdateNewValues() *LedgerLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ledgerlock.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.LedgerLock.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *LedgerLockUpsertOne) Ignore() *LedgerLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LedgerLockUpsertOne) DoNothing() *LedgerLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LedgerLockCreate.OnConflict
// documentation for more info.
func (u *LedgerLockUpsertOne) Update(set func(*LedgerLockUpsert)) *LedgerLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LedgerLockUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LedgerLockUpsertOne) SetCreatedAt(v uint32) *LedgerLockUpsertOne {
	return u.Update(func(s *LedgerLockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LedgerLockUpsertOne) AddCreatedAt(v uint32) *LedgerLockUpsertOne {
	return u.Update(func(s *LedgerLockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LedgerLockUpsertOne) UpdateCreatedAt() *LedgerLockUpsertOne {
	return u.Update(func(s *LedgerLockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LedgerLockUpsertOne) SetUpdatedAt(v uint32) *LedgerLockUpsertOne {
	return u.Update(func(s *LedgerLockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LedgerLockUpsertOne) AddUpdatedAt(v uint32) *LedgerLockUpsertOne {
	return u.Update(func(s *LedgerLockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LedgerLockUpsertOne) UpdateUpdatedAt() *LedgerLockUpsertOne {
	return u.Update(func(s *LedgerLockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LedgerLockUpsertOne) SetDeletedAt(v uint32) *LedgerLockUpsertOne {
	return u.Update(func(s *LedgerLockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LedgerLockUpsertOne) AddDeletedAt(v uint32) *LedgerLockUpsertOne {
	return u.Update(func(s *LedgerLockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LedgerLockUpsertOne) UpdateDeletedAt() *LedgerLockUpsertOne {
	return u.Update(func(s *LedgerLockUpsert) {
		s.UpdateDeletedAt()
	})
}

// Exec executes the query.
func (u *LedgerLockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LedgerLockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LedgerLockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LedgerLockUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LedgerLockUpsertOne.ID is not supported by MySQL driver. Use LedgerLockUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LedgerLockUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LedgerLockCreateBulk is the builder for creating many LedgerLock entities in bulk.
type LedgerLockCreateBulk struct {
	config
	builders []*LedgerLockCreate
	conflict []sql.ConflictOption
}

// Save creates the LedgerLock entities in the database.
func (llcb *LedgerLockCreateBulk) Save(ctx context.Context) ([]*LedgerLock, error) {
	specs := make([]*sqlgraph.CreateSpec, len(llcb.builders))
	nodes := make([]*LedgerLock, len(llcb.builders))
	mutators := make([]Mutator, len(llcb.builders))
	for i := range llcb.builders {
		func(i int, root context.Context) {
			builder := llcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LedgerLockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, llcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = llcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, llcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, llcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (llcb *LedgerLockCreateBulk) SaveX(ctx context.Context) []*LedgerLock {
	v, err := llcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (llcb *LedgerLockCreateBulk) Exec(ctx context.Context) error {
	_, err := llcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llcb *LedgerLockCreateBulk) ExecX(ctx context.Context) {
	if err := llcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LedgerLock.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LedgerLockUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (llcb *LedgerLockCreateBulk) OnConflict(opts ...sql.ConflictOption) *LedgerLockUpsertBulk {
	llcb.conflict = opts
	return &LedgerLockUpsertBulk{
		create: llcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LedgerLock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (llcb *LedgerLockCreateBulk) OnConflictColumns(columns ...string) *LedgerLockUpsertBulk {
	llcb.conflict = append(llcb.conflict, sql.ConflictColumns(columns...))
	return &LedgerLockUpsertBulk{
		create: llcb,
	}
}

// LedgerLockUpsertBulk is the builder for "upsert"-ing
// a bulk of LedgerLock nodes.
type LedgerLockUpsertBulk struct {
	create *LedgerLockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LedgerLock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ledgerlock.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LedgerLockUpsertBulk) UpdateNewValues() *LedgerLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ledgerlock.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LedgerLock.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *LedgerLockUpsertBulk) Ignore() *LedgerLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LedgerLockUpsertBulk) DoNothing() *LedgerLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LedgerLockCreateBulk.OnConflict
// documentation for more info.
func (u *LedgerLockUpsertBulk) Update(set func(*LedgerLockUpsert)) *LedgerLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LedgerLockUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LedgerLockUpsertBulk) SetCreatedAt(v uint32) *LedgerLockUpsertBulk {
	return u.Update(func(s *LedgerLockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LedgerLockUpsertBulk) AddCreatedAt(v uint32) *LedgerLockUpsertBulk {
	return u.Update(func(s *LedgerLockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LedgerLockUpsertBulk) UpdateCreatedAt() *LedgerLockUpsertBulk {
	return u.Update(func(s *LedgerLockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LedgerLockUpsertBulk) SetUpdatedAt(v uint32) *LedgerLockUpsertBulk {
	return u.Update(func(s *LedgerLockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LedgerLockUpsertBulk) AddUpdatedAt(v uint32) *LedgerLockUpsertBulk {
	return u.Update(func(s *LedgerLockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LedgerLockUpsertBulk) UpdateUpdatedAt() *LedgerLockUpsertBulk {
	return u.Update(func(s *LedgerLockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LedgerLockUpsertBulk) SetDeletedAt(v uint32) *LedgerLockUpsertBulk {
	return u.Update(func(s *LedgerLockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LedgerLockUpsertBulk) AddDeletedAt(v uint32) *LedgerLockUpsertBulk {
	return u.Update(func(s *LedgerLockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LedgerLockUpsertBulk) UpdateDeletedAt() *LedgerLockUpsertBulk {
	return u.Update(func(s *LedgerLockUpsert) {
		s.UpdateDeletedAt()
	})
}

// Exec executes the query.
func (u *LedgerLockUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LedgerLockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LedgerLockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LedgerLockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
