// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/simulateledger"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SimulateLedgerCreate is the builder for creating a SimulateLedger entity.
type SimulateLedgerCreate struct {
	config
	mutation *SimulateLedgerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (slc *SimulateLedgerCreate) SetCreatedAt(u uint32) *SimulateLedgerCreate {
	slc.mutation.SetCreatedAt(u)
	return slc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slc *SimulateLedgerCreate) SetNillableCreatedAt(u *uint32) *SimulateLedgerCreate {
	if u != nil {
		slc.SetCreatedAt(*u)
	}
	return slc
}

// SetUpdatedAt sets the "updated_at" field.
func (slc *SimulateLedgerCreate) SetUpdatedAt(u uint32) *SimulateLedgerCreate {
	slc.mutation.SetUpdatedAt(u)
	return slc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (slc *SimulateLedgerCreate) SetNillableUpdatedAt(u *uint32) *SimulateLedgerCreate {
	if u != nil {
		slc.SetUpdatedAt(*u)
	}
	return slc
}

// SetDeletedAt sets the "deleted_at" field.
func (slc *SimulateLedgerCreate) SetDeletedAt(u uint32) *SimulateLedgerCreate {
	slc.mutation.SetDeletedAt(u)
	return slc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (slc *SimulateLedgerCreate) SetNillableDeletedAt(u *uint32) *SimulateLedgerCreate {
	if u != nil {
		slc.SetDeletedAt(*u)
	}
	return slc
}

// SetEntID sets the "ent_id" field.
func (slc *SimulateLedgerCreate) SetEntID(u uuid.UUID) *SimulateLedgerCreate {
	slc.mutation.SetEntID(u)
	return slc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (slc *SimulateLedgerCreate) SetNillableEntID(u *uuid.UUID) *SimulateLedgerCreate {
	if u != nil {
		slc.SetEntID(*u)
	}
	return slc
}

// SetAppID sets the "app_id" field.
func (slc *SimulateLedgerCreate) SetAppID(u uuid.UUID) *SimulateLedgerCreate {
	slc.mutation.SetAppID(u)
	return slc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (slc *SimulateLedgerCreate) SetNillableAppID(u *uuid.UUID) *SimulateLedgerCreate {
	if u != nil {
		slc.SetAppID(*u)
	}
	return slc
}

// SetUserID sets the "user_id" field.
func (slc *SimulateLedgerCreate) SetUserID(u uuid.UUID) *SimulateLedgerCreate {
	slc.mutation.SetUserID(u)
	return slc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (slc *SimulateLedgerCreate) SetNillableUserID(u *uuid.UUID) *SimulateLedgerCreate {
	if u != nil {
		slc.SetUserID(*u)
	}
	return slc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (slc *SimulateLedgerCreate) SetCoinTypeID(u uuid.UUID) *SimulateLedgerCreate {
	slc.mutation.SetCoinTypeID(u)
	return slc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (slc *SimulateLedgerCreate) SetNillableCoinTypeID(u *uuid.UUID) *SimulateLedgerCreate {
	if u != nil {
		slc.SetCoinTypeID(*u)
	}
	return slc
}

// SetIncoming sets the "incoming" field.
func (slc *SimulateLedgerCreate) SetIncoming(d decimal.Decimal) *SimulateLedgerCreate {
	slc.mutation.SetIncoming(d)
	return slc
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (slc *SimulateLedgerCreate) SetNillableIncoming(d *decimal.Decimal) *SimulateLedgerCreate {
	if d != nil {
		slc.SetIncoming(*d)
	}
	return slc
}

// SetOutcoming sets the "outcoming" field.
func (slc *SimulateLedgerCreate) SetOutcoming(d decimal.Decimal) *SimulateLedgerCreate {
	slc.mutation.SetOutcoming(d)
	return slc
}

// SetNillableOutcoming sets the "outcoming" field if the given value is not nil.
func (slc *SimulateLedgerCreate) SetNillableOutcoming(d *decimal.Decimal) *SimulateLedgerCreate {
	if d != nil {
		slc.SetOutcoming(*d)
	}
	return slc
}

// SetID sets the "id" field.
func (slc *SimulateLedgerCreate) SetID(u uint32) *SimulateLedgerCreate {
	slc.mutation.SetID(u)
	return slc
}

// Mutation returns the SimulateLedgerMutation object of the builder.
func (slc *SimulateLedgerCreate) Mutation() *SimulateLedgerMutation {
	return slc.mutation
}

// Save creates the SimulateLedger in the database.
func (slc *SimulateLedgerCreate) Save(ctx context.Context) (*SimulateLedger, error) {
	var (
		err  error
		node *SimulateLedger
	)
	if err := slc.defaults(); err != nil {
		return nil, err
	}
	if len(slc.hooks) == 0 {
		if err = slc.check(); err != nil {
			return nil, err
		}
		node, err = slc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SimulateLedgerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = slc.check(); err != nil {
				return nil, err
			}
			slc.mutation = mutation
			if node, err = slc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(slc.hooks) - 1; i >= 0; i-- {
			if slc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = slc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, slc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SimulateLedger)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SimulateLedgerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (slc *SimulateLedgerCreate) SaveX(ctx context.Context) *SimulateLedger {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *SimulateLedgerCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *SimulateLedgerCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *SimulateLedgerCreate) defaults() error {
	if _, ok := slc.mutation.CreatedAt(); !ok {
		if simulateledger.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateledger.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := simulateledger.DefaultCreatedAt()
		slc.mutation.SetCreatedAt(v)
	}
	if _, ok := slc.mutation.UpdatedAt(); !ok {
		if simulateledger.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateledger.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := simulateledger.DefaultUpdatedAt()
		slc.mutation.SetUpdatedAt(v)
	}
	if _, ok := slc.mutation.DeletedAt(); !ok {
		if simulateledger.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateledger.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := simulateledger.DefaultDeletedAt()
		slc.mutation.SetDeletedAt(v)
	}
	if _, ok := slc.mutation.EntID(); !ok {
		if simulateledger.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized simulateledger.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := simulateledger.DefaultEntID()
		slc.mutation.SetEntID(v)
	}
	if _, ok := slc.mutation.AppID(); !ok {
		if simulateledger.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized simulateledger.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := simulateledger.DefaultAppID()
		slc.mutation.SetAppID(v)
	}
	if _, ok := slc.mutation.UserID(); !ok {
		if simulateledger.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized simulateledger.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := simulateledger.DefaultUserID()
		slc.mutation.SetUserID(v)
	}
	if _, ok := slc.mutation.CoinTypeID(); !ok {
		if simulateledger.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized simulateledger.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := simulateledger.DefaultCoinTypeID()
		slc.mutation.SetCoinTypeID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (slc *SimulateLedgerCreate) check() error {
	if _, ok := slc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SimulateLedger.created_at"`)}
	}
	if _, ok := slc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SimulateLedger.updated_at"`)}
	}
	if _, ok := slc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "SimulateLedger.deleted_at"`)}
	}
	if _, ok := slc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "SimulateLedger.ent_id"`)}
	}
	return nil
}

func (slc *SimulateLedgerCreate) sqlSave(ctx context.Context) (*SimulateLedger, error) {
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (slc *SimulateLedgerCreate) createSpec() (*SimulateLedger, *sqlgraph.CreateSpec) {
	var (
		_node = &SimulateLedger{config: slc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: simulateledger.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: simulateledger.FieldID,
			},
		}
	)
	_spec.OnConflict = slc.conflict
	if id, ok := slc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := slc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := slc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := slc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := slc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := slc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := slc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := slc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := slc.mutation.Incoming(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateledger.FieldIncoming,
		})
		_node.Incoming = value
	}
	if value, ok := slc.mutation.Outcoming(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateledger.FieldOutcoming,
		})
		_node.Outcoming = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SimulateLedger.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SimulateLedgerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (slc *SimulateLedgerCreate) OnConflict(opts ...sql.ConflictOption) *SimulateLedgerUpsertOne {
	slc.conflict = opts
	return &SimulateLedgerUpsertOne{
		create: slc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SimulateLedger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (slc *SimulateLedgerCreate) OnConflictColumns(columns ...string) *SimulateLedgerUpsertOne {
	slc.conflict = append(slc.conflict, sql.ConflictColumns(columns...))
	return &SimulateLedgerUpsertOne{
		create: slc,
	}
}

type (
	// SimulateLedgerUpsertOne is the builder for "upsert"-ing
	//  one SimulateLedger node.
	SimulateLedgerUpsertOne struct {
		create *SimulateLedgerCreate
	}

	// SimulateLedgerUpsert is the "OnConflict" setter.
	SimulateLedgerUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SimulateLedgerUpsert) SetCreatedAt(v uint32) *SimulateLedgerUpsert {
	u.Set(simulateledger.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateLedgerUpsert) UpdateCreatedAt() *SimulateLedgerUpsert {
	u.SetExcluded(simulateledger.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateLedgerUpsert) AddCreatedAt(v uint32) *SimulateLedgerUpsert {
	u.Add(simulateledger.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateLedgerUpsert) SetUpdatedAt(v uint32) *SimulateLedgerUpsert {
	u.Set(simulateledger.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateLedgerUpsert) UpdateUpdatedAt() *SimulateLedgerUpsert {
	u.SetExcluded(simulateledger.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateLedgerUpsert) AddUpdatedAt(v uint32) *SimulateLedgerUpsert {
	u.Add(simulateledger.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateLedgerUpsert) SetDeletedAt(v uint32) *SimulateLedgerUpsert {
	u.Set(simulateledger.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateLedgerUpsert) UpdateDeletedAt() *SimulateLedgerUpsert {
	u.SetExcluded(simulateledger.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateLedgerUpsert) AddDeletedAt(v uint32) *SimulateLedgerUpsert {
	u.Add(simulateledger.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SimulateLedgerUpsert) SetEntID(v uuid.UUID) *SimulateLedgerUpsert {
	u.Set(simulateledger.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsert) UpdateEntID() *SimulateLedgerUpsert {
	u.SetExcluded(simulateledger.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *SimulateLedgerUpsert) SetAppID(v uuid.UUID) *SimulateLedgerUpsert {
	u.Set(simulateledger.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsert) UpdateAppID() *SimulateLedgerUpsert {
	u.SetExcluded(simulateledger.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *SimulateLedgerUpsert) ClearAppID() *SimulateLedgerUpsert {
	u.SetNull(simulateledger.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SimulateLedgerUpsert) SetUserID(v uuid.UUID) *SimulateLedgerUpsert {
	u.Set(simulateledger.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsert) UpdateUserID() *SimulateLedgerUpsert {
	u.SetExcluded(simulateledger.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *SimulateLedgerUpsert) ClearUserID() *SimulateLedgerUpsert {
	u.SetNull(simulateledger.FieldUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SimulateLedgerUpsert) SetCoinTypeID(v uuid.UUID) *SimulateLedgerUpsert {
	u.Set(simulateledger.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsert) UpdateCoinTypeID() *SimulateLedgerUpsert {
	u.SetExcluded(simulateledger.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SimulateLedgerUpsert) ClearCoinTypeID() *SimulateLedgerUpsert {
	u.SetNull(simulateledger.FieldCoinTypeID)
	return u
}

// SetIncoming sets the "incoming" field.
func (u *SimulateLedgerUpsert) SetIncoming(v decimal.Decimal) *SimulateLedgerUpsert {
	u.Set(simulateledger.FieldIncoming, v)
	return u
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *SimulateLedgerUpsert) UpdateIncoming() *SimulateLedgerUpsert {
	u.SetExcluded(simulateledger.FieldIncoming)
	return u
}

// AddIncoming adds v to the "incoming" field.
func (u *SimulateLedgerUpsert) AddIncoming(v decimal.Decimal) *SimulateLedgerUpsert {
	u.Add(simulateledger.FieldIncoming, v)
	return u
}

// ClearIncoming clears the value of the "incoming" field.
func (u *SimulateLedgerUpsert) ClearIncoming() *SimulateLedgerUpsert {
	u.SetNull(simulateledger.FieldIncoming)
	return u
}

// SetOutcoming sets the "outcoming" field.
func (u *SimulateLedgerUpsert) SetOutcoming(v decimal.Decimal) *SimulateLedgerUpsert {
	u.Set(simulateledger.FieldOutcoming, v)
	return u
}

// UpdateOutcoming sets the "outcoming" field to the value that was provided on create.
func (u *SimulateLedgerUpsert) UpdateOutcoming() *SimulateLedgerUpsert {
	u.SetExcluded(simulateledger.FieldOutcoming)
	return u
}

// AddOutcoming adds v to the "outcoming" field.
func (u *SimulateLedgerUpsert) AddOutcoming(v decimal.Decimal) *SimulateLedgerUpsert {
	u.Add(simulateledger.FieldOutcoming, v)
	return u
}

// ClearOutcoming clears the value of the "outcoming" field.
func (u *SimulateLedgerUpsert) ClearOutcoming() *SimulateLedgerUpsert {
	u.SetNull(simulateledger.FieldOutcoming)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SimulateLedger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(simulateledger.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SimulateLedgerUpsertOne) UpdateNewValues() *SimulateLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(simulateledger.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SimulateLedger.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SimulateLedgerUpsertOne) Ignore() *SimulateLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SimulateLedgerUpsertOne) DoNothing() *SimulateLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SimulateLedgerCreate.OnConflict
// documentation for more info.
func (u *SimulateLedgerUpsertOne) Update(set func(*SimulateLedgerUpsert)) *SimulateLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SimulateLedgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SimulateLedgerUpsertOne) SetCreatedAt(v uint32) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateLedgerUpsertOne) AddCreatedAt(v uint32) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateLedgerUpsertOne) UpdateCreatedAt() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateLedgerUpsertOne) SetUpdatedAt(v uint32) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateLedgerUpsertOne) AddUpdatedAt(v uint32) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateLedgerUpsertOne) UpdateUpdatedAt() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateLedgerUpsertOne) SetDeletedAt(v uint32) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateLedgerUpsertOne) AddDeletedAt(v uint32) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateLedgerUpsertOne) UpdateDeletedAt() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SimulateLedgerUpsertOne) SetEntID(v uuid.UUID) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsertOne) UpdateEntID() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *SimulateLedgerUpsertOne) SetAppID(v uuid.UUID) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsertOne) UpdateAppID() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *SimulateLedgerUpsertOne) ClearAppID() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SimulateLedgerUpsertOne) SetUserID(v uuid.UUID) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsertOne) UpdateUserID() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SimulateLedgerUpsertOne) ClearUserID() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SimulateLedgerUpsertOne) SetCoinTypeID(v uuid.UUID) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsertOne) UpdateCoinTypeID() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SimulateLedgerUpsertOne) ClearCoinTypeID() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetIncoming sets the "incoming" field.
func (u *SimulateLedgerUpsertOne) SetIncoming(v decimal.Decimal) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetIncoming(v)
	})
}

// AddIncoming adds v to the "incoming" field.
func (u *SimulateLedgerUpsertOne) AddIncoming(v decimal.Decimal) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.AddIncoming(v)
	})
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *SimulateLedgerUpsertOne) UpdateIncoming() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateIncoming()
	})
}

// ClearIncoming clears the value of the "incoming" field.
func (u *SimulateLedgerUpsertOne) ClearIncoming() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.ClearIncoming()
	})
}

// SetOutcoming sets the "outcoming" field.
func (u *SimulateLedgerUpsertOne) SetOutcoming(v decimal.Decimal) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetOutcoming(v)
	})
}

// AddOutcoming adds v to the "outcoming" field.
func (u *SimulateLedgerUpsertOne) AddOutcoming(v decimal.Decimal) *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.AddOutcoming(v)
	})
}

// UpdateOutcoming sets the "outcoming" field to the value that was provided on create.
func (u *SimulateLedgerUpsertOne) UpdateOutcoming() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateOutcoming()
	})
}

// ClearOutcoming clears the value of the "outcoming" field.
func (u *SimulateLedgerUpsertOne) ClearOutcoming() *SimulateLedgerUpsertOne {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.ClearOutcoming()
	})
}

// Exec executes the query.
func (u *SimulateLedgerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SimulateLedgerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SimulateLedgerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SimulateLedgerUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SimulateLedgerUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SimulateLedgerCreateBulk is the builder for creating many SimulateLedger entities in bulk.
type SimulateLedgerCreateBulk struct {
	config
	builders []*SimulateLedgerCreate
	conflict []sql.ConflictOption
}

// Save creates the SimulateLedger entities in the database.
func (slcb *SimulateLedgerCreateBulk) Save(ctx context.Context) ([]*SimulateLedger, error) {
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*SimulateLedger, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SimulateLedgerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = slcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *SimulateLedgerCreateBulk) SaveX(ctx context.Context) []*SimulateLedger {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *SimulateLedgerCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *SimulateLedgerCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SimulateLedger.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SimulateLedgerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (slcb *SimulateLedgerCreateBulk) OnConflict(opts ...sql.ConflictOption) *SimulateLedgerUpsertBulk {
	slcb.conflict = opts
	return &SimulateLedgerUpsertBulk{
		create: slcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SimulateLedger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (slcb *SimulateLedgerCreateBulk) OnConflictColumns(columns ...string) *SimulateLedgerUpsertBulk {
	slcb.conflict = append(slcb.conflict, sql.ConflictColumns(columns...))
	return &SimulateLedgerUpsertBulk{
		create: slcb,
	}
}

// SimulateLedgerUpsertBulk is the builder for "upsert"-ing
// a bulk of SimulateLedger nodes.
type SimulateLedgerUpsertBulk struct {
	create *SimulateLedgerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SimulateLedger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(simulateledger.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SimulateLedgerUpsertBulk) UpdateNewValues() *SimulateLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(simulateledger.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SimulateLedger.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SimulateLedgerUpsertBulk) Ignore() *SimulateLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SimulateLedgerUpsertBulk) DoNothing() *SimulateLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SimulateLedgerCreateBulk.OnConflict
// documentation for more info.
func (u *SimulateLedgerUpsertBulk) Update(set func(*SimulateLedgerUpsert)) *SimulateLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SimulateLedgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SimulateLedgerUpsertBulk) SetCreatedAt(v uint32) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateLedgerUpsertBulk) AddCreatedAt(v uint32) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateLedgerUpsertBulk) UpdateCreatedAt() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateLedgerUpsertBulk) SetUpdatedAt(v uint32) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateLedgerUpsertBulk) AddUpdatedAt(v uint32) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateLedgerUpsertBulk) UpdateUpdatedAt() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateLedgerUpsertBulk) SetDeletedAt(v uint32) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateLedgerUpsertBulk) AddDeletedAt(v uint32) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateLedgerUpsertBulk) UpdateDeletedAt() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SimulateLedgerUpsertBulk) SetEntID(v uuid.UUID) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsertBulk) UpdateEntID() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *SimulateLedgerUpsertBulk) SetAppID(v uuid.UUID) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsertBulk) UpdateAppID() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *SimulateLedgerUpsertBulk) ClearAppID() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SimulateLedgerUpsertBulk) SetUserID(v uuid.UUID) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsertBulk) UpdateUserID() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SimulateLedgerUpsertBulk) ClearUserID() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SimulateLedgerUpsertBulk) SetCoinTypeID(v uuid.UUID) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SimulateLedgerUpsertBulk) UpdateCoinTypeID() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SimulateLedgerUpsertBulk) ClearCoinTypeID() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetIncoming sets the "incoming" field.
func (u *SimulateLedgerUpsertBulk) SetIncoming(v decimal.Decimal) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetIncoming(v)
	})
}

// AddIncoming adds v to the "incoming" field.
func (u *SimulateLedgerUpsertBulk) AddIncoming(v decimal.Decimal) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.AddIncoming(v)
	})
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *SimulateLedgerUpsertBulk) UpdateIncoming() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateIncoming()
	})
}

// ClearIncoming clears the value of the "incoming" field.
func (u *SimulateLedgerUpsertBulk) ClearIncoming() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.ClearIncoming()
	})
}

// SetOutcoming sets the "outcoming" field.
func (u *SimulateLedgerUpsertBulk) SetOutcoming(v decimal.Decimal) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.SetOutcoming(v)
	})
}

// AddOutcoming adds v to the "outcoming" field.
func (u *SimulateLedgerUpsertBulk) AddOutcoming(v decimal.Decimal) *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.AddOutcoming(v)
	})
}

// UpdateOutcoming sets the "outcoming" field to the value that was provided on create.
func (u *SimulateLedgerUpsertBulk) UpdateOutcoming() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.UpdateOutcoming()
	})
}

// ClearOutcoming clears the value of the "outcoming" field.
func (u *SimulateLedgerUpsertBulk) ClearOutcoming() *SimulateLedgerUpsertBulk {
	return u.Update(func(s *SimulateLedgerUpsert) {
		s.ClearOutcoming()
	})
}

// Exec executes the query.
func (u *SimulateLedgerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SimulateLedgerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SimulateLedgerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SimulateLedgerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
