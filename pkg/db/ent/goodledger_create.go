// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/goodledger"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodLedgerCreate is the builder for creating a GoodLedger entity.
type GoodLedgerCreate struct {
	config
	mutation *GoodLedgerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (glc *GoodLedgerCreate) SetCreatedAt(u uint32) *GoodLedgerCreate {
	glc.mutation.SetCreatedAt(u)
	return glc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (glc *GoodLedgerCreate) SetNillableCreatedAt(u *uint32) *GoodLedgerCreate {
	if u != nil {
		glc.SetCreatedAt(*u)
	}
	return glc
}

// SetUpdatedAt sets the "updated_at" field.
func (glc *GoodLedgerCreate) SetUpdatedAt(u uint32) *GoodLedgerCreate {
	glc.mutation.SetUpdatedAt(u)
	return glc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (glc *GoodLedgerCreate) SetNillableUpdatedAt(u *uint32) *GoodLedgerCreate {
	if u != nil {
		glc.SetUpdatedAt(*u)
	}
	return glc
}

// SetDeletedAt sets the "deleted_at" field.
func (glc *GoodLedgerCreate) SetDeletedAt(u uint32) *GoodLedgerCreate {
	glc.mutation.SetDeletedAt(u)
	return glc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (glc *GoodLedgerCreate) SetNillableDeletedAt(u *uint32) *GoodLedgerCreate {
	if u != nil {
		glc.SetDeletedAt(*u)
	}
	return glc
}

// SetEntID sets the "ent_id" field.
func (glc *GoodLedgerCreate) SetEntID(u uuid.UUID) *GoodLedgerCreate {
	glc.mutation.SetEntID(u)
	return glc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (glc *GoodLedgerCreate) SetNillableEntID(u *uuid.UUID) *GoodLedgerCreate {
	if u != nil {
		glc.SetEntID(*u)
	}
	return glc
}

// SetGoodID sets the "good_id" field.
func (glc *GoodLedgerCreate) SetGoodID(u uuid.UUID) *GoodLedgerCreate {
	glc.mutation.SetGoodID(u)
	return glc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (glc *GoodLedgerCreate) SetNillableGoodID(u *uuid.UUID) *GoodLedgerCreate {
	if u != nil {
		glc.SetGoodID(*u)
	}
	return glc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (glc *GoodLedgerCreate) SetCoinTypeID(u uuid.UUID) *GoodLedgerCreate {
	glc.mutation.SetCoinTypeID(u)
	return glc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (glc *GoodLedgerCreate) SetNillableCoinTypeID(u *uuid.UUID) *GoodLedgerCreate {
	if u != nil {
		glc.SetCoinTypeID(*u)
	}
	return glc
}

// SetAmount sets the "amount" field.
func (glc *GoodLedgerCreate) SetAmount(d decimal.Decimal) *GoodLedgerCreate {
	glc.mutation.SetAmount(d)
	return glc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (glc *GoodLedgerCreate) SetNillableAmount(d *decimal.Decimal) *GoodLedgerCreate {
	if d != nil {
		glc.SetAmount(*d)
	}
	return glc
}

// SetToPlatform sets the "to_platform" field.
func (glc *GoodLedgerCreate) SetToPlatform(d decimal.Decimal) *GoodLedgerCreate {
	glc.mutation.SetToPlatform(d)
	return glc
}

// SetNillableToPlatform sets the "to_platform" field if the given value is not nil.
func (glc *GoodLedgerCreate) SetNillableToPlatform(d *decimal.Decimal) *GoodLedgerCreate {
	if d != nil {
		glc.SetToPlatform(*d)
	}
	return glc
}

// SetToUser sets the "to_user" field.
func (glc *GoodLedgerCreate) SetToUser(d decimal.Decimal) *GoodLedgerCreate {
	glc.mutation.SetToUser(d)
	return glc
}

// SetNillableToUser sets the "to_user" field if the given value is not nil.
func (glc *GoodLedgerCreate) SetNillableToUser(d *decimal.Decimal) *GoodLedgerCreate {
	if d != nil {
		glc.SetToUser(*d)
	}
	return glc
}

// SetID sets the "id" field.
func (glc *GoodLedgerCreate) SetID(u uint32) *GoodLedgerCreate {
	glc.mutation.SetID(u)
	return glc
}

// Mutation returns the GoodLedgerMutation object of the builder.
func (glc *GoodLedgerCreate) Mutation() *GoodLedgerMutation {
	return glc.mutation
}

// Save creates the GoodLedger in the database.
func (glc *GoodLedgerCreate) Save(ctx context.Context) (*GoodLedger, error) {
	var (
		err  error
		node *GoodLedger
	)
	if err := glc.defaults(); err != nil {
		return nil, err
	}
	if len(glc.hooks) == 0 {
		if err = glc.check(); err != nil {
			return nil, err
		}
		node, err = glc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodLedgerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = glc.check(); err != nil {
				return nil, err
			}
			glc.mutation = mutation
			if node, err = glc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(glc.hooks) - 1; i >= 0; i-- {
			if glc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = glc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, glc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodLedger)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodLedgerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (glc *GoodLedgerCreate) SaveX(ctx context.Context) *GoodLedger {
	v, err := glc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (glc *GoodLedgerCreate) Exec(ctx context.Context) error {
	_, err := glc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glc *GoodLedgerCreate) ExecX(ctx context.Context) {
	if err := glc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (glc *GoodLedgerCreate) defaults() error {
	if _, ok := glc.mutation.CreatedAt(); !ok {
		if goodledger.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodledger.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := goodledger.DefaultCreatedAt()
		glc.mutation.SetCreatedAt(v)
	}
	if _, ok := glc.mutation.UpdatedAt(); !ok {
		if goodledger.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodledger.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodledger.DefaultUpdatedAt()
		glc.mutation.SetUpdatedAt(v)
	}
	if _, ok := glc.mutation.DeletedAt(); !ok {
		if goodledger.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized goodledger.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := goodledger.DefaultDeletedAt()
		glc.mutation.SetDeletedAt(v)
	}
	if _, ok := glc.mutation.EntID(); !ok {
		if goodledger.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized goodledger.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := goodledger.DefaultEntID()
		glc.mutation.SetEntID(v)
	}
	if _, ok := glc.mutation.GoodID(); !ok {
		if goodledger.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized goodledger.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := goodledger.DefaultGoodID()
		glc.mutation.SetGoodID(v)
	}
	if _, ok := glc.mutation.CoinTypeID(); !ok {
		if goodledger.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized goodledger.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := goodledger.DefaultCoinTypeID()
		glc.mutation.SetCoinTypeID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (glc *GoodLedgerCreate) check() error {
	if _, ok := glc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GoodLedger.created_at"`)}
	}
	if _, ok := glc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GoodLedger.updated_at"`)}
	}
	if _, ok := glc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "GoodLedger.deleted_at"`)}
	}
	if _, ok := glc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "GoodLedger.ent_id"`)}
	}
	return nil
}

func (glc *GoodLedgerCreate) sqlSave(ctx context.Context) (*GoodLedger, error) {
	_node, _spec := glc.createSpec()
	if err := sqlgraph.CreateNode(ctx, glc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (glc *GoodLedgerCreate) createSpec() (*GoodLedger, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodLedger{config: glc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodledger.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodledger.FieldID,
			},
		}
	)
	_spec.OnConflict = glc.conflict
	if id, ok := glc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := glc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := glc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := glc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodledger.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := glc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodledger.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := glc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodledger.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := glc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodledger.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := glc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := glc.mutation.ToPlatform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldToPlatform,
		})
		_node.ToPlatform = value
	}
	if value, ok := glc.mutation.ToUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodledger.FieldToUser,
		})
		_node.ToUser = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodLedger.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodLedgerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (glc *GoodLedgerCreate) OnConflict(opts ...sql.ConflictOption) *GoodLedgerUpsertOne {
	glc.conflict = opts
	return &GoodLedgerUpsertOne{
		create: glc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodLedger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (glc *GoodLedgerCreate) OnConflictColumns(columns ...string) *GoodLedgerUpsertOne {
	glc.conflict = append(glc.conflict, sql.ConflictColumns(columns...))
	return &GoodLedgerUpsertOne{
		create: glc,
	}
}

type (
	// GoodLedgerUpsertOne is the builder for "upsert"-ing
	//  one GoodLedger node.
	GoodLedgerUpsertOne struct {
		create *GoodLedgerCreate
	}

	// GoodLedgerUpsert is the "OnConflict" setter.
	GoodLedgerUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GoodLedgerUpsert) SetCreatedAt(v uint32) *GoodLedgerUpsert {
	u.Set(goodledger.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodLedgerUpsert) UpdateCreatedAt() *GoodLedgerUpsert {
	u.SetExcluded(goodledger.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodLedgerUpsert) AddCreatedAt(v uint32) *GoodLedgerUpsert {
	u.Add(goodledger.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodLedgerUpsert) SetUpdatedAt(v uint32) *GoodLedgerUpsert {
	u.Set(goodledger.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodLedgerUpsert) UpdateUpdatedAt() *GoodLedgerUpsert {
	u.SetExcluded(goodledger.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodLedgerUpsert) AddUpdatedAt(v uint32) *GoodLedgerUpsert {
	u.Add(goodledger.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodLedgerUpsert) SetDeletedAt(v uint32) *GoodLedgerUpsert {
	u.Set(goodledger.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodLedgerUpsert) UpdateDeletedAt() *GoodLedgerUpsert {
	u.SetExcluded(goodledger.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodLedgerUpsert) AddDeletedAt(v uint32) *GoodLedgerUpsert {
	u.Add(goodledger.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodLedgerUpsert) SetEntID(v uuid.UUID) *GoodLedgerUpsert {
	u.Set(goodledger.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodLedgerUpsert) UpdateEntID() *GoodLedgerUpsert {
	u.SetExcluded(goodledger.FieldEntID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodLedgerUpsert) SetGoodID(v uuid.UUID) *GoodLedgerUpsert {
	u.Set(goodledger.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodLedgerUpsert) UpdateGoodID() *GoodLedgerUpsert {
	u.SetExcluded(goodledger.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodLedgerUpsert) ClearGoodID() *GoodLedgerUpsert {
	u.SetNull(goodledger.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodLedgerUpsert) SetCoinTypeID(v uuid.UUID) *GoodLedgerUpsert {
	u.Set(goodledger.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodLedgerUpsert) UpdateCoinTypeID() *GoodLedgerUpsert {
	u.SetExcluded(goodledger.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodLedgerUpsert) ClearCoinTypeID() *GoodLedgerUpsert {
	u.SetNull(goodledger.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *GoodLedgerUpsert) SetAmount(v decimal.Decimal) *GoodLedgerUpsert {
	u.Set(goodledger.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodLedgerUpsert) UpdateAmount() *GoodLedgerUpsert {
	u.SetExcluded(goodledger.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *GoodLedgerUpsert) AddAmount(v decimal.Decimal) *GoodLedgerUpsert {
	u.Add(goodledger.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodLedgerUpsert) ClearAmount() *GoodLedgerUpsert {
	u.SetNull(goodledger.FieldAmount)
	return u
}

// SetToPlatform sets the "to_platform" field.
func (u *GoodLedgerUpsert) SetToPlatform(v decimal.Decimal) *GoodLedgerUpsert {
	u.Set(goodledger.FieldToPlatform, v)
	return u
}

// UpdateToPlatform sets the "to_platform" field to the value that was provided on create.
func (u *GoodLedgerUpsert) UpdateToPlatform() *GoodLedgerUpsert {
	u.SetExcluded(goodledger.FieldToPlatform)
	return u
}

// AddToPlatform adds v to the "to_platform" field.
func (u *GoodLedgerUpsert) AddToPlatform(v decimal.Decimal) *GoodLedgerUpsert {
	u.Add(goodledger.FieldToPlatform, v)
	return u
}

// ClearToPlatform clears the value of the "to_platform" field.
func (u *GoodLedgerUpsert) ClearToPlatform() *GoodLedgerUpsert {
	u.SetNull(goodledger.FieldToPlatform)
	return u
}

// SetToUser sets the "to_user" field.
func (u *GoodLedgerUpsert) SetToUser(v decimal.Decimal) *GoodLedgerUpsert {
	u.Set(goodledger.FieldToUser, v)
	return u
}

// UpdateToUser sets the "to_user" field to the value that was provided on create.
func (u *GoodLedgerUpsert) UpdateToUser() *GoodLedgerUpsert {
	u.SetExcluded(goodledger.FieldToUser)
	return u
}

// AddToUser adds v to the "to_user" field.
func (u *GoodLedgerUpsert) AddToUser(v decimal.Decimal) *GoodLedgerUpsert {
	u.Add(goodledger.FieldToUser, v)
	return u
}

// ClearToUser clears the value of the "to_user" field.
func (u *GoodLedgerUpsert) ClearToUser() *GoodLedgerUpsert {
	u.SetNull(goodledger.FieldToUser)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodLedger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodledger.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodLedgerUpsertOne) UpdateNewValues() *GoodLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodledger.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodLedger.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodLedgerUpsertOne) Ignore() *GoodLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodLedgerUpsertOne) DoNothing() *GoodLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodLedgerCreate.OnConflict
// documentation for more info.
func (u *GoodLedgerUpsertOne) Update(set func(*GoodLedgerUpsert)) *GoodLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodLedgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodLedgerUpsertOne) SetCreatedAt(v uint32) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodLedgerUpsertOne) AddCreatedAt(v uint32) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodLedgerUpsertOne) UpdateCreatedAt() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodLedgerUpsertOne) SetUpdatedAt(v uint32) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodLedgerUpsertOne) AddUpdatedAt(v uint32) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodLedgerUpsertOne) UpdateUpdatedAt() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodLedgerUpsertOne) SetDeletedAt(v uint32) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodLedgerUpsertOne) AddDeletedAt(v uint32) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodLedgerUpsertOne) UpdateDeletedAt() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *GoodLedgerUpsertOne) SetEntID(v uuid.UUID) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodLedgerUpsertOne) UpdateEntID() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodLedgerUpsertOne) SetGoodID(v uuid.UUID) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodLedgerUpsertOne) UpdateGoodID() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodLedgerUpsertOne) ClearGoodID() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodLedgerUpsertOne) SetCoinTypeID(v uuid.UUID) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodLedgerUpsertOne) UpdateCoinTypeID() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodLedgerUpsertOne) ClearCoinTypeID() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *GoodLedgerUpsertOne) SetAmount(v decimal.Decimal) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *GoodLedgerUpsertOne) AddAmount(v decimal.Decimal) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodLedgerUpsertOne) UpdateAmount() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodLedgerUpsertOne) ClearAmount() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.ClearAmount()
	})
}

// SetToPlatform sets the "to_platform" field.
func (u *GoodLedgerUpsertOne) SetToPlatform(v decimal.Decimal) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetToPlatform(v)
	})
}

// AddToPlatform adds v to the "to_platform" field.
func (u *GoodLedgerUpsertOne) AddToPlatform(v decimal.Decimal) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddToPlatform(v)
	})
}

// UpdateToPlatform sets the "to_platform" field to the value that was provided on create.
func (u *GoodLedgerUpsertOne) UpdateToPlatform() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateToPlatform()
	})
}

// ClearToPlatform clears the value of the "to_platform" field.
func (u *GoodLedgerUpsertOne) ClearToPlatform() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.ClearToPlatform()
	})
}

// SetToUser sets the "to_user" field.
func (u *GoodLedgerUpsertOne) SetToUser(v decimal.Decimal) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetToUser(v)
	})
}

// AddToUser adds v to the "to_user" field.
func (u *GoodLedgerUpsertOne) AddToUser(v decimal.Decimal) *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddToUser(v)
	})
}

// UpdateToUser sets the "to_user" field to the value that was provided on create.
func (u *GoodLedgerUpsertOne) UpdateToUser() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateToUser()
	})
}

// ClearToUser clears the value of the "to_user" field.
func (u *GoodLedgerUpsertOne) ClearToUser() *GoodLedgerUpsertOne {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.ClearToUser()
	})
}

// Exec executes the query.
func (u *GoodLedgerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodLedgerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodLedgerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodLedgerUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodLedgerUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodLedgerCreateBulk is the builder for creating many GoodLedger entities in bulk.
type GoodLedgerCreateBulk struct {
	config
	builders []*GoodLedgerCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodLedger entities in the database.
func (glcb *GoodLedgerCreateBulk) Save(ctx context.Context) ([]*GoodLedger, error) {
	specs := make([]*sqlgraph.CreateSpec, len(glcb.builders))
	nodes := make([]*GoodLedger, len(glcb.builders))
	mutators := make([]Mutator, len(glcb.builders))
	for i := range glcb.builders {
		func(i int, root context.Context) {
			builder := glcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodLedgerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, glcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = glcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, glcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, glcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (glcb *GoodLedgerCreateBulk) SaveX(ctx context.Context) []*GoodLedger {
	v, err := glcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (glcb *GoodLedgerCreateBulk) Exec(ctx context.Context) error {
	_, err := glcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glcb *GoodLedgerCreateBulk) ExecX(ctx context.Context) {
	if err := glcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodLedger.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodLedgerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (glcb *GoodLedgerCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodLedgerUpsertBulk {
	glcb.conflict = opts
	return &GoodLedgerUpsertBulk{
		create: glcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodLedger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (glcb *GoodLedgerCreateBulk) OnConflictColumns(columns ...string) *GoodLedgerUpsertBulk {
	glcb.conflict = append(glcb.conflict, sql.ConflictColumns(columns...))
	return &GoodLedgerUpsertBulk{
		create: glcb,
	}
}

// GoodLedgerUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodLedger nodes.
type GoodLedgerUpsertBulk struct {
	create *GoodLedgerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodLedger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodledger.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodLedgerUpsertBulk) UpdateNewValues() *GoodLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodledger.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodLedger.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodLedgerUpsertBulk) Ignore() *GoodLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodLedgerUpsertBulk) DoNothing() *GoodLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodLedgerCreateBulk.OnConflict
// documentation for more info.
func (u *GoodLedgerUpsertBulk) Update(set func(*GoodLedgerUpsert)) *GoodLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodLedgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodLedgerUpsertBulk) SetCreatedAt(v uint32) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodLedgerUpsertBulk) AddCreatedAt(v uint32) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodLedgerUpsertBulk) UpdateCreatedAt() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodLedgerUpsertBulk) SetUpdatedAt(v uint32) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodLedgerUpsertBulk) AddUpdatedAt(v uint32) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodLedgerUpsertBulk) UpdateUpdatedAt() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodLedgerUpsertBulk) SetDeletedAt(v uint32) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodLedgerUpsertBulk) AddDeletedAt(v uint32) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodLedgerUpsertBulk) UpdateDeletedAt() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *GoodLedgerUpsertBulk) SetEntID(v uuid.UUID) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodLedgerUpsertBulk) UpdateEntID() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodLedgerUpsertBulk) SetGoodID(v uuid.UUID) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodLedgerUpsertBulk) UpdateGoodID() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodLedgerUpsertBulk) ClearGoodID() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodLedgerUpsertBulk) SetCoinTypeID(v uuid.UUID) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodLedgerUpsertBulk) UpdateCoinTypeID() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodLedgerUpsertBulk) ClearCoinTypeID() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *GoodLedgerUpsertBulk) SetAmount(v decimal.Decimal) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *GoodLedgerUpsertBulk) AddAmount(v decimal.Decimal) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodLedgerUpsertBulk) UpdateAmount() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodLedgerUpsertBulk) ClearAmount() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.ClearAmount()
	})
}

// SetToPlatform sets the "to_platform" field.
func (u *GoodLedgerUpsertBulk) SetToPlatform(v decimal.Decimal) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetToPlatform(v)
	})
}

// AddToPlatform adds v to the "to_platform" field.
func (u *GoodLedgerUpsertBulk) AddToPlatform(v decimal.Decimal) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddToPlatform(v)
	})
}

// UpdateToPlatform sets the "to_platform" field to the value that was provided on create.
func (u *GoodLedgerUpsertBulk) UpdateToPlatform() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateToPlatform()
	})
}

// ClearToPlatform clears the value of the "to_platform" field.
func (u *GoodLedgerUpsertBulk) ClearToPlatform() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.ClearToPlatform()
	})
}

// SetToUser sets the "to_user" field.
func (u *GoodLedgerUpsertBulk) SetToUser(v decimal.Decimal) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.SetToUser(v)
	})
}

// AddToUser adds v to the "to_user" field.
func (u *GoodLedgerUpsertBulk) AddToUser(v decimal.Decimal) *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.AddToUser(v)
	})
}

// UpdateToUser sets the "to_user" field to the value that was provided on create.
func (u *GoodLedgerUpsertBulk) UpdateToUser() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.UpdateToUser()
	})
}

// ClearToUser clears the value of the "to_user" field.
func (u *GoodLedgerUpsertBulk) ClearToUser() *GoodLedgerUpsertBulk {
	return u.Update(func(s *GoodLedgerUpsert) {
		s.ClearToUser()
	})
}

// Exec executes the query.
func (u *GoodLedgerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodLedgerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodLedgerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodLedgerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
