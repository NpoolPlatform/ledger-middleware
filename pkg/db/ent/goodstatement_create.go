// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/goodstatement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodStatementCreate is the builder for creating a GoodStatement entity.
type GoodStatementCreate struct {
	config
	mutation *GoodStatementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gsc *GoodStatementCreate) SetCreatedAt(u uint32) *GoodStatementCreate {
	gsc.mutation.SetCreatedAt(u)
	return gsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gsc *GoodStatementCreate) SetNillableCreatedAt(u *uint32) *GoodStatementCreate {
	if u != nil {
		gsc.SetCreatedAt(*u)
	}
	return gsc
}

// SetUpdatedAt sets the "updated_at" field.
func (gsc *GoodStatementCreate) SetUpdatedAt(u uint32) *GoodStatementCreate {
	gsc.mutation.SetUpdatedAt(u)
	return gsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gsc *GoodStatementCreate) SetNillableUpdatedAt(u *uint32) *GoodStatementCreate {
	if u != nil {
		gsc.SetUpdatedAt(*u)
	}
	return gsc
}

// SetDeletedAt sets the "deleted_at" field.
func (gsc *GoodStatementCreate) SetDeletedAt(u uint32) *GoodStatementCreate {
	gsc.mutation.SetDeletedAt(u)
	return gsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsc *GoodStatementCreate) SetNillableDeletedAt(u *uint32) *GoodStatementCreate {
	if u != nil {
		gsc.SetDeletedAt(*u)
	}
	return gsc
}

// SetGoodID sets the "good_id" field.
func (gsc *GoodStatementCreate) SetGoodID(u uuid.UUID) *GoodStatementCreate {
	gsc.mutation.SetGoodID(u)
	return gsc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gsc *GoodStatementCreate) SetNillableGoodID(u *uuid.UUID) *GoodStatementCreate {
	if u != nil {
		gsc.SetGoodID(*u)
	}
	return gsc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gsc *GoodStatementCreate) SetCoinTypeID(u uuid.UUID) *GoodStatementCreate {
	gsc.mutation.SetCoinTypeID(u)
	return gsc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (gsc *GoodStatementCreate) SetNillableCoinTypeID(u *uuid.UUID) *GoodStatementCreate {
	if u != nil {
		gsc.SetCoinTypeID(*u)
	}
	return gsc
}

// SetAmount sets the "amount" field.
func (gsc *GoodStatementCreate) SetAmount(d decimal.Decimal) *GoodStatementCreate {
	gsc.mutation.SetAmount(d)
	return gsc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (gsc *GoodStatementCreate) SetNillableAmount(d *decimal.Decimal) *GoodStatementCreate {
	if d != nil {
		gsc.SetAmount(*d)
	}
	return gsc
}

// SetBenefitDate sets the "benefit_date" field.
func (gsc *GoodStatementCreate) SetBenefitDate(u uint32) *GoodStatementCreate {
	gsc.mutation.SetBenefitDate(u)
	return gsc
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (gsc *GoodStatementCreate) SetNillableBenefitDate(u *uint32) *GoodStatementCreate {
	if u != nil {
		gsc.SetBenefitDate(*u)
	}
	return gsc
}

// SetID sets the "id" field.
func (gsc *GoodStatementCreate) SetID(u uuid.UUID) *GoodStatementCreate {
	gsc.mutation.SetID(u)
	return gsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gsc *GoodStatementCreate) SetNillableID(u *uuid.UUID) *GoodStatementCreate {
	if u != nil {
		gsc.SetID(*u)
	}
	return gsc
}

// Mutation returns the GoodStatementMutation object of the builder.
func (gsc *GoodStatementCreate) Mutation() *GoodStatementMutation {
	return gsc.mutation
}

// Save creates the GoodStatement in the database.
func (gsc *GoodStatementCreate) Save(ctx context.Context) (*GoodStatement, error) {
	var (
		err  error
		node *GoodStatement
	)
	if err := gsc.defaults(); err != nil {
		return nil, err
	}
	if len(gsc.hooks) == 0 {
		if err = gsc.check(); err != nil {
			return nil, err
		}
		node, err = gsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodStatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsc.check(); err != nil {
				return nil, err
			}
			gsc.mutation = mutation
			if node, err = gsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gsc.hooks) - 1; i >= 0; i-- {
			if gsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodStatement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodStatementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GoodStatementCreate) SaveX(ctx context.Context) *GoodStatement {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gsc *GoodStatementCreate) Exec(ctx context.Context) error {
	_, err := gsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsc *GoodStatementCreate) ExecX(ctx context.Context) {
	if err := gsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsc *GoodStatementCreate) defaults() error {
	if _, ok := gsc.mutation.CreatedAt(); !ok {
		if goodstatement.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodstatement.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := goodstatement.DefaultCreatedAt()
		gsc.mutation.SetCreatedAt(v)
	}
	if _, ok := gsc.mutation.UpdatedAt(); !ok {
		if goodstatement.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodstatement.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodstatement.DefaultUpdatedAt()
		gsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gsc.mutation.DeletedAt(); !ok {
		if goodstatement.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized goodstatement.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := goodstatement.DefaultDeletedAt()
		gsc.mutation.SetDeletedAt(v)
	}
	if _, ok := gsc.mutation.GoodID(); !ok {
		if goodstatement.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized goodstatement.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := goodstatement.DefaultGoodID()
		gsc.mutation.SetGoodID(v)
	}
	if _, ok := gsc.mutation.CoinTypeID(); !ok {
		if goodstatement.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized goodstatement.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := goodstatement.DefaultCoinTypeID()
		gsc.mutation.SetCoinTypeID(v)
	}
	if _, ok := gsc.mutation.BenefitDate(); !ok {
		v := goodstatement.DefaultBenefitDate
		gsc.mutation.SetBenefitDate(v)
	}
	if _, ok := gsc.mutation.ID(); !ok {
		if goodstatement.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized goodstatement.DefaultID (forgotten import ent/runtime?)")
		}
		v := goodstatement.DefaultID()
		gsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GoodStatementCreate) check() error {
	if _, ok := gsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GoodStatement.created_at"`)}
	}
	if _, ok := gsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GoodStatement.updated_at"`)}
	}
	if _, ok := gsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "GoodStatement.deleted_at"`)}
	}
	return nil
}

func (gsc *GoodStatementCreate) sqlSave(ctx context.Context) (*GoodStatement, error) {
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gsc *GoodStatementCreate) createSpec() (*GoodStatement, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodStatement{config: gsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodstatement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodstatement.FieldID,
			},
		}
	)
	_spec.OnConflict = gsc.conflict
	if id, ok := gsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodstatement.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodstatement.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodstatement.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gsc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodstatement.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := gsc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodstatement.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := gsc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: goodstatement.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := gsc.mutation.BenefitDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodstatement.FieldBenefitDate,
		})
		_node.BenefitDate = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodStatement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodStatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gsc *GoodStatementCreate) OnConflict(opts ...sql.ConflictOption) *GoodStatementUpsertOne {
	gsc.conflict = opts
	return &GoodStatementUpsertOne{
		create: gsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodStatement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gsc *GoodStatementCreate) OnConflictColumns(columns ...string) *GoodStatementUpsertOne {
	gsc.conflict = append(gsc.conflict, sql.ConflictColumns(columns...))
	return &GoodStatementUpsertOne{
		create: gsc,
	}
}

type (
	// GoodStatementUpsertOne is the builder for "upsert"-ing
	//  one GoodStatement node.
	GoodStatementUpsertOne struct {
		create *GoodStatementCreate
	}

	// GoodStatementUpsert is the "OnConflict" setter.
	GoodStatementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GoodStatementUpsert) SetCreatedAt(v uint32) *GoodStatementUpsert {
	u.Set(goodstatement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodStatementUpsert) UpdateCreatedAt() *GoodStatementUpsert {
	u.SetExcluded(goodstatement.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodStatementUpsert) AddCreatedAt(v uint32) *GoodStatementUpsert {
	u.Add(goodstatement.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodStatementUpsert) SetUpdatedAt(v uint32) *GoodStatementUpsert {
	u.Set(goodstatement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodStatementUpsert) UpdateUpdatedAt() *GoodStatementUpsert {
	u.SetExcluded(goodstatement.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodStatementUpsert) AddUpdatedAt(v uint32) *GoodStatementUpsert {
	u.Add(goodstatement.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodStatementUpsert) SetDeletedAt(v uint32) *GoodStatementUpsert {
	u.Set(goodstatement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodStatementUpsert) UpdateDeletedAt() *GoodStatementUpsert {
	u.SetExcluded(goodstatement.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodStatementUpsert) AddDeletedAt(v uint32) *GoodStatementUpsert {
	u.Add(goodstatement.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodStatementUpsert) SetGoodID(v uuid.UUID) *GoodStatementUpsert {
	u.Set(goodstatement.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodStatementUpsert) UpdateGoodID() *GoodStatementUpsert {
	u.SetExcluded(goodstatement.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodStatementUpsert) ClearGoodID() *GoodStatementUpsert {
	u.SetNull(goodstatement.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodStatementUpsert) SetCoinTypeID(v uuid.UUID) *GoodStatementUpsert {
	u.Set(goodstatement.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodStatementUpsert) UpdateCoinTypeID() *GoodStatementUpsert {
	u.SetExcluded(goodstatement.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodStatementUpsert) ClearCoinTypeID() *GoodStatementUpsert {
	u.SetNull(goodstatement.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *GoodStatementUpsert) SetAmount(v decimal.Decimal) *GoodStatementUpsert {
	u.Set(goodstatement.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodStatementUpsert) UpdateAmount() *GoodStatementUpsert {
	u.SetExcluded(goodstatement.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *GoodStatementUpsert) AddAmount(v decimal.Decimal) *GoodStatementUpsert {
	u.Add(goodstatement.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodStatementUpsert) ClearAmount() *GoodStatementUpsert {
	u.SetNull(goodstatement.FieldAmount)
	return u
}

// SetBenefitDate sets the "benefit_date" field.
func (u *GoodStatementUpsert) SetBenefitDate(v uint32) *GoodStatementUpsert {
	u.Set(goodstatement.FieldBenefitDate, v)
	return u
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *GoodStatementUpsert) UpdateBenefitDate() *GoodStatementUpsert {
	u.SetExcluded(goodstatement.FieldBenefitDate)
	return u
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *GoodStatementUpsert) AddBenefitDate(v uint32) *GoodStatementUpsert {
	u.Add(goodstatement.FieldBenefitDate, v)
	return u
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *GoodStatementUpsert) ClearBenefitDate() *GoodStatementUpsert {
	u.SetNull(goodstatement.FieldBenefitDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodStatement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodstatement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodStatementUpsertOne) UpdateNewValues() *GoodStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodstatement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodStatement.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodStatementUpsertOne) Ignore() *GoodStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodStatementUpsertOne) DoNothing() *GoodStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodStatementCreate.OnConflict
// documentation for more info.
func (u *GoodStatementUpsertOne) Update(set func(*GoodStatementUpsert)) *GoodStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodStatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodStatementUpsertOne) SetCreatedAt(v uint32) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodStatementUpsertOne) AddCreatedAt(v uint32) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodStatementUpsertOne) UpdateCreatedAt() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodStatementUpsertOne) SetUpdatedAt(v uint32) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodStatementUpsertOne) AddUpdatedAt(v uint32) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodStatementUpsertOne) UpdateUpdatedAt() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodStatementUpsertOne) SetDeletedAt(v uint32) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodStatementUpsertOne) AddDeletedAt(v uint32) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodStatementUpsertOne) UpdateDeletedAt() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodStatementUpsertOne) SetGoodID(v uuid.UUID) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodStatementUpsertOne) UpdateGoodID() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodStatementUpsertOne) ClearGoodID() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodStatementUpsertOne) SetCoinTypeID(v uuid.UUID) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodStatementUpsertOne) UpdateCoinTypeID() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodStatementUpsertOne) ClearCoinTypeID() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *GoodStatementUpsertOne) SetAmount(v decimal.Decimal) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *GoodStatementUpsertOne) AddAmount(v decimal.Decimal) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodStatementUpsertOne) UpdateAmount() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodStatementUpsertOne) ClearAmount() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.ClearAmount()
	})
}

// SetBenefitDate sets the "benefit_date" field.
func (u *GoodStatementUpsertOne) SetBenefitDate(v uint32) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetBenefitDate(v)
	})
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *GoodStatementUpsertOne) AddBenefitDate(v uint32) *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.AddBenefitDate(v)
	})
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *GoodStatementUpsertOne) UpdateBenefitDate() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateBenefitDate()
	})
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *GoodStatementUpsertOne) ClearBenefitDate() *GoodStatementUpsertOne {
	return u.Update(func(s *GoodStatementUpsert) {
		s.ClearBenefitDate()
	})
}

// Exec executes the query.
func (u *GoodStatementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodStatementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodStatementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodStatementUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GoodStatementUpsertOne.ID is not supported by MySQL driver. Use GoodStatementUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodStatementUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodStatementCreateBulk is the builder for creating many GoodStatement entities in bulk.
type GoodStatementCreateBulk struct {
	config
	builders []*GoodStatementCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodStatement entities in the database.
func (gscb *GoodStatementCreateBulk) Save(ctx context.Context) ([]*GoodStatement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GoodStatement, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodStatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GoodStatementCreateBulk) SaveX(ctx context.Context) []*GoodStatement {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gscb *GoodStatementCreateBulk) Exec(ctx context.Context) error {
	_, err := gscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gscb *GoodStatementCreateBulk) ExecX(ctx context.Context) {
	if err := gscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodStatement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodStatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gscb *GoodStatementCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodStatementUpsertBulk {
	gscb.conflict = opts
	return &GoodStatementUpsertBulk{
		create: gscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodStatement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gscb *GoodStatementCreateBulk) OnConflictColumns(columns ...string) *GoodStatementUpsertBulk {
	gscb.conflict = append(gscb.conflict, sql.ConflictColumns(columns...))
	return &GoodStatementUpsertBulk{
		create: gscb,
	}
}

// GoodStatementUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodStatement nodes.
type GoodStatementUpsertBulk struct {
	create *GoodStatementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodStatement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodstatement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodStatementUpsertBulk) UpdateNewValues() *GoodStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodstatement.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodStatement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodStatementUpsertBulk) Ignore() *GoodStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodStatementUpsertBulk) DoNothing() *GoodStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodStatementCreateBulk.OnConflict
// documentation for more info.
func (u *GoodStatementUpsertBulk) Update(set func(*GoodStatementUpsert)) *GoodStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodStatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodStatementUpsertBulk) SetCreatedAt(v uint32) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodStatementUpsertBulk) AddCreatedAt(v uint32) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodStatementUpsertBulk) UpdateCreatedAt() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodStatementUpsertBulk) SetUpdatedAt(v uint32) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodStatementUpsertBulk) AddUpdatedAt(v uint32) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodStatementUpsertBulk) UpdateUpdatedAt() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodStatementUpsertBulk) SetDeletedAt(v uint32) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodStatementUpsertBulk) AddDeletedAt(v uint32) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodStatementUpsertBulk) UpdateDeletedAt() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodStatementUpsertBulk) SetGoodID(v uuid.UUID) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodStatementUpsertBulk) UpdateGoodID() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodStatementUpsertBulk) ClearGoodID() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodStatementUpsertBulk) SetCoinTypeID(v uuid.UUID) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodStatementUpsertBulk) UpdateCoinTypeID() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodStatementUpsertBulk) ClearCoinTypeID() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *GoodStatementUpsertBulk) SetAmount(v decimal.Decimal) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *GoodStatementUpsertBulk) AddAmount(v decimal.Decimal) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodStatementUpsertBulk) UpdateAmount() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodStatementUpsertBulk) ClearAmount() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.ClearAmount()
	})
}

// SetBenefitDate sets the "benefit_date" field.
func (u *GoodStatementUpsertBulk) SetBenefitDate(v uint32) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.SetBenefitDate(v)
	})
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *GoodStatementUpsertBulk) AddBenefitDate(v uint32) *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.AddBenefitDate(v)
	})
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *GoodStatementUpsertBulk) UpdateBenefitDate() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.UpdateBenefitDate()
	})
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *GoodStatementUpsertBulk) ClearBenefitDate() *GoodStatementUpsertBulk {
	return u.Update(func(s *GoodStatementUpsert) {
		s.ClearBenefitDate()
	})
}

// Exec executes the query.
func (u *GoodStatementUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodStatementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodStatementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodStatementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
