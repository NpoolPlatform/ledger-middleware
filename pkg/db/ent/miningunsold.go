// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/miningunsold"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// MiningUnsold is the model entity for the MiningUnsold schema.
type MiningUnsold struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// BenefitDate holds the value of the "benefit_date" field.
	BenefitDate uint32 `json:"benefit_date,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MiningUnsold) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case miningunsold.FieldAmount:
			values[i] = new(decimal.Decimal)
		case miningunsold.FieldCreatedAt, miningunsold.FieldUpdatedAt, miningunsold.FieldDeletedAt, miningunsold.FieldBenefitDate:
			values[i] = new(sql.NullInt64)
		case miningunsold.FieldID, miningunsold.FieldGoodID, miningunsold.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MiningUnsold", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MiningUnsold fields.
func (mu *MiningUnsold) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case miningunsold.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mu.ID = *value
			}
		case miningunsold.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mu.CreatedAt = uint32(value.Int64)
			}
		case miningunsold.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mu.UpdatedAt = uint32(value.Int64)
			}
		case miningunsold.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mu.DeletedAt = uint32(value.Int64)
			}
		case miningunsold.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				mu.GoodID = *value
			}
		case miningunsold.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				mu.CoinTypeID = *value
			}
		case miningunsold.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				mu.Amount = *value
			}
		case miningunsold.FieldBenefitDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_date", values[i])
			} else if value.Valid {
				mu.BenefitDate = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MiningUnsold.
// Note that you need to call MiningUnsold.Unwrap() before calling this method if this MiningUnsold
// was returned from a transaction, and the transaction was committed or rolled back.
func (mu *MiningUnsold) Update() *MiningUnsoldUpdateOne {
	return (&MiningUnsoldClient{config: mu.config}).UpdateOne(mu)
}

// Unwrap unwraps the MiningUnsold entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mu *MiningUnsold) Unwrap() *MiningUnsold {
	_tx, ok := mu.config.driver.(*txDriver)
	if !ok {
		panic("ent: MiningUnsold is not a transactional entity")
	}
	mu.config.driver = _tx.drv
	return mu
}

// String implements the fmt.Stringer.
func (mu *MiningUnsold) String() string {
	var builder strings.Builder
	builder.WriteString("MiningUnsold(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", mu.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", mu.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", mu.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", mu.GoodID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", mu.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", mu.Amount))
	builder.WriteString(", ")
	builder.WriteString("benefit_date=")
	builder.WriteString(fmt.Sprintf("%v", mu.BenefitDate))
	builder.WriteByte(')')
	return builder.String()
}

// MiningUnsolds is a parsable slice of MiningUnsold.
type MiningUnsolds []*MiningUnsold

func (mu MiningUnsolds) config(cfg config) {
	for _i := range mu {
		mu[_i].config = cfg
	}
}
