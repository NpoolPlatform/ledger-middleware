// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/simulateledger"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SimulateLedgerUpdate is the builder for updating SimulateLedger entities.
type SimulateLedgerUpdate struct {
	config
	hooks    []Hook
	mutation *SimulateLedgerMutation
}

// Where appends a list predicates to the SimulateLedgerUpdate builder.
func (slu *SimulateLedgerUpdate) Where(ps ...predicate.SimulateLedger) *SimulateLedgerUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetCreatedAt sets the "created_at" field.
func (slu *SimulateLedgerUpdate) SetCreatedAt(u uint32) *SimulateLedgerUpdate {
	slu.mutation.ResetCreatedAt()
	slu.mutation.SetCreatedAt(u)
	return slu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slu *SimulateLedgerUpdate) SetNillableCreatedAt(u *uint32) *SimulateLedgerUpdate {
	if u != nil {
		slu.SetCreatedAt(*u)
	}
	return slu
}

// AddCreatedAt adds u to the "created_at" field.
func (slu *SimulateLedgerUpdate) AddCreatedAt(u int32) *SimulateLedgerUpdate {
	slu.mutation.AddCreatedAt(u)
	return slu
}

// SetUpdatedAt sets the "updated_at" field.
func (slu *SimulateLedgerUpdate) SetUpdatedAt(u uint32) *SimulateLedgerUpdate {
	slu.mutation.ResetUpdatedAt()
	slu.mutation.SetUpdatedAt(u)
	return slu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (slu *SimulateLedgerUpdate) AddUpdatedAt(u int32) *SimulateLedgerUpdate {
	slu.mutation.AddUpdatedAt(u)
	return slu
}

// SetDeletedAt sets the "deleted_at" field.
func (slu *SimulateLedgerUpdate) SetDeletedAt(u uint32) *SimulateLedgerUpdate {
	slu.mutation.ResetDeletedAt()
	slu.mutation.SetDeletedAt(u)
	return slu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (slu *SimulateLedgerUpdate) SetNillableDeletedAt(u *uint32) *SimulateLedgerUpdate {
	if u != nil {
		slu.SetDeletedAt(*u)
	}
	return slu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (slu *SimulateLedgerUpdate) AddDeletedAt(u int32) *SimulateLedgerUpdate {
	slu.mutation.AddDeletedAt(u)
	return slu
}

// SetEntID sets the "ent_id" field.
func (slu *SimulateLedgerUpdate) SetEntID(u uuid.UUID) *SimulateLedgerUpdate {
	slu.mutation.SetEntID(u)
	return slu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (slu *SimulateLedgerUpdate) SetNillableEntID(u *uuid.UUID) *SimulateLedgerUpdate {
	if u != nil {
		slu.SetEntID(*u)
	}
	return slu
}

// SetAppID sets the "app_id" field.
func (slu *SimulateLedgerUpdate) SetAppID(u uuid.UUID) *SimulateLedgerUpdate {
	slu.mutation.SetAppID(u)
	return slu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (slu *SimulateLedgerUpdate) SetNillableAppID(u *uuid.UUID) *SimulateLedgerUpdate {
	if u != nil {
		slu.SetAppID(*u)
	}
	return slu
}

// ClearAppID clears the value of the "app_id" field.
func (slu *SimulateLedgerUpdate) ClearAppID() *SimulateLedgerUpdate {
	slu.mutation.ClearAppID()
	return slu
}

// SetUserID sets the "user_id" field.
func (slu *SimulateLedgerUpdate) SetUserID(u uuid.UUID) *SimulateLedgerUpdate {
	slu.mutation.SetUserID(u)
	return slu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (slu *SimulateLedgerUpdate) SetNillableUserID(u *uuid.UUID) *SimulateLedgerUpdate {
	if u != nil {
		slu.SetUserID(*u)
	}
	return slu
}

// ClearUserID clears the value of the "user_id" field.
func (slu *SimulateLedgerUpdate) ClearUserID() *SimulateLedgerUpdate {
	slu.mutation.ClearUserID()
	return slu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (slu *SimulateLedgerUpdate) SetCoinTypeID(u uuid.UUID) *SimulateLedgerUpdate {
	slu.mutation.SetCoinTypeID(u)
	return slu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (slu *SimulateLedgerUpdate) SetNillableCoinTypeID(u *uuid.UUID) *SimulateLedgerUpdate {
	if u != nil {
		slu.SetCoinTypeID(*u)
	}
	return slu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (slu *SimulateLedgerUpdate) ClearCoinTypeID() *SimulateLedgerUpdate {
	slu.mutation.ClearCoinTypeID()
	return slu
}

// SetIncoming sets the "incoming" field.
func (slu *SimulateLedgerUpdate) SetIncoming(d decimal.Decimal) *SimulateLedgerUpdate {
	slu.mutation.ResetIncoming()
	slu.mutation.SetIncoming(d)
	return slu
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (slu *SimulateLedgerUpdate) SetNillableIncoming(d *decimal.Decimal) *SimulateLedgerUpdate {
	if d != nil {
		slu.SetIncoming(*d)
	}
	return slu
}

// AddIncoming adds d to the "incoming" field.
func (slu *SimulateLedgerUpdate) AddIncoming(d decimal.Decimal) *SimulateLedgerUpdate {
	slu.mutation.AddIncoming(d)
	return slu
}

// ClearIncoming clears the value of the "incoming" field.
func (slu *SimulateLedgerUpdate) ClearIncoming() *SimulateLedgerUpdate {
	slu.mutation.ClearIncoming()
	return slu
}

// SetOutcoming sets the "outcoming" field.
func (slu *SimulateLedgerUpdate) SetOutcoming(d decimal.Decimal) *SimulateLedgerUpdate {
	slu.mutation.ResetOutcoming()
	slu.mutation.SetOutcoming(d)
	return slu
}

// SetNillableOutcoming sets the "outcoming" field if the given value is not nil.
func (slu *SimulateLedgerUpdate) SetNillableOutcoming(d *decimal.Decimal) *SimulateLedgerUpdate {
	if d != nil {
		slu.SetOutcoming(*d)
	}
	return slu
}

// AddOutcoming adds d to the "outcoming" field.
func (slu *SimulateLedgerUpdate) AddOutcoming(d decimal.Decimal) *SimulateLedgerUpdate {
	slu.mutation.AddOutcoming(d)
	return slu
}

// ClearOutcoming clears the value of the "outcoming" field.
func (slu *SimulateLedgerUpdate) ClearOutcoming() *SimulateLedgerUpdate {
	slu.mutation.ClearOutcoming()
	return slu
}

// Mutation returns the SimulateLedgerMutation object of the builder.
func (slu *SimulateLedgerUpdate) Mutation() *SimulateLedgerMutation {
	return slu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SimulateLedgerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := slu.defaults(); err != nil {
		return 0, err
	}
	if len(slu.hooks) == 0 {
		affected, err = slu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SimulateLedgerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			slu.mutation = mutation
			affected, err = slu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(slu.hooks) - 1; i >= 0; i-- {
			if slu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = slu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SimulateLedgerUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SimulateLedgerUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SimulateLedgerUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slu *SimulateLedgerUpdate) defaults() error {
	if _, ok := slu.mutation.UpdatedAt(); !ok {
		if simulateledger.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateledger.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := simulateledger.UpdateDefaultUpdatedAt()
		slu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (slu *SimulateLedgerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   simulateledger.Table,
			Columns: simulateledger.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: simulateledger.FieldID,
			},
		},
	}
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldCreatedAt,
		})
	}
	if value, ok := slu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldCreatedAt,
		})
	}
	if value, ok := slu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldUpdatedAt,
		})
	}
	if value, ok := slu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldUpdatedAt,
		})
	}
	if value, ok := slu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldDeletedAt,
		})
	}
	if value, ok := slu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldDeletedAt,
		})
	}
	if value, ok := slu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldEntID,
		})
	}
	if value, ok := slu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldAppID,
		})
	}
	if slu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: simulateledger.FieldAppID,
		})
	}
	if value, ok := slu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldUserID,
		})
	}
	if slu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: simulateledger.FieldUserID,
		})
	}
	if value, ok := slu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldCoinTypeID,
		})
	}
	if slu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: simulateledger.FieldCoinTypeID,
		})
	}
	if value, ok := slu.mutation.Incoming(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateledger.FieldIncoming,
		})
	}
	if value, ok := slu.mutation.AddedIncoming(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateledger.FieldIncoming,
		})
	}
	if slu.mutation.IncomingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: simulateledger.FieldIncoming,
		})
	}
	if value, ok := slu.mutation.Outcoming(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateledger.FieldOutcoming,
		})
	}
	if value, ok := slu.mutation.AddedOutcoming(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateledger.FieldOutcoming,
		})
	}
	if slu.mutation.OutcomingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: simulateledger.FieldOutcoming,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{simulateledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SimulateLedgerUpdateOne is the builder for updating a single SimulateLedger entity.
type SimulateLedgerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SimulateLedgerMutation
}

// SetCreatedAt sets the "created_at" field.
func (sluo *SimulateLedgerUpdateOne) SetCreatedAt(u uint32) *SimulateLedgerUpdateOne {
	sluo.mutation.ResetCreatedAt()
	sluo.mutation.SetCreatedAt(u)
	return sluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sluo *SimulateLedgerUpdateOne) SetNillableCreatedAt(u *uint32) *SimulateLedgerUpdateOne {
	if u != nil {
		sluo.SetCreatedAt(*u)
	}
	return sluo
}

// AddCreatedAt adds u to the "created_at" field.
func (sluo *SimulateLedgerUpdateOne) AddCreatedAt(u int32) *SimulateLedgerUpdateOne {
	sluo.mutation.AddCreatedAt(u)
	return sluo
}

// SetUpdatedAt sets the "updated_at" field.
func (sluo *SimulateLedgerUpdateOne) SetUpdatedAt(u uint32) *SimulateLedgerUpdateOne {
	sluo.mutation.ResetUpdatedAt()
	sluo.mutation.SetUpdatedAt(u)
	return sluo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (sluo *SimulateLedgerUpdateOne) AddUpdatedAt(u int32) *SimulateLedgerUpdateOne {
	sluo.mutation.AddUpdatedAt(u)
	return sluo
}

// SetDeletedAt sets the "deleted_at" field.
func (sluo *SimulateLedgerUpdateOne) SetDeletedAt(u uint32) *SimulateLedgerUpdateOne {
	sluo.mutation.ResetDeletedAt()
	sluo.mutation.SetDeletedAt(u)
	return sluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sluo *SimulateLedgerUpdateOne) SetNillableDeletedAt(u *uint32) *SimulateLedgerUpdateOne {
	if u != nil {
		sluo.SetDeletedAt(*u)
	}
	return sluo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (sluo *SimulateLedgerUpdateOne) AddDeletedAt(u int32) *SimulateLedgerUpdateOne {
	sluo.mutation.AddDeletedAt(u)
	return sluo
}

// SetEntID sets the "ent_id" field.
func (sluo *SimulateLedgerUpdateOne) SetEntID(u uuid.UUID) *SimulateLedgerUpdateOne {
	sluo.mutation.SetEntID(u)
	return sluo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sluo *SimulateLedgerUpdateOne) SetNillableEntID(u *uuid.UUID) *SimulateLedgerUpdateOne {
	if u != nil {
		sluo.SetEntID(*u)
	}
	return sluo
}

// SetAppID sets the "app_id" field.
func (sluo *SimulateLedgerUpdateOne) SetAppID(u uuid.UUID) *SimulateLedgerUpdateOne {
	sluo.mutation.SetAppID(u)
	return sluo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (sluo *SimulateLedgerUpdateOne) SetNillableAppID(u *uuid.UUID) *SimulateLedgerUpdateOne {
	if u != nil {
		sluo.SetAppID(*u)
	}
	return sluo
}

// ClearAppID clears the value of the "app_id" field.
func (sluo *SimulateLedgerUpdateOne) ClearAppID() *SimulateLedgerUpdateOne {
	sluo.mutation.ClearAppID()
	return sluo
}

// SetUserID sets the "user_id" field.
func (sluo *SimulateLedgerUpdateOne) SetUserID(u uuid.UUID) *SimulateLedgerUpdateOne {
	sluo.mutation.SetUserID(u)
	return sluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sluo *SimulateLedgerUpdateOne) SetNillableUserID(u *uuid.UUID) *SimulateLedgerUpdateOne {
	if u != nil {
		sluo.SetUserID(*u)
	}
	return sluo
}

// ClearUserID clears the value of the "user_id" field.
func (sluo *SimulateLedgerUpdateOne) ClearUserID() *SimulateLedgerUpdateOne {
	sluo.mutation.ClearUserID()
	return sluo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (sluo *SimulateLedgerUpdateOne) SetCoinTypeID(u uuid.UUID) *SimulateLedgerUpdateOne {
	sluo.mutation.SetCoinTypeID(u)
	return sluo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (sluo *SimulateLedgerUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *SimulateLedgerUpdateOne {
	if u != nil {
		sluo.SetCoinTypeID(*u)
	}
	return sluo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (sluo *SimulateLedgerUpdateOne) ClearCoinTypeID() *SimulateLedgerUpdateOne {
	sluo.mutation.ClearCoinTypeID()
	return sluo
}

// SetIncoming sets the "incoming" field.
func (sluo *SimulateLedgerUpdateOne) SetIncoming(d decimal.Decimal) *SimulateLedgerUpdateOne {
	sluo.mutation.ResetIncoming()
	sluo.mutation.SetIncoming(d)
	return sluo
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (sluo *SimulateLedgerUpdateOne) SetNillableIncoming(d *decimal.Decimal) *SimulateLedgerUpdateOne {
	if d != nil {
		sluo.SetIncoming(*d)
	}
	return sluo
}

// AddIncoming adds d to the "incoming" field.
func (sluo *SimulateLedgerUpdateOne) AddIncoming(d decimal.Decimal) *SimulateLedgerUpdateOne {
	sluo.mutation.AddIncoming(d)
	return sluo
}

// ClearIncoming clears the value of the "incoming" field.
func (sluo *SimulateLedgerUpdateOne) ClearIncoming() *SimulateLedgerUpdateOne {
	sluo.mutation.ClearIncoming()
	return sluo
}

// SetOutcoming sets the "outcoming" field.
func (sluo *SimulateLedgerUpdateOne) SetOutcoming(d decimal.Decimal) *SimulateLedgerUpdateOne {
	sluo.mutation.ResetOutcoming()
	sluo.mutation.SetOutcoming(d)
	return sluo
}

// SetNillableOutcoming sets the "outcoming" field if the given value is not nil.
func (sluo *SimulateLedgerUpdateOne) SetNillableOutcoming(d *decimal.Decimal) *SimulateLedgerUpdateOne {
	if d != nil {
		sluo.SetOutcoming(*d)
	}
	return sluo
}

// AddOutcoming adds d to the "outcoming" field.
func (sluo *SimulateLedgerUpdateOne) AddOutcoming(d decimal.Decimal) *SimulateLedgerUpdateOne {
	sluo.mutation.AddOutcoming(d)
	return sluo
}

// ClearOutcoming clears the value of the "outcoming" field.
func (sluo *SimulateLedgerUpdateOne) ClearOutcoming() *SimulateLedgerUpdateOne {
	sluo.mutation.ClearOutcoming()
	return sluo
}

// Mutation returns the SimulateLedgerMutation object of the builder.
func (sluo *SimulateLedgerUpdateOne) Mutation() *SimulateLedgerMutation {
	return sluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SimulateLedgerUpdateOne) Select(field string, fields ...string) *SimulateLedgerUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SimulateLedger entity.
func (sluo *SimulateLedgerUpdateOne) Save(ctx context.Context) (*SimulateLedger, error) {
	var (
		err  error
		node *SimulateLedger
	)
	if err := sluo.defaults(); err != nil {
		return nil, err
	}
	if len(sluo.hooks) == 0 {
		node, err = sluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SimulateLedgerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sluo.mutation = mutation
			node, err = sluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sluo.hooks) - 1; i >= 0; i-- {
			if sluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SimulateLedger)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SimulateLedgerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SimulateLedgerUpdateOne) SaveX(ctx context.Context) *SimulateLedger {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SimulateLedgerUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SimulateLedgerUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sluo *SimulateLedgerUpdateOne) defaults() error {
	if _, ok := sluo.mutation.UpdatedAt(); !ok {
		if simulateledger.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateledger.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := simulateledger.UpdateDefaultUpdatedAt()
		sluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (sluo *SimulateLedgerUpdateOne) sqlSave(ctx context.Context) (_node *SimulateLedger, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   simulateledger.Table,
			Columns: simulateledger.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: simulateledger.FieldID,
			},
		},
	}
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SimulateLedger.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, simulateledger.FieldID)
		for _, f := range fields {
			if !simulateledger.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != simulateledger.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldCreatedAt,
		})
	}
	if value, ok := sluo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldCreatedAt,
		})
	}
	if value, ok := sluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldUpdatedAt,
		})
	}
	if value, ok := sluo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldUpdatedAt,
		})
	}
	if value, ok := sluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldDeletedAt,
		})
	}
	if value, ok := sluo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateledger.FieldDeletedAt,
		})
	}
	if value, ok := sluo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldEntID,
		})
	}
	if value, ok := sluo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldAppID,
		})
	}
	if sluo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: simulateledger.FieldAppID,
		})
	}
	if value, ok := sluo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldUserID,
		})
	}
	if sluo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: simulateledger.FieldUserID,
		})
	}
	if value, ok := sluo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateledger.FieldCoinTypeID,
		})
	}
	if sluo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: simulateledger.FieldCoinTypeID,
		})
	}
	if value, ok := sluo.mutation.Incoming(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateledger.FieldIncoming,
		})
	}
	if value, ok := sluo.mutation.AddedIncoming(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateledger.FieldIncoming,
		})
	}
	if sluo.mutation.IncomingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: simulateledger.FieldIncoming,
		})
	}
	if value, ok := sluo.mutation.Outcoming(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateledger.FieldOutcoming,
		})
	}
	if value, ok := sluo.mutation.AddedOutcoming(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: simulateledger.FieldOutcoming,
		})
	}
	if sluo.mutation.OutcomingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: simulateledger.FieldOutcoming,
		})
	}
	_node = &SimulateLedger{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{simulateledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
