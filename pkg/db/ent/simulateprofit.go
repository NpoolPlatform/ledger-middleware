// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/simulateprofit"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SimulateProfit is the model entity for the SimulateProfit schema.
type SimulateProfit struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// Incoming holds the value of the "incoming" field.
	Incoming decimal.Decimal `json:"incoming,omitempty"`
	// SendCoupon holds the value of the "send_coupon" field.
	SendCoupon bool `json:"send_coupon,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SimulateProfit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case simulateprofit.FieldIncoming:
			values[i] = new(decimal.Decimal)
		case simulateprofit.FieldSendCoupon:
			values[i] = new(sql.NullBool)
		case simulateprofit.FieldID, simulateprofit.FieldCreatedAt, simulateprofit.FieldUpdatedAt, simulateprofit.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case simulateprofit.FieldEntID, simulateprofit.FieldAppID, simulateprofit.FieldUserID, simulateprofit.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SimulateProfit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SimulateProfit fields.
func (sp *SimulateProfit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case simulateprofit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = uint32(value.Int64)
		case simulateprofit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = uint32(value.Int64)
			}
		case simulateprofit.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = uint32(value.Int64)
			}
		case simulateprofit.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sp.DeletedAt = uint32(value.Int64)
			}
		case simulateprofit.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				sp.EntID = *value
			}
		case simulateprofit.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				sp.AppID = *value
			}
		case simulateprofit.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				sp.UserID = *value
			}
		case simulateprofit.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				sp.CoinTypeID = *value
			}
		case simulateprofit.FieldIncoming:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field incoming", values[i])
			} else if value != nil {
				sp.Incoming = *value
			}
		case simulateprofit.FieldSendCoupon:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field send_coupon", values[i])
			} else if value.Valid {
				sp.SendCoupon = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SimulateProfit.
// Note that you need to call SimulateProfit.Unwrap() before calling this method if this SimulateProfit
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SimulateProfit) Update() *SimulateProfitUpdateOne {
	return (&SimulateProfitClient{config: sp.config}).UpdateOne(sp)
}

// Unwrap unwraps the SimulateProfit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SimulateProfit) Unwrap() *SimulateProfit {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SimulateProfit is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SimulateProfit) String() string {
	var builder strings.Builder
	builder.WriteString("SimulateProfit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sp.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sp.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", sp.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.UserID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("incoming=")
	builder.WriteString(fmt.Sprintf("%v", sp.Incoming))
	builder.WriteString(", ")
	builder.WriteString("send_coupon=")
	builder.WriteString(fmt.Sprintf("%v", sp.SendCoupon))
	builder.WriteByte(')')
	return builder.String()
}

// SimulateProfits is a parsable slice of SimulateProfit.
type SimulateProfits []*SimulateProfit

func (sp SimulateProfits) config(cfg config) {
	for _i := range sp {
		sp[_i].config = cfg
	}
}
