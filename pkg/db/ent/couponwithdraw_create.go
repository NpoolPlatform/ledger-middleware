// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/couponwithdraw"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponWithdrawCreate is the builder for creating a CouponWithdraw entity.
type CouponWithdrawCreate struct {
	config
	mutation *CouponWithdrawMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cwc *CouponWithdrawCreate) SetCreatedAt(u uint32) *CouponWithdrawCreate {
	cwc.mutation.SetCreatedAt(u)
	return cwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableCreatedAt(u *uint32) *CouponWithdrawCreate {
	if u != nil {
		cwc.SetCreatedAt(*u)
	}
	return cwc
}

// SetUpdatedAt sets the "updated_at" field.
func (cwc *CouponWithdrawCreate) SetUpdatedAt(u uint32) *CouponWithdrawCreate {
	cwc.mutation.SetUpdatedAt(u)
	return cwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableUpdatedAt(u *uint32) *CouponWithdrawCreate {
	if u != nil {
		cwc.SetUpdatedAt(*u)
	}
	return cwc
}

// SetDeletedAt sets the "deleted_at" field.
func (cwc *CouponWithdrawCreate) SetDeletedAt(u uint32) *CouponWithdrawCreate {
	cwc.mutation.SetDeletedAt(u)
	return cwc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableDeletedAt(u *uint32) *CouponWithdrawCreate {
	if u != nil {
		cwc.SetDeletedAt(*u)
	}
	return cwc
}

// SetEntID sets the "ent_id" field.
func (cwc *CouponWithdrawCreate) SetEntID(u uuid.UUID) *CouponWithdrawCreate {
	cwc.mutation.SetEntID(u)
	return cwc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableEntID(u *uuid.UUID) *CouponWithdrawCreate {
	if u != nil {
		cwc.SetEntID(*u)
	}
	return cwc
}

// SetAppID sets the "app_id" field.
func (cwc *CouponWithdrawCreate) SetAppID(u uuid.UUID) *CouponWithdrawCreate {
	cwc.mutation.SetAppID(u)
	return cwc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableAppID(u *uuid.UUID) *CouponWithdrawCreate {
	if u != nil {
		cwc.SetAppID(*u)
	}
	return cwc
}

// SetUserID sets the "user_id" field.
func (cwc *CouponWithdrawCreate) SetUserID(u uuid.UUID) *CouponWithdrawCreate {
	cwc.mutation.SetUserID(u)
	return cwc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableUserID(u *uuid.UUID) *CouponWithdrawCreate {
	if u != nil {
		cwc.SetUserID(*u)
	}
	return cwc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cwc *CouponWithdrawCreate) SetCoinTypeID(u uuid.UUID) *CouponWithdrawCreate {
	cwc.mutation.SetCoinTypeID(u)
	return cwc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableCoinTypeID(u *uuid.UUID) *CouponWithdrawCreate {
	if u != nil {
		cwc.SetCoinTypeID(*u)
	}
	return cwc
}

// SetCouponID sets the "coupon_id" field.
func (cwc *CouponWithdrawCreate) SetCouponID(u uuid.UUID) *CouponWithdrawCreate {
	cwc.mutation.SetCouponID(u)
	return cwc
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableCouponID(u *uuid.UUID) *CouponWithdrawCreate {
	if u != nil {
		cwc.SetCouponID(*u)
	}
	return cwc
}

// SetState sets the "state" field.
func (cwc *CouponWithdrawCreate) SetState(s string) *CouponWithdrawCreate {
	cwc.mutation.SetState(s)
	return cwc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableState(s *string) *CouponWithdrawCreate {
	if s != nil {
		cwc.SetState(*s)
	}
	return cwc
}

// SetAmount sets the "amount" field.
func (cwc *CouponWithdrawCreate) SetAmount(d decimal.Decimal) *CouponWithdrawCreate {
	cwc.mutation.SetAmount(d)
	return cwc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableAmount(d *decimal.Decimal) *CouponWithdrawCreate {
	if d != nil {
		cwc.SetAmount(*d)
	}
	return cwc
}

// SetReviewID sets the "review_id" field.
func (cwc *CouponWithdrawCreate) SetReviewID(u uuid.UUID) *CouponWithdrawCreate {
	cwc.mutation.SetReviewID(u)
	return cwc
}

// SetNillableReviewID sets the "review_id" field if the given value is not nil.
func (cwc *CouponWithdrawCreate) SetNillableReviewID(u *uuid.UUID) *CouponWithdrawCreate {
	if u != nil {
		cwc.SetReviewID(*u)
	}
	return cwc
}

// SetID sets the "id" field.
func (cwc *CouponWithdrawCreate) SetID(u uint32) *CouponWithdrawCreate {
	cwc.mutation.SetID(u)
	return cwc
}

// Mutation returns the CouponWithdrawMutation object of the builder.
func (cwc *CouponWithdrawCreate) Mutation() *CouponWithdrawMutation {
	return cwc.mutation
}

// Save creates the CouponWithdraw in the database.
func (cwc *CouponWithdrawCreate) Save(ctx context.Context) (*CouponWithdraw, error) {
	var (
		err  error
		node *CouponWithdraw
	)
	if err := cwc.defaults(); err != nil {
		return nil, err
	}
	if len(cwc.hooks) == 0 {
		if err = cwc.check(); err != nil {
			return nil, err
		}
		node, err = cwc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponWithdrawMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cwc.check(); err != nil {
				return nil, err
			}
			cwc.mutation = mutation
			if node, err = cwc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cwc.hooks) - 1; i >= 0; i-- {
			if cwc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cwc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cwc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponWithdraw)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponWithdrawMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cwc *CouponWithdrawCreate) SaveX(ctx context.Context) *CouponWithdraw {
	v, err := cwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cwc *CouponWithdrawCreate) Exec(ctx context.Context) error {
	_, err := cwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwc *CouponWithdrawCreate) ExecX(ctx context.Context) {
	if err := cwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwc *CouponWithdrawCreate) defaults() error {
	if _, ok := cwc.mutation.CreatedAt(); !ok {
		if couponwithdraw.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.DefaultCreatedAt()
		cwc.mutation.SetCreatedAt(v)
	}
	if _, ok := cwc.mutation.UpdatedAt(); !ok {
		if couponwithdraw.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.DefaultUpdatedAt()
		cwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cwc.mutation.DeletedAt(); !ok {
		if couponwithdraw.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.DefaultDeletedAt()
		cwc.mutation.SetDeletedAt(v)
	}
	if _, ok := cwc.mutation.EntID(); !ok {
		if couponwithdraw.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.DefaultEntID()
		cwc.mutation.SetEntID(v)
	}
	if _, ok := cwc.mutation.AppID(); !ok {
		if couponwithdraw.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.DefaultAppID()
		cwc.mutation.SetAppID(v)
	}
	if _, ok := cwc.mutation.UserID(); !ok {
		if couponwithdraw.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.DefaultUserID()
		cwc.mutation.SetUserID(v)
	}
	if _, ok := cwc.mutation.CoinTypeID(); !ok {
		if couponwithdraw.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.DefaultCoinTypeID()
		cwc.mutation.SetCoinTypeID(v)
	}
	if _, ok := cwc.mutation.CouponID(); !ok {
		if couponwithdraw.DefaultCouponID == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.DefaultCouponID (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.DefaultCouponID()
		cwc.mutation.SetCouponID(v)
	}
	if _, ok := cwc.mutation.State(); !ok {
		v := couponwithdraw.DefaultState
		cwc.mutation.SetState(v)
	}
	if _, ok := cwc.mutation.ReviewID(); !ok {
		if couponwithdraw.DefaultReviewID == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.DefaultReviewID (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.DefaultReviewID()
		cwc.mutation.SetReviewID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cwc *CouponWithdrawCreate) check() error {
	if _, ok := cwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CouponWithdraw.created_at"`)}
	}
	if _, ok := cwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CouponWithdraw.updated_at"`)}
	}
	if _, ok := cwc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "CouponWithdraw.deleted_at"`)}
	}
	if _, ok := cwc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "CouponWithdraw.ent_id"`)}
	}
	return nil
}

func (cwc *CouponWithdrawCreate) sqlSave(ctx context.Context) (*CouponWithdraw, error) {
	_node, _spec := cwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (cwc *CouponWithdrawCreate) createSpec() (*CouponWithdraw, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponWithdraw{config: cwc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: couponwithdraw.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: couponwithdraw.FieldID,
			},
		}
	)
	_spec.OnConflict = cwc.conflict
	if id, ok := cwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cwc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cwc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cwc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cwc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := cwc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := cwc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := cwc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := cwc.mutation.CouponID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldCouponID,
		})
		_node.CouponID = value
	}
	if value, ok := cwc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponwithdraw.FieldState,
		})
		_node.State = value
	}
	if value, ok := cwc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: couponwithdraw.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := cwc.mutation.ReviewID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldReviewID,
		})
		_node.ReviewID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponWithdraw.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponWithdrawUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cwc *CouponWithdrawCreate) OnConflict(opts ...sql.ConflictOption) *CouponWithdrawUpsertOne {
	cwc.conflict = opts
	return &CouponWithdrawUpsertOne{
		create: cwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponWithdraw.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cwc *CouponWithdrawCreate) OnConflictColumns(columns ...string) *CouponWithdrawUpsertOne {
	cwc.conflict = append(cwc.conflict, sql.ConflictColumns(columns...))
	return &CouponWithdrawUpsertOne{
		create: cwc,
	}
}

type (
	// CouponWithdrawUpsertOne is the builder for "upsert"-ing
	//  one CouponWithdraw node.
	CouponWithdrawUpsertOne struct {
		create *CouponWithdrawCreate
	}

	// CouponWithdrawUpsert is the "OnConflict" setter.
	CouponWithdrawUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CouponWithdrawUpsert) SetCreatedAt(v uint32) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateCreatedAt() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponWithdrawUpsert) AddCreatedAt(v uint32) *CouponWithdrawUpsert {
	u.Add(couponwithdraw.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponWithdrawUpsert) SetUpdatedAt(v uint32) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateUpdatedAt() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponWithdrawUpsert) AddUpdatedAt(v uint32) *CouponWithdrawUpsert {
	u.Add(couponwithdraw.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponWithdrawUpsert) SetDeletedAt(v uint32) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateDeletedAt() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponWithdrawUpsert) AddDeletedAt(v uint32) *CouponWithdrawUpsert {
	u.Add(couponwithdraw.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CouponWithdrawUpsert) SetEntID(v uuid.UUID) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateEntID() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CouponWithdrawUpsert) SetAppID(v uuid.UUID) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateAppID() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *CouponWithdrawUpsert) ClearAppID() *CouponWithdrawUpsert {
	u.SetNull(couponwithdraw.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CouponWithdrawUpsert) SetUserID(v uuid.UUID) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateUserID() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *CouponWithdrawUpsert) ClearUserID() *CouponWithdrawUpsert {
	u.SetNull(couponwithdraw.FieldUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CouponWithdrawUpsert) SetCoinTypeID(v uuid.UUID) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateCoinTypeID() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CouponWithdrawUpsert) ClearCoinTypeID() *CouponWithdrawUpsert {
	u.SetNull(couponwithdraw.FieldCoinTypeID)
	return u
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponWithdrawUpsert) SetCouponID(v uuid.UUID) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldCouponID, v)
	return u
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateCouponID() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldCouponID)
	return u
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CouponWithdrawUpsert) ClearCouponID() *CouponWithdrawUpsert {
	u.SetNull(couponwithdraw.FieldCouponID)
	return u
}

// SetState sets the "state" field.
func (u *CouponWithdrawUpsert) SetState(v string) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateState() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *CouponWithdrawUpsert) ClearState() *CouponWithdrawUpsert {
	u.SetNull(couponwithdraw.FieldState)
	return u
}

// SetAmount sets the "amount" field.
func (u *CouponWithdrawUpsert) SetAmount(v decimal.Decimal) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateAmount() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *CouponWithdrawUpsert) AddAmount(v decimal.Decimal) *CouponWithdrawUpsert {
	u.Add(couponwithdraw.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *CouponWithdrawUpsert) ClearAmount() *CouponWithdrawUpsert {
	u.SetNull(couponwithdraw.FieldAmount)
	return u
}

// SetReviewID sets the "review_id" field.
func (u *CouponWithdrawUpsert) SetReviewID(v uuid.UUID) *CouponWithdrawUpsert {
	u.Set(couponwithdraw.FieldReviewID, v)
	return u
}

// UpdateReviewID sets the "review_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsert) UpdateReviewID() *CouponWithdrawUpsert {
	u.SetExcluded(couponwithdraw.FieldReviewID)
	return u
}

// ClearReviewID clears the value of the "review_id" field.
func (u *CouponWithdrawUpsert) ClearReviewID() *CouponWithdrawUpsert {
	u.SetNull(couponwithdraw.FieldReviewID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CouponWithdraw.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponwithdraw.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CouponWithdrawUpsertOne) UpdateNewValues() *CouponWithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(couponwithdraw.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CouponWithdraw.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CouponWithdrawUpsertOne) Ignore() *CouponWithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponWithdrawUpsertOne) DoNothing() *CouponWithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponWithdrawCreate.OnConflict
// documentation for more info.
func (u *CouponWithdrawUpsertOne) Update(set func(*CouponWithdrawUpsert)) *CouponWithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponWithdrawUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponWithdrawUpsertOne) SetCreatedAt(v uint32) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponWithdrawUpsertOne) AddCreatedAt(v uint32) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateCreatedAt() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponWithdrawUpsertOne) SetUpdatedAt(v uint32) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponWithdrawUpsertOne) AddUpdatedAt(v uint32) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateUpdatedAt() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponWithdrawUpsertOne) SetDeletedAt(v uint32) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponWithdrawUpsertOne) AddDeletedAt(v uint32) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateDeletedAt() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CouponWithdrawUpsertOne) SetEntID(v uuid.UUID) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateEntID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponWithdrawUpsertOne) SetAppID(v uuid.UUID) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateAppID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CouponWithdrawUpsertOne) ClearAppID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CouponWithdrawUpsertOne) SetUserID(v uuid.UUID) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateUserID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CouponWithdrawUpsertOne) ClearUserID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CouponWithdrawUpsertOne) SetCoinTypeID(v uuid.UUID) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateCoinTypeID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CouponWithdrawUpsertOne) ClearCoinTypeID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponWithdrawUpsertOne) SetCouponID(v uuid.UUID) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateCouponID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateCouponID()
	})
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CouponWithdrawUpsertOne) ClearCouponID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearCouponID()
	})
}

// SetState sets the "state" field.
func (u *CouponWithdrawUpsertOne) SetState(v string) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateState() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *CouponWithdrawUpsertOne) ClearState() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearState()
	})
}

// SetAmount sets the "amount" field.
func (u *CouponWithdrawUpsertOne) SetAmount(v decimal.Decimal) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *CouponWithdrawUpsertOne) AddAmount(v decimal.Decimal) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateAmount() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *CouponWithdrawUpsertOne) ClearAmount() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearAmount()
	})
}

// SetReviewID sets the "review_id" field.
func (u *CouponWithdrawUpsertOne) SetReviewID(v uuid.UUID) *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetReviewID(v)
	})
}

// UpdateReviewID sets the "review_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertOne) UpdateReviewID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateReviewID()
	})
}

// ClearReviewID clears the value of the "review_id" field.
func (u *CouponWithdrawUpsertOne) ClearReviewID() *CouponWithdrawUpsertOne {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearReviewID()
	})
}

// Exec executes the query.
func (u *CouponWithdrawUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponWithdrawCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponWithdrawUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponWithdrawUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponWithdrawUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponWithdrawCreateBulk is the builder for creating many CouponWithdraw entities in bulk.
type CouponWithdrawCreateBulk struct {
	config
	builders []*CouponWithdrawCreate
	conflict []sql.ConflictOption
}

// Save creates the CouponWithdraw entities in the database.
func (cwcb *CouponWithdrawCreateBulk) Save(ctx context.Context) ([]*CouponWithdraw, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cwcb.builders))
	nodes := make([]*CouponWithdraw, len(cwcb.builders))
	mutators := make([]Mutator, len(cwcb.builders))
	for i := range cwcb.builders {
		func(i int, root context.Context) {
			builder := cwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponWithdrawMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cwcb *CouponWithdrawCreateBulk) SaveX(ctx context.Context) []*CouponWithdraw {
	v, err := cwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cwcb *CouponWithdrawCreateBulk) Exec(ctx context.Context) error {
	_, err := cwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwcb *CouponWithdrawCreateBulk) ExecX(ctx context.Context) {
	if err := cwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponWithdraw.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponWithdrawUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cwcb *CouponWithdrawCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponWithdrawUpsertBulk {
	cwcb.conflict = opts
	return &CouponWithdrawUpsertBulk{
		create: cwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponWithdraw.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cwcb *CouponWithdrawCreateBulk) OnConflictColumns(columns ...string) *CouponWithdrawUpsertBulk {
	cwcb.conflict = append(cwcb.conflict, sql.ConflictColumns(columns...))
	return &CouponWithdrawUpsertBulk{
		create: cwcb,
	}
}

// CouponWithdrawUpsertBulk is the builder for "upsert"-ing
// a bulk of CouponWithdraw nodes.
type CouponWithdrawUpsertBulk struct {
	create *CouponWithdrawCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CouponWithdraw.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponwithdraw.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CouponWithdrawUpsertBulk) UpdateNewValues() *CouponWithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(couponwithdraw.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponWithdraw.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CouponWithdrawUpsertBulk) Ignore() *CouponWithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponWithdrawUpsertBulk) DoNothing() *CouponWithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponWithdrawCreateBulk.OnConflict
// documentation for more info.
func (u *CouponWithdrawUpsertBulk) Update(set func(*CouponWithdrawUpsert)) *CouponWithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponWithdrawUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponWithdrawUpsertBulk) SetCreatedAt(v uint32) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponWithdrawUpsertBulk) AddCreatedAt(v uint32) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateCreatedAt() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponWithdrawUpsertBulk) SetUpdatedAt(v uint32) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponWithdrawUpsertBulk) AddUpdatedAt(v uint32) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateUpdatedAt() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponWithdrawUpsertBulk) SetDeletedAt(v uint32) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponWithdrawUpsertBulk) AddDeletedAt(v uint32) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateDeletedAt() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CouponWithdrawUpsertBulk) SetEntID(v uuid.UUID) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateEntID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponWithdrawUpsertBulk) SetAppID(v uuid.UUID) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateAppID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CouponWithdrawUpsertBulk) ClearAppID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CouponWithdrawUpsertBulk) SetUserID(v uuid.UUID) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateUserID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CouponWithdrawUpsertBulk) ClearUserID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CouponWithdrawUpsertBulk) SetCoinTypeID(v uuid.UUID) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateCoinTypeID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CouponWithdrawUpsertBulk) ClearCoinTypeID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponWithdrawUpsertBulk) SetCouponID(v uuid.UUID) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateCouponID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateCouponID()
	})
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CouponWithdrawUpsertBulk) ClearCouponID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearCouponID()
	})
}

// SetState sets the "state" field.
func (u *CouponWithdrawUpsertBulk) SetState(v string) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateState() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *CouponWithdrawUpsertBulk) ClearState() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearState()
	})
}

// SetAmount sets the "amount" field.
func (u *CouponWithdrawUpsertBulk) SetAmount(v decimal.Decimal) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *CouponWithdrawUpsertBulk) AddAmount(v decimal.Decimal) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateAmount() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *CouponWithdrawUpsertBulk) ClearAmount() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearAmount()
	})
}

// SetReviewID sets the "review_id" field.
func (u *CouponWithdrawUpsertBulk) SetReviewID(v uuid.UUID) *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.SetReviewID(v)
	})
}

// UpdateReviewID sets the "review_id" field to the value that was provided on create.
func (u *CouponWithdrawUpsertBulk) UpdateReviewID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.UpdateReviewID()
	})
}

// ClearReviewID clears the value of the "review_id" field.
func (u *CouponWithdrawUpsertBulk) ClearReviewID() *CouponWithdrawUpsertBulk {
	return u.Update(func(s *CouponWithdrawUpsert) {
		s.ClearReviewID()
	})
}

// Exec executes the query.
func (u *CouponWithdrawUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CouponWithdrawCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponWithdrawCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponWithdrawUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
