// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/couponwithdraw"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponWithdrawUpdate is the builder for updating CouponWithdraw entities.
type CouponWithdrawUpdate struct {
	config
	hooks    []Hook
	mutation *CouponWithdrawMutation
}

// Where appends a list predicates to the CouponWithdrawUpdate builder.
func (cwu *CouponWithdrawUpdate) Where(ps ...predicate.CouponWithdraw) *CouponWithdrawUpdate {
	cwu.mutation.Where(ps...)
	return cwu
}

// SetCreatedAt sets the "created_at" field.
func (cwu *CouponWithdrawUpdate) SetCreatedAt(u uint32) *CouponWithdrawUpdate {
	cwu.mutation.ResetCreatedAt()
	cwu.mutation.SetCreatedAt(u)
	return cwu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cwu *CouponWithdrawUpdate) SetNillableCreatedAt(u *uint32) *CouponWithdrawUpdate {
	if u != nil {
		cwu.SetCreatedAt(*u)
	}
	return cwu
}

// AddCreatedAt adds u to the "created_at" field.
func (cwu *CouponWithdrawUpdate) AddCreatedAt(u int32) *CouponWithdrawUpdate {
	cwu.mutation.AddCreatedAt(u)
	return cwu
}

// SetUpdatedAt sets the "updated_at" field.
func (cwu *CouponWithdrawUpdate) SetUpdatedAt(u uint32) *CouponWithdrawUpdate {
	cwu.mutation.ResetUpdatedAt()
	cwu.mutation.SetUpdatedAt(u)
	return cwu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cwu *CouponWithdrawUpdate) AddUpdatedAt(u int32) *CouponWithdrawUpdate {
	cwu.mutation.AddUpdatedAt(u)
	return cwu
}

// SetDeletedAt sets the "deleted_at" field.
func (cwu *CouponWithdrawUpdate) SetDeletedAt(u uint32) *CouponWithdrawUpdate {
	cwu.mutation.ResetDeletedAt()
	cwu.mutation.SetDeletedAt(u)
	return cwu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cwu *CouponWithdrawUpdate) SetNillableDeletedAt(u *uint32) *CouponWithdrawUpdate {
	if u != nil {
		cwu.SetDeletedAt(*u)
	}
	return cwu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cwu *CouponWithdrawUpdate) AddDeletedAt(u int32) *CouponWithdrawUpdate {
	cwu.mutation.AddDeletedAt(u)
	return cwu
}

// SetEntID sets the "ent_id" field.
func (cwu *CouponWithdrawUpdate) SetEntID(u uuid.UUID) *CouponWithdrawUpdate {
	cwu.mutation.SetEntID(u)
	return cwu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cwu *CouponWithdrawUpdate) SetNillableEntID(u *uuid.UUID) *CouponWithdrawUpdate {
	if u != nil {
		cwu.SetEntID(*u)
	}
	return cwu
}

// SetAppID sets the "app_id" field.
func (cwu *CouponWithdrawUpdate) SetAppID(u uuid.UUID) *CouponWithdrawUpdate {
	cwu.mutation.SetAppID(u)
	return cwu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cwu *CouponWithdrawUpdate) SetNillableAppID(u *uuid.UUID) *CouponWithdrawUpdate {
	if u != nil {
		cwu.SetAppID(*u)
	}
	return cwu
}

// ClearAppID clears the value of the "app_id" field.
func (cwu *CouponWithdrawUpdate) ClearAppID() *CouponWithdrawUpdate {
	cwu.mutation.ClearAppID()
	return cwu
}

// SetUserID sets the "user_id" field.
func (cwu *CouponWithdrawUpdate) SetUserID(u uuid.UUID) *CouponWithdrawUpdate {
	cwu.mutation.SetUserID(u)
	return cwu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cwu *CouponWithdrawUpdate) SetNillableUserID(u *uuid.UUID) *CouponWithdrawUpdate {
	if u != nil {
		cwu.SetUserID(*u)
	}
	return cwu
}

// ClearUserID clears the value of the "user_id" field.
func (cwu *CouponWithdrawUpdate) ClearUserID() *CouponWithdrawUpdate {
	cwu.mutation.ClearUserID()
	return cwu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cwu *CouponWithdrawUpdate) SetCoinTypeID(u uuid.UUID) *CouponWithdrawUpdate {
	cwu.mutation.SetCoinTypeID(u)
	return cwu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cwu *CouponWithdrawUpdate) SetNillableCoinTypeID(u *uuid.UUID) *CouponWithdrawUpdate {
	if u != nil {
		cwu.SetCoinTypeID(*u)
	}
	return cwu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cwu *CouponWithdrawUpdate) ClearCoinTypeID() *CouponWithdrawUpdate {
	cwu.mutation.ClearCoinTypeID()
	return cwu
}

// SetAllocatedID sets the "allocated_id" field.
func (cwu *CouponWithdrawUpdate) SetAllocatedID(u uuid.UUID) *CouponWithdrawUpdate {
	cwu.mutation.SetAllocatedID(u)
	return cwu
}

// SetNillableAllocatedID sets the "allocated_id" field if the given value is not nil.
func (cwu *CouponWithdrawUpdate) SetNillableAllocatedID(u *uuid.UUID) *CouponWithdrawUpdate {
	if u != nil {
		cwu.SetAllocatedID(*u)
	}
	return cwu
}

// ClearAllocatedID clears the value of the "allocated_id" field.
func (cwu *CouponWithdrawUpdate) ClearAllocatedID() *CouponWithdrawUpdate {
	cwu.mutation.ClearAllocatedID()
	return cwu
}

// SetState sets the "state" field.
func (cwu *CouponWithdrawUpdate) SetState(s string) *CouponWithdrawUpdate {
	cwu.mutation.SetState(s)
	return cwu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cwu *CouponWithdrawUpdate) SetNillableState(s *string) *CouponWithdrawUpdate {
	if s != nil {
		cwu.SetState(*s)
	}
	return cwu
}

// ClearState clears the value of the "state" field.
func (cwu *CouponWithdrawUpdate) ClearState() *CouponWithdrawUpdate {
	cwu.mutation.ClearState()
	return cwu
}

// SetAmount sets the "amount" field.
func (cwu *CouponWithdrawUpdate) SetAmount(d decimal.Decimal) *CouponWithdrawUpdate {
	cwu.mutation.ResetAmount()
	cwu.mutation.SetAmount(d)
	return cwu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cwu *CouponWithdrawUpdate) SetNillableAmount(d *decimal.Decimal) *CouponWithdrawUpdate {
	if d != nil {
		cwu.SetAmount(*d)
	}
	return cwu
}

// AddAmount adds d to the "amount" field.
func (cwu *CouponWithdrawUpdate) AddAmount(d decimal.Decimal) *CouponWithdrawUpdate {
	cwu.mutation.AddAmount(d)
	return cwu
}

// ClearAmount clears the value of the "amount" field.
func (cwu *CouponWithdrawUpdate) ClearAmount() *CouponWithdrawUpdate {
	cwu.mutation.ClearAmount()
	return cwu
}

// SetReviewID sets the "review_id" field.
func (cwu *CouponWithdrawUpdate) SetReviewID(u uuid.UUID) *CouponWithdrawUpdate {
	cwu.mutation.SetReviewID(u)
	return cwu
}

// SetNillableReviewID sets the "review_id" field if the given value is not nil.
func (cwu *CouponWithdrawUpdate) SetNillableReviewID(u *uuid.UUID) *CouponWithdrawUpdate {
	if u != nil {
		cwu.SetReviewID(*u)
	}
	return cwu
}

// ClearReviewID clears the value of the "review_id" field.
func (cwu *CouponWithdrawUpdate) ClearReviewID() *CouponWithdrawUpdate {
	cwu.mutation.ClearReviewID()
	return cwu
}

// Mutation returns the CouponWithdrawMutation object of the builder.
func (cwu *CouponWithdrawUpdate) Mutation() *CouponWithdrawMutation {
	return cwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cwu *CouponWithdrawUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cwu.defaults(); err != nil {
		return 0, err
	}
	if len(cwu.hooks) == 0 {
		affected, err = cwu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponWithdrawMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cwu.mutation = mutation
			affected, err = cwu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cwu.hooks) - 1; i >= 0; i-- {
			if cwu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cwu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cwu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cwu *CouponWithdrawUpdate) SaveX(ctx context.Context) int {
	affected, err := cwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cwu *CouponWithdrawUpdate) Exec(ctx context.Context) error {
	_, err := cwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwu *CouponWithdrawUpdate) ExecX(ctx context.Context) {
	if err := cwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwu *CouponWithdrawUpdate) defaults() error {
	if _, ok := cwu.mutation.UpdatedAt(); !ok {
		if couponwithdraw.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.UpdateDefaultUpdatedAt()
		cwu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cwu *CouponWithdrawUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   couponwithdraw.Table,
			Columns: couponwithdraw.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: couponwithdraw.FieldID,
			},
		},
	}
	if ps := cwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cwu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldCreatedAt,
		})
	}
	if value, ok := cwu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldCreatedAt,
		})
	}
	if value, ok := cwu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldUpdatedAt,
		})
	}
	if value, ok := cwu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldUpdatedAt,
		})
	}
	if value, ok := cwu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldDeletedAt,
		})
	}
	if value, ok := cwu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldDeletedAt,
		})
	}
	if value, ok := cwu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldEntID,
		})
	}
	if value, ok := cwu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldAppID,
		})
	}
	if cwu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponwithdraw.FieldAppID,
		})
	}
	if value, ok := cwu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldUserID,
		})
	}
	if cwu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponwithdraw.FieldUserID,
		})
	}
	if value, ok := cwu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldCoinTypeID,
		})
	}
	if cwu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponwithdraw.FieldCoinTypeID,
		})
	}
	if value, ok := cwu.mutation.AllocatedID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldAllocatedID,
		})
	}
	if cwu.mutation.AllocatedIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponwithdraw.FieldAllocatedID,
		})
	}
	if value, ok := cwu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponwithdraw.FieldState,
		})
	}
	if cwu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: couponwithdraw.FieldState,
		})
	}
	if value, ok := cwu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: couponwithdraw.FieldAmount,
		})
	}
	if value, ok := cwu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: couponwithdraw.FieldAmount,
		})
	}
	if cwu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: couponwithdraw.FieldAmount,
		})
	}
	if value, ok := cwu.mutation.ReviewID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldReviewID,
		})
	}
	if cwu.mutation.ReviewIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponwithdraw.FieldReviewID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponwithdraw.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CouponWithdrawUpdateOne is the builder for updating a single CouponWithdraw entity.
type CouponWithdrawUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CouponWithdrawMutation
}

// SetCreatedAt sets the "created_at" field.
func (cwuo *CouponWithdrawUpdateOne) SetCreatedAt(u uint32) *CouponWithdrawUpdateOne {
	cwuo.mutation.ResetCreatedAt()
	cwuo.mutation.SetCreatedAt(u)
	return cwuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cwuo *CouponWithdrawUpdateOne) SetNillableCreatedAt(u *uint32) *CouponWithdrawUpdateOne {
	if u != nil {
		cwuo.SetCreatedAt(*u)
	}
	return cwuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cwuo *CouponWithdrawUpdateOne) AddCreatedAt(u int32) *CouponWithdrawUpdateOne {
	cwuo.mutation.AddCreatedAt(u)
	return cwuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cwuo *CouponWithdrawUpdateOne) SetUpdatedAt(u uint32) *CouponWithdrawUpdateOne {
	cwuo.mutation.ResetUpdatedAt()
	cwuo.mutation.SetUpdatedAt(u)
	return cwuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cwuo *CouponWithdrawUpdateOne) AddUpdatedAt(u int32) *CouponWithdrawUpdateOne {
	cwuo.mutation.AddUpdatedAt(u)
	return cwuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cwuo *CouponWithdrawUpdateOne) SetDeletedAt(u uint32) *CouponWithdrawUpdateOne {
	cwuo.mutation.ResetDeletedAt()
	cwuo.mutation.SetDeletedAt(u)
	return cwuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cwuo *CouponWithdrawUpdateOne) SetNillableDeletedAt(u *uint32) *CouponWithdrawUpdateOne {
	if u != nil {
		cwuo.SetDeletedAt(*u)
	}
	return cwuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cwuo *CouponWithdrawUpdateOne) AddDeletedAt(u int32) *CouponWithdrawUpdateOne {
	cwuo.mutation.AddDeletedAt(u)
	return cwuo
}

// SetEntID sets the "ent_id" field.
func (cwuo *CouponWithdrawUpdateOne) SetEntID(u uuid.UUID) *CouponWithdrawUpdateOne {
	cwuo.mutation.SetEntID(u)
	return cwuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cwuo *CouponWithdrawUpdateOne) SetNillableEntID(u *uuid.UUID) *CouponWithdrawUpdateOne {
	if u != nil {
		cwuo.SetEntID(*u)
	}
	return cwuo
}

// SetAppID sets the "app_id" field.
func (cwuo *CouponWithdrawUpdateOne) SetAppID(u uuid.UUID) *CouponWithdrawUpdateOne {
	cwuo.mutation.SetAppID(u)
	return cwuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cwuo *CouponWithdrawUpdateOne) SetNillableAppID(u *uuid.UUID) *CouponWithdrawUpdateOne {
	if u != nil {
		cwuo.SetAppID(*u)
	}
	return cwuo
}

// ClearAppID clears the value of the "app_id" field.
func (cwuo *CouponWithdrawUpdateOne) ClearAppID() *CouponWithdrawUpdateOne {
	cwuo.mutation.ClearAppID()
	return cwuo
}

// SetUserID sets the "user_id" field.
func (cwuo *CouponWithdrawUpdateOne) SetUserID(u uuid.UUID) *CouponWithdrawUpdateOne {
	cwuo.mutation.SetUserID(u)
	return cwuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cwuo *CouponWithdrawUpdateOne) SetNillableUserID(u *uuid.UUID) *CouponWithdrawUpdateOne {
	if u != nil {
		cwuo.SetUserID(*u)
	}
	return cwuo
}

// ClearUserID clears the value of the "user_id" field.
func (cwuo *CouponWithdrawUpdateOne) ClearUserID() *CouponWithdrawUpdateOne {
	cwuo.mutation.ClearUserID()
	return cwuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cwuo *CouponWithdrawUpdateOne) SetCoinTypeID(u uuid.UUID) *CouponWithdrawUpdateOne {
	cwuo.mutation.SetCoinTypeID(u)
	return cwuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cwuo *CouponWithdrawUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *CouponWithdrawUpdateOne {
	if u != nil {
		cwuo.SetCoinTypeID(*u)
	}
	return cwuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cwuo *CouponWithdrawUpdateOne) ClearCoinTypeID() *CouponWithdrawUpdateOne {
	cwuo.mutation.ClearCoinTypeID()
	return cwuo
}

// SetAllocatedID sets the "allocated_id" field.
func (cwuo *CouponWithdrawUpdateOne) SetAllocatedID(u uuid.UUID) *CouponWithdrawUpdateOne {
	cwuo.mutation.SetAllocatedID(u)
	return cwuo
}

// SetNillableAllocatedID sets the "allocated_id" field if the given value is not nil.
func (cwuo *CouponWithdrawUpdateOne) SetNillableAllocatedID(u *uuid.UUID) *CouponWithdrawUpdateOne {
	if u != nil {
		cwuo.SetAllocatedID(*u)
	}
	return cwuo
}

// ClearAllocatedID clears the value of the "allocated_id" field.
func (cwuo *CouponWithdrawUpdateOne) ClearAllocatedID() *CouponWithdrawUpdateOne {
	cwuo.mutation.ClearAllocatedID()
	return cwuo
}

// SetState sets the "state" field.
func (cwuo *CouponWithdrawUpdateOne) SetState(s string) *CouponWithdrawUpdateOne {
	cwuo.mutation.SetState(s)
	return cwuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cwuo *CouponWithdrawUpdateOne) SetNillableState(s *string) *CouponWithdrawUpdateOne {
	if s != nil {
		cwuo.SetState(*s)
	}
	return cwuo
}

// ClearState clears the value of the "state" field.
func (cwuo *CouponWithdrawUpdateOne) ClearState() *CouponWithdrawUpdateOne {
	cwuo.mutation.ClearState()
	return cwuo
}

// SetAmount sets the "amount" field.
func (cwuo *CouponWithdrawUpdateOne) SetAmount(d decimal.Decimal) *CouponWithdrawUpdateOne {
	cwuo.mutation.ResetAmount()
	cwuo.mutation.SetAmount(d)
	return cwuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cwuo *CouponWithdrawUpdateOne) SetNillableAmount(d *decimal.Decimal) *CouponWithdrawUpdateOne {
	if d != nil {
		cwuo.SetAmount(*d)
	}
	return cwuo
}

// AddAmount adds d to the "amount" field.
func (cwuo *CouponWithdrawUpdateOne) AddAmount(d decimal.Decimal) *CouponWithdrawUpdateOne {
	cwuo.mutation.AddAmount(d)
	return cwuo
}

// ClearAmount clears the value of the "amount" field.
func (cwuo *CouponWithdrawUpdateOne) ClearAmount() *CouponWithdrawUpdateOne {
	cwuo.mutation.ClearAmount()
	return cwuo
}

// SetReviewID sets the "review_id" field.
func (cwuo *CouponWithdrawUpdateOne) SetReviewID(u uuid.UUID) *CouponWithdrawUpdateOne {
	cwuo.mutation.SetReviewID(u)
	return cwuo
}

// SetNillableReviewID sets the "review_id" field if the given value is not nil.
func (cwuo *CouponWithdrawUpdateOne) SetNillableReviewID(u *uuid.UUID) *CouponWithdrawUpdateOne {
	if u != nil {
		cwuo.SetReviewID(*u)
	}
	return cwuo
}

// ClearReviewID clears the value of the "review_id" field.
func (cwuo *CouponWithdrawUpdateOne) ClearReviewID() *CouponWithdrawUpdateOne {
	cwuo.mutation.ClearReviewID()
	return cwuo
}

// Mutation returns the CouponWithdrawMutation object of the builder.
func (cwuo *CouponWithdrawUpdateOne) Mutation() *CouponWithdrawMutation {
	return cwuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cwuo *CouponWithdrawUpdateOne) Select(field string, fields ...string) *CouponWithdrawUpdateOne {
	cwuo.fields = append([]string{field}, fields...)
	return cwuo
}

// Save executes the query and returns the updated CouponWithdraw entity.
func (cwuo *CouponWithdrawUpdateOne) Save(ctx context.Context) (*CouponWithdraw, error) {
	var (
		err  error
		node *CouponWithdraw
	)
	if err := cwuo.defaults(); err != nil {
		return nil, err
	}
	if len(cwuo.hooks) == 0 {
		node, err = cwuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponWithdrawMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cwuo.mutation = mutation
			node, err = cwuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cwuo.hooks) - 1; i >= 0; i-- {
			if cwuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cwuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cwuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponWithdraw)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponWithdrawMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cwuo *CouponWithdrawUpdateOne) SaveX(ctx context.Context) *CouponWithdraw {
	node, err := cwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cwuo *CouponWithdrawUpdateOne) Exec(ctx context.Context) error {
	_, err := cwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwuo *CouponWithdrawUpdateOne) ExecX(ctx context.Context) {
	if err := cwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwuo *CouponWithdrawUpdateOne) defaults() error {
	if _, ok := cwuo.mutation.UpdatedAt(); !ok {
		if couponwithdraw.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponwithdraw.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponwithdraw.UpdateDefaultUpdatedAt()
		cwuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cwuo *CouponWithdrawUpdateOne) sqlSave(ctx context.Context) (_node *CouponWithdraw, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   couponwithdraw.Table,
			Columns: couponwithdraw.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: couponwithdraw.FieldID,
			},
		},
	}
	id, ok := cwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CouponWithdraw.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, couponwithdraw.FieldID)
		for _, f := range fields {
			if !couponwithdraw.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != couponwithdraw.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cwuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldCreatedAt,
		})
	}
	if value, ok := cwuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldCreatedAt,
		})
	}
	if value, ok := cwuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldUpdatedAt,
		})
	}
	if value, ok := cwuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldUpdatedAt,
		})
	}
	if value, ok := cwuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldDeletedAt,
		})
	}
	if value, ok := cwuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponwithdraw.FieldDeletedAt,
		})
	}
	if value, ok := cwuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldEntID,
		})
	}
	if value, ok := cwuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldAppID,
		})
	}
	if cwuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponwithdraw.FieldAppID,
		})
	}
	if value, ok := cwuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldUserID,
		})
	}
	if cwuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponwithdraw.FieldUserID,
		})
	}
	if value, ok := cwuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldCoinTypeID,
		})
	}
	if cwuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponwithdraw.FieldCoinTypeID,
		})
	}
	if value, ok := cwuo.mutation.AllocatedID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldAllocatedID,
		})
	}
	if cwuo.mutation.AllocatedIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponwithdraw.FieldAllocatedID,
		})
	}
	if value, ok := cwuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponwithdraw.FieldState,
		})
	}
	if cwuo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: couponwithdraw.FieldState,
		})
	}
	if value, ok := cwuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: couponwithdraw.FieldAmount,
		})
	}
	if value, ok := cwuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: couponwithdraw.FieldAmount,
		})
	}
	if cwuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: couponwithdraw.FieldAmount,
		})
	}
	if value, ok := cwuo.mutation.ReviewID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponwithdraw.FieldReviewID,
		})
	}
	if cwuo.mutation.ReviewIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponwithdraw.FieldReviewID,
		})
	}
	_node = &CouponWithdraw{config: cwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponwithdraw.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
