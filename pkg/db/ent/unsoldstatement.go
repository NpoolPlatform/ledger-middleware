// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/unsoldstatement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// UnsoldStatement is the model entity for the UnsoldStatement schema.
type UnsoldStatement struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// BenefitDate holds the value of the "benefit_date" field.
	BenefitDate uint32 `json:"benefit_date,omitempty"`
	// StatementID holds the value of the "statement_id" field.
	StatementID uuid.UUID `json:"statement_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UnsoldStatement) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case unsoldstatement.FieldAmount:
			values[i] = new(decimal.Decimal)
		case unsoldstatement.FieldID, unsoldstatement.FieldCreatedAt, unsoldstatement.FieldUpdatedAt, unsoldstatement.FieldDeletedAt, unsoldstatement.FieldBenefitDate:
			values[i] = new(sql.NullInt64)
		case unsoldstatement.FieldEntID, unsoldstatement.FieldGoodID, unsoldstatement.FieldCoinTypeID, unsoldstatement.FieldStatementID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UnsoldStatement", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UnsoldStatement fields.
func (us *UnsoldStatement) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case unsoldstatement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			us.ID = uint32(value.Int64)
		case unsoldstatement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				us.CreatedAt = uint32(value.Int64)
			}
		case unsoldstatement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				us.UpdatedAt = uint32(value.Int64)
			}
		case unsoldstatement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				us.DeletedAt = uint32(value.Int64)
			}
		case unsoldstatement.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				us.EntID = *value
			}
		case unsoldstatement.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				us.GoodID = *value
			}
		case unsoldstatement.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				us.CoinTypeID = *value
			}
		case unsoldstatement.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				us.Amount = *value
			}
		case unsoldstatement.FieldBenefitDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_date", values[i])
			} else if value.Valid {
				us.BenefitDate = uint32(value.Int64)
			}
		case unsoldstatement.FieldStatementID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field statement_id", values[i])
			} else if value != nil {
				us.StatementID = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UnsoldStatement.
// Note that you need to call UnsoldStatement.Unwrap() before calling this method if this UnsoldStatement
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UnsoldStatement) Update() *UnsoldStatementUpdateOne {
	return (&UnsoldStatementClient{config: us.config}).UpdateOne(us)
}

// Unwrap unwraps the UnsoldStatement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UnsoldStatement) Unwrap() *UnsoldStatement {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UnsoldStatement is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UnsoldStatement) String() string {
	var builder strings.Builder
	builder.WriteString("UnsoldStatement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", us.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", us.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", us.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", us.EntID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", us.GoodID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", us.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", us.Amount))
	builder.WriteString(", ")
	builder.WriteString("benefit_date=")
	builder.WriteString(fmt.Sprintf("%v", us.BenefitDate))
	builder.WriteString(", ")
	builder.WriteString("statement_id=")
	builder.WriteString(fmt.Sprintf("%v", us.StatementID))
	builder.WriteByte(')')
	return builder.String()
}

// UnsoldStatements is a parsable slice of UnsoldStatement.
type UnsoldStatements []*UnsoldStatement

func (us UnsoldStatements) config(cfg config) {
	for _i := range us {
		us[_i].config = cfg
	}
}
