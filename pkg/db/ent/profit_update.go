// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/profit"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ProfitUpdate is the builder for updating Profit entities.
type ProfitUpdate struct {
	config
	hooks    []Hook
	mutation *ProfitMutation
}

// Where appends a list predicates to the ProfitUpdate builder.
func (pu *ProfitUpdate) Where(ps ...predicate.Profit) *ProfitUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProfitUpdate) SetCreatedAt(u uint32) *ProfitUpdate {
	pu.mutation.ResetCreatedAt()
	pu.mutation.SetCreatedAt(u)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProfitUpdate) SetNillableCreatedAt(u *uint32) *ProfitUpdate {
	if u != nil {
		pu.SetCreatedAt(*u)
	}
	return pu
}

// AddCreatedAt adds u to the "created_at" field.
func (pu *ProfitUpdate) AddCreatedAt(u int32) *ProfitUpdate {
	pu.mutation.AddCreatedAt(u)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProfitUpdate) SetUpdatedAt(u uint32) *ProfitUpdate {
	pu.mutation.ResetUpdatedAt()
	pu.mutation.SetUpdatedAt(u)
	return pu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pu *ProfitUpdate) AddUpdatedAt(u int32) *ProfitUpdate {
	pu.mutation.AddUpdatedAt(u)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *ProfitUpdate) SetDeletedAt(u uint32) *ProfitUpdate {
	pu.mutation.ResetDeletedAt()
	pu.mutation.SetDeletedAt(u)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *ProfitUpdate) SetNillableDeletedAt(u *uint32) *ProfitUpdate {
	if u != nil {
		pu.SetDeletedAt(*u)
	}
	return pu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pu *ProfitUpdate) AddDeletedAt(u int32) *ProfitUpdate {
	pu.mutation.AddDeletedAt(u)
	return pu
}

// SetAppID sets the "app_id" field.
func (pu *ProfitUpdate) SetAppID(u uuid.UUID) *ProfitUpdate {
	pu.mutation.SetAppID(u)
	return pu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (pu *ProfitUpdate) SetNillableAppID(u *uuid.UUID) *ProfitUpdate {
	if u != nil {
		pu.SetAppID(*u)
	}
	return pu
}

// ClearAppID clears the value of the "app_id" field.
func (pu *ProfitUpdate) ClearAppID() *ProfitUpdate {
	pu.mutation.ClearAppID()
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *ProfitUpdate) SetUserID(u uuid.UUID) *ProfitUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *ProfitUpdate) SetNillableUserID(u *uuid.UUID) *ProfitUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// ClearUserID clears the value of the "user_id" field.
func (pu *ProfitUpdate) ClearUserID() *ProfitUpdate {
	pu.mutation.ClearUserID()
	return pu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (pu *ProfitUpdate) SetCoinTypeID(u uuid.UUID) *ProfitUpdate {
	pu.mutation.SetCoinTypeID(u)
	return pu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (pu *ProfitUpdate) SetNillableCoinTypeID(u *uuid.UUID) *ProfitUpdate {
	if u != nil {
		pu.SetCoinTypeID(*u)
	}
	return pu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (pu *ProfitUpdate) ClearCoinTypeID() *ProfitUpdate {
	pu.mutation.ClearCoinTypeID()
	return pu
}

// SetIncoming sets the "incoming" field.
func (pu *ProfitUpdate) SetIncoming(d decimal.Decimal) *ProfitUpdate {
	pu.mutation.ResetIncoming()
	pu.mutation.SetIncoming(d)
	return pu
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (pu *ProfitUpdate) SetNillableIncoming(d *decimal.Decimal) *ProfitUpdate {
	if d != nil {
		pu.SetIncoming(*d)
	}
	return pu
}

// AddIncoming adds d to the "incoming" field.
func (pu *ProfitUpdate) AddIncoming(d decimal.Decimal) *ProfitUpdate {
	pu.mutation.AddIncoming(d)
	return pu
}

// ClearIncoming clears the value of the "incoming" field.
func (pu *ProfitUpdate) ClearIncoming() *ProfitUpdate {
	pu.mutation.ClearIncoming()
	return pu
}

// Mutation returns the ProfitMutation object of the builder.
func (pu *ProfitUpdate) Mutation() *ProfitMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfitUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfitUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfitUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfitUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if profit.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profit.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profit.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pu *ProfitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profit.Table,
			Columns: profit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profit.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldDeletedAt,
		})
	}
	if value, ok := pu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldDeletedAt,
		})
	}
	if value, ok := pu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profit.FieldAppID,
		})
	}
	if pu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profit.FieldAppID,
		})
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profit.FieldUserID,
		})
	}
	if pu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profit.FieldUserID,
		})
	}
	if value, ok := pu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profit.FieldCoinTypeID,
		})
	}
	if pu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profit.FieldCoinTypeID,
		})
	}
	if value, ok := pu.mutation.Incoming(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profit.FieldIncoming,
		})
	}
	if value, ok := pu.mutation.AddedIncoming(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profit.FieldIncoming,
		})
	}
	if pu.mutation.IncomingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profit.FieldIncoming,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProfitUpdateOne is the builder for updating a single Profit entity.
type ProfitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfitMutation
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProfitUpdateOne) SetCreatedAt(u uint32) *ProfitUpdateOne {
	puo.mutation.ResetCreatedAt()
	puo.mutation.SetCreatedAt(u)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProfitUpdateOne) SetNillableCreatedAt(u *uint32) *ProfitUpdateOne {
	if u != nil {
		puo.SetCreatedAt(*u)
	}
	return puo
}

// AddCreatedAt adds u to the "created_at" field.
func (puo *ProfitUpdateOne) AddCreatedAt(u int32) *ProfitUpdateOne {
	puo.mutation.AddCreatedAt(u)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProfitUpdateOne) SetUpdatedAt(u uint32) *ProfitUpdateOne {
	puo.mutation.ResetUpdatedAt()
	puo.mutation.SetUpdatedAt(u)
	return puo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (puo *ProfitUpdateOne) AddUpdatedAt(u int32) *ProfitUpdateOne {
	puo.mutation.AddUpdatedAt(u)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *ProfitUpdateOne) SetDeletedAt(u uint32) *ProfitUpdateOne {
	puo.mutation.ResetDeletedAt()
	puo.mutation.SetDeletedAt(u)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *ProfitUpdateOne) SetNillableDeletedAt(u *uint32) *ProfitUpdateOne {
	if u != nil {
		puo.SetDeletedAt(*u)
	}
	return puo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (puo *ProfitUpdateOne) AddDeletedAt(u int32) *ProfitUpdateOne {
	puo.mutation.AddDeletedAt(u)
	return puo
}

// SetAppID sets the "app_id" field.
func (puo *ProfitUpdateOne) SetAppID(u uuid.UUID) *ProfitUpdateOne {
	puo.mutation.SetAppID(u)
	return puo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (puo *ProfitUpdateOne) SetNillableAppID(u *uuid.UUID) *ProfitUpdateOne {
	if u != nil {
		puo.SetAppID(*u)
	}
	return puo
}

// ClearAppID clears the value of the "app_id" field.
func (puo *ProfitUpdateOne) ClearAppID() *ProfitUpdateOne {
	puo.mutation.ClearAppID()
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *ProfitUpdateOne) SetUserID(u uuid.UUID) *ProfitUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *ProfitUpdateOne) SetNillableUserID(u *uuid.UUID) *ProfitUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// ClearUserID clears the value of the "user_id" field.
func (puo *ProfitUpdateOne) ClearUserID() *ProfitUpdateOne {
	puo.mutation.ClearUserID()
	return puo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (puo *ProfitUpdateOne) SetCoinTypeID(u uuid.UUID) *ProfitUpdateOne {
	puo.mutation.SetCoinTypeID(u)
	return puo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (puo *ProfitUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *ProfitUpdateOne {
	if u != nil {
		puo.SetCoinTypeID(*u)
	}
	return puo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (puo *ProfitUpdateOne) ClearCoinTypeID() *ProfitUpdateOne {
	puo.mutation.ClearCoinTypeID()
	return puo
}

// SetIncoming sets the "incoming" field.
func (puo *ProfitUpdateOne) SetIncoming(d decimal.Decimal) *ProfitUpdateOne {
	puo.mutation.ResetIncoming()
	puo.mutation.SetIncoming(d)
	return puo
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (puo *ProfitUpdateOne) SetNillableIncoming(d *decimal.Decimal) *ProfitUpdateOne {
	if d != nil {
		puo.SetIncoming(*d)
	}
	return puo
}

// AddIncoming adds d to the "incoming" field.
func (puo *ProfitUpdateOne) AddIncoming(d decimal.Decimal) *ProfitUpdateOne {
	puo.mutation.AddIncoming(d)
	return puo
}

// ClearIncoming clears the value of the "incoming" field.
func (puo *ProfitUpdateOne) ClearIncoming() *ProfitUpdateOne {
	puo.mutation.ClearIncoming()
	return puo
}

// Mutation returns the ProfitMutation object of the builder.
func (puo *ProfitUpdateOne) Mutation() *ProfitMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfitUpdateOne) Select(field string, fields ...string) *ProfitUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profit entity.
func (puo *ProfitUpdateOne) Save(ctx context.Context) (*Profit, error) {
	var (
		err  error
		node *Profit
	)
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Profit)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProfitMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfitUpdateOne) SaveX(ctx context.Context) *Profit {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfitUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfitUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfitUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if profit.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profit.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profit.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (puo *ProfitUpdateOne) sqlSave(ctx context.Context) (_node *Profit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profit.Table,
			Columns: profit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profit.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profit.FieldID)
		for _, f := range fields {
			if !profit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldDeletedAt,
		})
	}
	if value, ok := puo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profit.FieldDeletedAt,
		})
	}
	if value, ok := puo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profit.FieldAppID,
		})
	}
	if puo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profit.FieldAppID,
		})
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profit.FieldUserID,
		})
	}
	if puo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profit.FieldUserID,
		})
	}
	if value, ok := puo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profit.FieldCoinTypeID,
		})
	}
	if puo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profit.FieldCoinTypeID,
		})
	}
	if value, ok := puo.mutation.Incoming(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profit.FieldIncoming,
		})
	}
	if value, ok := puo.mutation.AddedIncoming(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profit.FieldIncoming,
		})
	}
	if puo.mutation.IncomingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profit.FieldIncoming,
		})
	}
	_node = &Profit{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
