// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/unsoldstatement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// UnsoldStatementUpdate is the builder for updating UnsoldStatement entities.
type UnsoldStatementUpdate struct {
	config
	hooks    []Hook
	mutation *UnsoldStatementMutation
}

// Where appends a list predicates to the UnsoldStatementUpdate builder.
func (usu *UnsoldStatementUpdate) Where(ps ...predicate.UnsoldStatement) *UnsoldStatementUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetCreatedAt sets the "created_at" field.
func (usu *UnsoldStatementUpdate) SetCreatedAt(u uint32) *UnsoldStatementUpdate {
	usu.mutation.ResetCreatedAt()
	usu.mutation.SetCreatedAt(u)
	return usu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usu *UnsoldStatementUpdate) SetNillableCreatedAt(u *uint32) *UnsoldStatementUpdate {
	if u != nil {
		usu.SetCreatedAt(*u)
	}
	return usu
}

// AddCreatedAt adds u to the "created_at" field.
func (usu *UnsoldStatementUpdate) AddCreatedAt(u int32) *UnsoldStatementUpdate {
	usu.mutation.AddCreatedAt(u)
	return usu
}

// SetUpdatedAt sets the "updated_at" field.
func (usu *UnsoldStatementUpdate) SetUpdatedAt(u uint32) *UnsoldStatementUpdate {
	usu.mutation.ResetUpdatedAt()
	usu.mutation.SetUpdatedAt(u)
	return usu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (usu *UnsoldStatementUpdate) AddUpdatedAt(u int32) *UnsoldStatementUpdate {
	usu.mutation.AddUpdatedAt(u)
	return usu
}

// SetDeletedAt sets the "deleted_at" field.
func (usu *UnsoldStatementUpdate) SetDeletedAt(u uint32) *UnsoldStatementUpdate {
	usu.mutation.ResetDeletedAt()
	usu.mutation.SetDeletedAt(u)
	return usu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (usu *UnsoldStatementUpdate) SetNillableDeletedAt(u *uint32) *UnsoldStatementUpdate {
	if u != nil {
		usu.SetDeletedAt(*u)
	}
	return usu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (usu *UnsoldStatementUpdate) AddDeletedAt(u int32) *UnsoldStatementUpdate {
	usu.mutation.AddDeletedAt(u)
	return usu
}

// SetGoodID sets the "good_id" field.
func (usu *UnsoldStatementUpdate) SetGoodID(u uuid.UUID) *UnsoldStatementUpdate {
	usu.mutation.SetGoodID(u)
	return usu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (usu *UnsoldStatementUpdate) SetNillableGoodID(u *uuid.UUID) *UnsoldStatementUpdate {
	if u != nil {
		usu.SetGoodID(*u)
	}
	return usu
}

// ClearGoodID clears the value of the "good_id" field.
func (usu *UnsoldStatementUpdate) ClearGoodID() *UnsoldStatementUpdate {
	usu.mutation.ClearGoodID()
	return usu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (usu *UnsoldStatementUpdate) SetCoinTypeID(u uuid.UUID) *UnsoldStatementUpdate {
	usu.mutation.SetCoinTypeID(u)
	return usu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (usu *UnsoldStatementUpdate) SetNillableCoinTypeID(u *uuid.UUID) *UnsoldStatementUpdate {
	if u != nil {
		usu.SetCoinTypeID(*u)
	}
	return usu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (usu *UnsoldStatementUpdate) ClearCoinTypeID() *UnsoldStatementUpdate {
	usu.mutation.ClearCoinTypeID()
	return usu
}

// SetAmount sets the "amount" field.
func (usu *UnsoldStatementUpdate) SetAmount(d decimal.Decimal) *UnsoldStatementUpdate {
	usu.mutation.ResetAmount()
	usu.mutation.SetAmount(d)
	return usu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (usu *UnsoldStatementUpdate) SetNillableAmount(d *decimal.Decimal) *UnsoldStatementUpdate {
	if d != nil {
		usu.SetAmount(*d)
	}
	return usu
}

// AddAmount adds d to the "amount" field.
func (usu *UnsoldStatementUpdate) AddAmount(d decimal.Decimal) *UnsoldStatementUpdate {
	usu.mutation.AddAmount(d)
	return usu
}

// ClearAmount clears the value of the "amount" field.
func (usu *UnsoldStatementUpdate) ClearAmount() *UnsoldStatementUpdate {
	usu.mutation.ClearAmount()
	return usu
}

// SetBenefitDate sets the "benefit_date" field.
func (usu *UnsoldStatementUpdate) SetBenefitDate(u uint32) *UnsoldStatementUpdate {
	usu.mutation.ResetBenefitDate()
	usu.mutation.SetBenefitDate(u)
	return usu
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (usu *UnsoldStatementUpdate) SetNillableBenefitDate(u *uint32) *UnsoldStatementUpdate {
	if u != nil {
		usu.SetBenefitDate(*u)
	}
	return usu
}

// AddBenefitDate adds u to the "benefit_date" field.
func (usu *UnsoldStatementUpdate) AddBenefitDate(u int32) *UnsoldStatementUpdate {
	usu.mutation.AddBenefitDate(u)
	return usu
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (usu *UnsoldStatementUpdate) ClearBenefitDate() *UnsoldStatementUpdate {
	usu.mutation.ClearBenefitDate()
	return usu
}

// SetStatementID sets the "statement_id" field.
func (usu *UnsoldStatementUpdate) SetStatementID(u uuid.UUID) *UnsoldStatementUpdate {
	usu.mutation.SetStatementID(u)
	return usu
}

// SetNillableStatementID sets the "statement_id" field if the given value is not nil.
func (usu *UnsoldStatementUpdate) SetNillableStatementID(u *uuid.UUID) *UnsoldStatementUpdate {
	if u != nil {
		usu.SetStatementID(*u)
	}
	return usu
}

// ClearStatementID clears the value of the "statement_id" field.
func (usu *UnsoldStatementUpdate) ClearStatementID() *UnsoldStatementUpdate {
	usu.mutation.ClearStatementID()
	return usu
}

// Mutation returns the UnsoldStatementMutation object of the builder.
func (usu *UnsoldStatementUpdate) Mutation() *UnsoldStatementMutation {
	return usu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UnsoldStatementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := usu.defaults(); err != nil {
		return 0, err
	}
	if len(usu.hooks) == 0 {
		affected, err = usu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnsoldStatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			usu.mutation = mutation
			affected, err = usu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(usu.hooks) - 1; i >= 0; i-- {
			if usu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = usu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, usu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UnsoldStatementUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UnsoldStatementUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UnsoldStatementUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *UnsoldStatementUpdate) defaults() error {
	if _, ok := usu.mutation.UpdatedAt(); !ok {
		if unsoldstatement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized unsoldstatement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := unsoldstatement.UpdateDefaultUpdatedAt()
		usu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (usu *UnsoldStatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unsoldstatement.Table,
			Columns: unsoldstatement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: unsoldstatement.FieldID,
			},
		},
	}
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldCreatedAt,
		})
	}
	if value, ok := usu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldCreatedAt,
		})
	}
	if value, ok := usu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldUpdatedAt,
		})
	}
	if value, ok := usu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldUpdatedAt,
		})
	}
	if value, ok := usu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldDeletedAt,
		})
	}
	if value, ok := usu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldDeletedAt,
		})
	}
	if value, ok := usu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: unsoldstatement.FieldGoodID,
		})
	}
	if usu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: unsoldstatement.FieldGoodID,
		})
	}
	if value, ok := usu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: unsoldstatement.FieldCoinTypeID,
		})
	}
	if usu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: unsoldstatement.FieldCoinTypeID,
		})
	}
	if value, ok := usu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: unsoldstatement.FieldAmount,
		})
	}
	if value, ok := usu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: unsoldstatement.FieldAmount,
		})
	}
	if usu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: unsoldstatement.FieldAmount,
		})
	}
	if value, ok := usu.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldBenefitDate,
		})
	}
	if value, ok := usu.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldBenefitDate,
		})
	}
	if usu.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: unsoldstatement.FieldBenefitDate,
		})
	}
	if value, ok := usu.mutation.StatementID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: unsoldstatement.FieldStatementID,
		})
	}
	if usu.mutation.StatementIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: unsoldstatement.FieldStatementID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unsoldstatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UnsoldStatementUpdateOne is the builder for updating a single UnsoldStatement entity.
type UnsoldStatementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UnsoldStatementMutation
}

// SetCreatedAt sets the "created_at" field.
func (usuo *UnsoldStatementUpdateOne) SetCreatedAt(u uint32) *UnsoldStatementUpdateOne {
	usuo.mutation.ResetCreatedAt()
	usuo.mutation.SetCreatedAt(u)
	return usuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usuo *UnsoldStatementUpdateOne) SetNillableCreatedAt(u *uint32) *UnsoldStatementUpdateOne {
	if u != nil {
		usuo.SetCreatedAt(*u)
	}
	return usuo
}

// AddCreatedAt adds u to the "created_at" field.
func (usuo *UnsoldStatementUpdateOne) AddCreatedAt(u int32) *UnsoldStatementUpdateOne {
	usuo.mutation.AddCreatedAt(u)
	return usuo
}

// SetUpdatedAt sets the "updated_at" field.
func (usuo *UnsoldStatementUpdateOne) SetUpdatedAt(u uint32) *UnsoldStatementUpdateOne {
	usuo.mutation.ResetUpdatedAt()
	usuo.mutation.SetUpdatedAt(u)
	return usuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (usuo *UnsoldStatementUpdateOne) AddUpdatedAt(u int32) *UnsoldStatementUpdateOne {
	usuo.mutation.AddUpdatedAt(u)
	return usuo
}

// SetDeletedAt sets the "deleted_at" field.
func (usuo *UnsoldStatementUpdateOne) SetDeletedAt(u uint32) *UnsoldStatementUpdateOne {
	usuo.mutation.ResetDeletedAt()
	usuo.mutation.SetDeletedAt(u)
	return usuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (usuo *UnsoldStatementUpdateOne) SetNillableDeletedAt(u *uint32) *UnsoldStatementUpdateOne {
	if u != nil {
		usuo.SetDeletedAt(*u)
	}
	return usuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (usuo *UnsoldStatementUpdateOne) AddDeletedAt(u int32) *UnsoldStatementUpdateOne {
	usuo.mutation.AddDeletedAt(u)
	return usuo
}

// SetGoodID sets the "good_id" field.
func (usuo *UnsoldStatementUpdateOne) SetGoodID(u uuid.UUID) *UnsoldStatementUpdateOne {
	usuo.mutation.SetGoodID(u)
	return usuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (usuo *UnsoldStatementUpdateOne) SetNillableGoodID(u *uuid.UUID) *UnsoldStatementUpdateOne {
	if u != nil {
		usuo.SetGoodID(*u)
	}
	return usuo
}

// ClearGoodID clears the value of the "good_id" field.
func (usuo *UnsoldStatementUpdateOne) ClearGoodID() *UnsoldStatementUpdateOne {
	usuo.mutation.ClearGoodID()
	return usuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (usuo *UnsoldStatementUpdateOne) SetCoinTypeID(u uuid.UUID) *UnsoldStatementUpdateOne {
	usuo.mutation.SetCoinTypeID(u)
	return usuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (usuo *UnsoldStatementUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *UnsoldStatementUpdateOne {
	if u != nil {
		usuo.SetCoinTypeID(*u)
	}
	return usuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (usuo *UnsoldStatementUpdateOne) ClearCoinTypeID() *UnsoldStatementUpdateOne {
	usuo.mutation.ClearCoinTypeID()
	return usuo
}

// SetAmount sets the "amount" field.
func (usuo *UnsoldStatementUpdateOne) SetAmount(d decimal.Decimal) *UnsoldStatementUpdateOne {
	usuo.mutation.ResetAmount()
	usuo.mutation.SetAmount(d)
	return usuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (usuo *UnsoldStatementUpdateOne) SetNillableAmount(d *decimal.Decimal) *UnsoldStatementUpdateOne {
	if d != nil {
		usuo.SetAmount(*d)
	}
	return usuo
}

// AddAmount adds d to the "amount" field.
func (usuo *UnsoldStatementUpdateOne) AddAmount(d decimal.Decimal) *UnsoldStatementUpdateOne {
	usuo.mutation.AddAmount(d)
	return usuo
}

// ClearAmount clears the value of the "amount" field.
func (usuo *UnsoldStatementUpdateOne) ClearAmount() *UnsoldStatementUpdateOne {
	usuo.mutation.ClearAmount()
	return usuo
}

// SetBenefitDate sets the "benefit_date" field.
func (usuo *UnsoldStatementUpdateOne) SetBenefitDate(u uint32) *UnsoldStatementUpdateOne {
	usuo.mutation.ResetBenefitDate()
	usuo.mutation.SetBenefitDate(u)
	return usuo
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (usuo *UnsoldStatementUpdateOne) SetNillableBenefitDate(u *uint32) *UnsoldStatementUpdateOne {
	if u != nil {
		usuo.SetBenefitDate(*u)
	}
	return usuo
}

// AddBenefitDate adds u to the "benefit_date" field.
func (usuo *UnsoldStatementUpdateOne) AddBenefitDate(u int32) *UnsoldStatementUpdateOne {
	usuo.mutation.AddBenefitDate(u)
	return usuo
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (usuo *UnsoldStatementUpdateOne) ClearBenefitDate() *UnsoldStatementUpdateOne {
	usuo.mutation.ClearBenefitDate()
	return usuo
}

// SetStatementID sets the "statement_id" field.
func (usuo *UnsoldStatementUpdateOne) SetStatementID(u uuid.UUID) *UnsoldStatementUpdateOne {
	usuo.mutation.SetStatementID(u)
	return usuo
}

// SetNillableStatementID sets the "statement_id" field if the given value is not nil.
func (usuo *UnsoldStatementUpdateOne) SetNillableStatementID(u *uuid.UUID) *UnsoldStatementUpdateOne {
	if u != nil {
		usuo.SetStatementID(*u)
	}
	return usuo
}

// ClearStatementID clears the value of the "statement_id" field.
func (usuo *UnsoldStatementUpdateOne) ClearStatementID() *UnsoldStatementUpdateOne {
	usuo.mutation.ClearStatementID()
	return usuo
}

// Mutation returns the UnsoldStatementMutation object of the builder.
func (usuo *UnsoldStatementUpdateOne) Mutation() *UnsoldStatementMutation {
	return usuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UnsoldStatementUpdateOne) Select(field string, fields ...string) *UnsoldStatementUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UnsoldStatement entity.
func (usuo *UnsoldStatementUpdateOne) Save(ctx context.Context) (*UnsoldStatement, error) {
	var (
		err  error
		node *UnsoldStatement
	)
	if err := usuo.defaults(); err != nil {
		return nil, err
	}
	if len(usuo.hooks) == 0 {
		node, err = usuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnsoldStatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			usuo.mutation = mutation
			node, err = usuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(usuo.hooks) - 1; i >= 0; i-- {
			if usuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = usuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, usuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UnsoldStatement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UnsoldStatementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UnsoldStatementUpdateOne) SaveX(ctx context.Context) *UnsoldStatement {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UnsoldStatementUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UnsoldStatementUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *UnsoldStatementUpdateOne) defaults() error {
	if _, ok := usuo.mutation.UpdatedAt(); !ok {
		if unsoldstatement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized unsoldstatement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := unsoldstatement.UpdateDefaultUpdatedAt()
		usuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (usuo *UnsoldStatementUpdateOne) sqlSave(ctx context.Context) (_node *UnsoldStatement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unsoldstatement.Table,
			Columns: unsoldstatement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: unsoldstatement.FieldID,
			},
		},
	}
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UnsoldStatement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, unsoldstatement.FieldID)
		for _, f := range fields {
			if !unsoldstatement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != unsoldstatement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldCreatedAt,
		})
	}
	if value, ok := usuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldCreatedAt,
		})
	}
	if value, ok := usuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldUpdatedAt,
		})
	}
	if value, ok := usuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldUpdatedAt,
		})
	}
	if value, ok := usuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldDeletedAt,
		})
	}
	if value, ok := usuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldDeletedAt,
		})
	}
	if value, ok := usuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: unsoldstatement.FieldGoodID,
		})
	}
	if usuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: unsoldstatement.FieldGoodID,
		})
	}
	if value, ok := usuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: unsoldstatement.FieldCoinTypeID,
		})
	}
	if usuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: unsoldstatement.FieldCoinTypeID,
		})
	}
	if value, ok := usuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: unsoldstatement.FieldAmount,
		})
	}
	if value, ok := usuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: unsoldstatement.FieldAmount,
		})
	}
	if usuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: unsoldstatement.FieldAmount,
		})
	}
	if value, ok := usuo.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldBenefitDate,
		})
	}
	if value, ok := usuo.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: unsoldstatement.FieldBenefitDate,
		})
	}
	if usuo.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: unsoldstatement.FieldBenefitDate,
		})
	}
	if value, ok := usuo.mutation.StatementID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: unsoldstatement.FieldStatementID,
		})
	}
	if usuo.mutation.StatementIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: unsoldstatement.FieldStatementID,
		})
	}
	_node = &UnsoldStatement{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unsoldstatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
