// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/ledger-middleware/pkg/db/ent/ledgerlock"
	"github.com/google/uuid"
)

// LedgerLock is the model entity for the LedgerLock schema.
type LedgerLock struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LedgerLock) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ledgerlock.FieldCreatedAt, ledgerlock.FieldUpdatedAt, ledgerlock.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case ledgerlock.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LedgerLock", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LedgerLock fields.
func (ll *LedgerLock) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ledgerlock.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ll.ID = *value
			}
		case ledgerlock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ll.CreatedAt = uint32(value.Int64)
			}
		case ledgerlock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ll.UpdatedAt = uint32(value.Int64)
			}
		case ledgerlock.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ll.DeletedAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LedgerLock.
// Note that you need to call LedgerLock.Unwrap() before calling this method if this LedgerLock
// was returned from a transaction, and the transaction was committed or rolled back.
func (ll *LedgerLock) Update() *LedgerLockUpdateOne {
	return (&LedgerLockClient{config: ll.config}).UpdateOne(ll)
}

// Unwrap unwraps the LedgerLock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ll *LedgerLock) Unwrap() *LedgerLock {
	_tx, ok := ll.config.driver.(*txDriver)
	if !ok {
		panic("ent: LedgerLock is not a transactional entity")
	}
	ll.config.driver = _tx.drv
	return ll
}

// String implements the fmt.Stringer.
func (ll *LedgerLock) String() string {
	var builder strings.Builder
	builder.WriteString("LedgerLock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ll.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ll.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ll.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ll.DeletedAt))
	builder.WriteByte(')')
	return builder.String()
}

// LedgerLocks is a parsable slice of LedgerLock.
type LedgerLocks []*LedgerLock

func (ll LedgerLocks) config(cfg config) {
	for _i := range ll {
		ll[_i].config = cfg
	}
}
